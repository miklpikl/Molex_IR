
Power_Board_d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000012b  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e8  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000107  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_master_init>:
//created by John Fritz 11/17/2015

#include "spi.h"

void spi_master_init(void) {
	DDR_SPI = (1 << MOSI) | (1 << SCK);	//set MOSI and sck to output
  80:	88 e2       	ldi	r24, 0x28	; 40
  82:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << MSTR);	//enable spi, master
  84:	80 e5       	ldi	r24, 0x50	; 80
  86:	8c bd       	out	0x2c, r24	; 44
	#endif
	#if SCK_DIV == 8
		SPCR |= (1 << SPI2X) | (1 << SPR0);
	#endif
	#if SCK_DIV == 16
		SPCR |= (1 << SPR0);
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	8c bd       	out	0x2c, r24	; 44
  8e:	08 95       	ret

00000090 <spi_master_transmit>:
	DDR_SPI = (1 << MISO);	//set MISO to output
	SPCR = (1 << SPE);	//enable spi
}

uint8_t spi_master_transmit(uint8_t data) {
	SPDR = data;	//load data into SPI transmit register and start transmission
  90:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));	//wait until transmission completes
  92:	0d b4       	in	r0, 0x2d	; 45
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <spi_master_transmit+0x2>
	return SPDR;
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	08 95       	ret

0000009c <main>:
#include "i2c.c"
#include "spi.c"

int main(void) {
    //TODO:: init stuff
	spi_master_init();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <spi_master_init>
    while (1) {
		//TODO:: code stuff
		for (uint8_t i = 0; i <= 200; i++) {
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	cd 2f       	mov	r28, r29
			spi_master_transmit(i);
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 48 00 	call	0x90	; 0x90 <spi_master_transmit>
int main(void) {
    //TODO:: init stuff
	spi_master_init();
    while (1) {
		//TODO:: code stuff
		for (uint8_t i = 0; i <= 200; i++) {
  aa:	cf 5f       	subi	r28, 0xFF	; 255
  ac:	c9 3c       	cpi	r28, 0xC9	; 201
  ae:	d1 f7       	brne	.-12     	; 0xa4 <main+0x8>
  b0:	f8 cf       	rjmp	.-16     	; 0xa2 <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
