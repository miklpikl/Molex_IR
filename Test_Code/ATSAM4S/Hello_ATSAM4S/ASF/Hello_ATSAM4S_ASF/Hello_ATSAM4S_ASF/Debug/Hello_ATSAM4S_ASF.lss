
Hello_ATSAM4S_ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fc8  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004d0  20000000  00402fc8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000250  200004d0  00403498  000104d0  2**2
                  ALLOC
  3 .stack        00003000  20000720  004036e8  000104d0  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000104fa  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d817  00000000  00000000  00010555  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000241a  00000000  00000000  0001dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008e0  00000000  00000000  00020186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  000149b1  00000000  00000000  00020a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000ceec  00000000  00000000  00035417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00058202  00000000  00000000  00042303  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000059d3  00000000  00000000  0009a505  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  0009fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015d8  00000000  00000000  000a07e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003720 	.word	0x20003720
  400004:	00402b4d 	.word	0x00402b4d
  400008:	00402b49 	.word	0x00402b49
  40000c:	00402b49 	.word	0x00402b49
  400010:	00402b49 	.word	0x00402b49
  400014:	00402b49 	.word	0x00402b49
  400018:	00402b49 	.word	0x00402b49
	...
  40002c:	00402b49 	.word	0x00402b49
  400030:	00402b49 	.word	0x00402b49
  400034:	00000000 	.word	0x00000000
  400038:	00402b49 	.word	0x00402b49
  40003c:	00402b49 	.word	0x00402b49
  400040:	00402b49 	.word	0x00402b49
  400044:	00402b49 	.word	0x00402b49
  400048:	00402b49 	.word	0x00402b49
  40004c:	00402b49 	.word	0x00402b49
  400050:	00402b49 	.word	0x00402b49
  400054:	00402b49 	.word	0x00402b49
  400058:	00402b49 	.word	0x00402b49
  40005c:	00402b49 	.word	0x00402b49
  400060:	00402b49 	.word	0x00402b49
  400064:	00402b49 	.word	0x00402b49
  400068:	00000000 	.word	0x00000000
  40006c:	00400f95 	.word	0x00400f95
  400070:	00400fa9 	.word	0x00400fa9
  400074:	00400fbd 	.word	0x00400fbd
  400078:	00402b49 	.word	0x00402b49
  40007c:	00402b49 	.word	0x00402b49
	...
  400088:	00402b49 	.word	0x00402b49
  40008c:	00402b49 	.word	0x00402b49
  400090:	00402b49 	.word	0x00402b49
  400094:	00402b49 	.word	0x00402b49
  400098:	00402b49 	.word	0x00402b49
  40009c:	00402b49 	.word	0x00402b49
  4000a0:	00402b49 	.word	0x00402b49
  4000a4:	00402b49 	.word	0x00402b49
  4000a8:	00402b49 	.word	0x00402b49
  4000ac:	00402b49 	.word	0x00402b49
  4000b0:	00402b49 	.word	0x00402b49
  4000b4:	00402b49 	.word	0x00402b49
  4000b8:	00402b49 	.word	0x00402b49
  4000bc:	00402b49 	.word	0x00402b49
  4000c0:	00402b49 	.word	0x00402b49
  4000c4:	00402b49 	.word	0x00402b49
  4000c8:	00401809 	.word	0x00401809

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004d0 	.word	0x200004d0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402fc8 	.word	0x00402fc8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00402fc8 	.word	0x00402fc8
  40011c:	200004d4 	.word	0x200004d4
  400120:	00402fc8 	.word	0x00402fc8
  400124:	00000000 	.word	0x00000000

00400128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400128:	4a02      	ldr	r2, [pc, #8]	; (400134 <udi_cdc_comm_disable+0xc>)
  40012a:	7813      	ldrb	r3, [r2, #0]
  40012c:	3b01      	subs	r3, #1
  40012e:	b2db      	uxtb	r3, r3
  400130:	7013      	strb	r3, [r2, #0]
  400132:	4770      	bx	lr
  400134:	20000580 	.word	0x20000580

00400138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  400138:	2000      	movs	r0, #0
  40013a:	4770      	bx	lr

0040013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  40013c:	2000      	movs	r0, #0
  40013e:	4770      	bx	lr

00400140 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  400140:	4b1d      	ldr	r3, [pc, #116]	; (4001b8 <udi_cdc_comm_setup+0x78>)
  400142:	781b      	ldrb	r3, [r3, #0]
  400144:	f013 0f80 	tst.w	r3, #128	; 0x80
  400148:	d012      	beq.n	400170 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40014e:	2b20      	cmp	r3, #32
  400150:	d128      	bne.n	4001a4 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400152:	4b19      	ldr	r3, [pc, #100]	; (4001b8 <udi_cdc_comm_setup+0x78>)
  400154:	785b      	ldrb	r3, [r3, #1]
  400156:	2b21      	cmp	r3, #33	; 0x21
  400158:	d126      	bne.n	4001a8 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40015a:	4b17      	ldr	r3, [pc, #92]	; (4001b8 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  40015c:	88db      	ldrh	r3, [r3, #6]
  40015e:	2b07      	cmp	r3, #7
  400160:	d124      	bne.n	4001ac <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400162:	4b15      	ldr	r3, [pc, #84]	; (4001b8 <udi_cdc_comm_setup+0x78>)
  400164:	4a15      	ldr	r2, [pc, #84]	; (4001bc <udi_cdc_comm_setup+0x7c>)
  400166:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400168:	2207      	movs	r2, #7
  40016a:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  40016c:	2001      	movs	r0, #1
  40016e:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400170:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400174:	2b20      	cmp	r3, #32
  400176:	d11b      	bne.n	4001b0 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  400178:	4b0f      	ldr	r3, [pc, #60]	; (4001b8 <udi_cdc_comm_setup+0x78>)
  40017a:	7858      	ldrb	r0, [r3, #1]
  40017c:	2820      	cmp	r0, #32
  40017e:	d004      	beq.n	40018a <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400180:	2822      	cmp	r0, #34	; 0x22
  400182:	bf14      	ite	ne
  400184:	2000      	movne	r0, #0
  400186:	2001      	moveq	r0, #1
  400188:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40018a:	4b0b      	ldr	r3, [pc, #44]	; (4001b8 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  40018c:	88db      	ldrh	r3, [r3, #6]
  40018e:	2b07      	cmp	r3, #7
  400190:	d110      	bne.n	4001b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  400192:	4b09      	ldr	r3, [pc, #36]	; (4001b8 <udi_cdc_comm_setup+0x78>)
  400194:	4a0a      	ldr	r2, [pc, #40]	; (4001c0 <udi_cdc_comm_setup+0x80>)
  400196:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  400198:	4a08      	ldr	r2, [pc, #32]	; (4001bc <udi_cdc_comm_setup+0x7c>)
  40019a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40019c:	2207      	movs	r2, #7
  40019e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4001a0:	2001      	movs	r0, #1
  4001a2:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4001a4:	2000      	movs	r0, #0
  4001a6:	4770      	bx	lr
  4001a8:	2000      	movs	r0, #0
  4001aa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4001ac:	2000      	movs	r0, #0
  4001ae:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4001b0:	2000      	movs	r0, #0
  4001b2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4001b4:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  4001b6:	4770      	bx	lr
  4001b8:	20000708 	.word	0x20000708
  4001bc:	200004ec 	.word	0x200004ec
  4001c0:	004001c5 	.word	0x004001c5

004001c4 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4001c4:	4770      	bx	lr
  4001c6:	bf00      	nop

004001c8 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  4001c8:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  4001ca:	2300      	movs	r3, #0
  4001cc:	4a10      	ldr	r2, [pc, #64]	; (400210 <udi_cdc_comm_enable+0x48>)
  4001ce:	7013      	strb	r3, [r2, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4001d0:	4a10      	ldr	r2, [pc, #64]	; (400214 <udi_cdc_comm_enable+0x4c>)
  4001d2:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  4001d4:	4a10      	ldr	r2, [pc, #64]	; (400218 <udi_cdc_comm_enable+0x50>)
  4001d6:	21a1      	movs	r1, #161	; 0xa1
  4001d8:	7011      	strb	r1, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4001da:	2120      	movs	r1, #32
  4001dc:	7051      	strb	r1, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  4001de:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  4001e0:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  4001e2:	2102      	movs	r1, #2
  4001e4:	80d1      	strh	r1, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  4001e6:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4001e8:	4a0c      	ldr	r2, [pc, #48]	; (40021c <udi_cdc_comm_enable+0x54>)
  4001ea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  4001ee:	6011      	str	r1, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4001f0:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4001f2:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4001f4:	2308      	movs	r3, #8
  4001f6:	7193      	strb	r3, [r2, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
  4001f8:	4b09      	ldr	r3, [pc, #36]	; (400220 <udi_cdc_comm_enable+0x58>)
  4001fa:	4798      	blx	r3
  4001fc:	4602      	mov	r2, r0
  4001fe:	b120      	cbz	r0, 40020a <udi_cdc_comm_enable+0x42>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400200:	4903      	ldr	r1, [pc, #12]	; (400210 <udi_cdc_comm_enable+0x48>)
  400202:	780b      	ldrb	r3, [r1, #0]
  400204:	3301      	adds	r3, #1
  400206:	b2db      	uxtb	r3, r3
  400208:	700b      	strb	r3, [r1, #0]
	return true;
}
  40020a:	4610      	mov	r0, r2
  40020c:	bd08      	pop	{r3, pc}
  40020e:	bf00      	nop
  400210:	20000580 	.word	0x20000580
  400214:	20000628 	.word	0x20000628
  400218:	20000594 	.word	0x20000594
  40021c:	200004ec 	.word	0x200004ec
  400220:	00402db9 	.word	0x00402db9

00400224 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400224:	4b42      	ldr	r3, [pc, #264]	; (400330 <udi_cdc_tx_send+0x10c>)
  400226:	781b      	ldrb	r3, [r3, #0]
  400228:	f013 0fff 	tst.w	r3, #255	; 0xff
  40022c:	d17f      	bne.n	40032e <udi_cdc_tx_send+0x10a>
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  40022e:	b530      	push	{r4, r5, lr}
  400230:	b083      	sub	sp, #12
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400232:	4b40      	ldr	r3, [pc, #256]	; (400334 <udi_cdc_tx_send+0x110>)
  400234:	4798      	blx	r3
  400236:	b130      	cbz	r0, 400246 <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400238:	4b3f      	ldr	r3, [pc, #252]	; (400338 <udi_cdc_tx_send+0x114>)
  40023a:	881c      	ldrh	r4, [r3, #0]
  40023c:	4b3f      	ldr	r3, [pc, #252]	; (40033c <udi_cdc_tx_send+0x118>)
  40023e:	4798      	blx	r3
  400240:	4284      	cmp	r4, r0
  400242:	d106      	bne.n	400252 <udi_cdc_tx_send+0x2e>
  400244:	e071      	b.n	40032a <udi_cdc_tx_send+0x106>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400246:	4b3c      	ldr	r3, [pc, #240]	; (400338 <udi_cdc_tx_send+0x114>)
  400248:	881c      	ldrh	r4, [r3, #0]
  40024a:	4b3d      	ldr	r3, [pc, #244]	; (400340 <udi_cdc_tx_send+0x11c>)
  40024c:	4798      	blx	r3
  40024e:	4284      	cmp	r4, r0
  400250:	d06b      	beq.n	40032a <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400252:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400256:	fab5 f585 	clz	r5, r5
  40025a:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40025c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40025e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400262:	2200      	movs	r2, #0
  400264:	4b37      	ldr	r3, [pc, #220]	; (400344 <udi_cdc_tx_send+0x120>)
  400266:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400268:	4b37      	ldr	r3, [pc, #220]	; (400348 <udi_cdc_tx_send+0x124>)
  40026a:	781c      	ldrb	r4, [r3, #0]
  40026c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40026e:	4b37      	ldr	r3, [pc, #220]	; (40034c <udi_cdc_tx_send+0x128>)
  400270:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400274:	b9db      	cbnz	r3, 4002ae <udi_cdc_tx_send+0x8a>
		sof_zlp_counter++;
  400276:	4a36      	ldr	r2, [pc, #216]	; (400350 <udi_cdc_tx_send+0x12c>)
  400278:	8813      	ldrh	r3, [r2, #0]
  40027a:	3301      	adds	r3, #1
  40027c:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  40027e:	4b2d      	ldr	r3, [pc, #180]	; (400334 <udi_cdc_tx_send+0x110>)
  400280:	4798      	blx	r3
  400282:	b918      	cbnz	r0, 40028c <udi_cdc_tx_send+0x68>
  400284:	4b32      	ldr	r3, [pc, #200]	; (400350 <udi_cdc_tx_send+0x12c>)
  400286:	881b      	ldrh	r3, [r3, #0]
  400288:	2b63      	cmp	r3, #99	; 0x63
  40028a:	d907      	bls.n	40029c <udi_cdc_tx_send+0x78>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  40028c:	4b29      	ldr	r3, [pc, #164]	; (400334 <udi_cdc_tx_send+0x110>)
  40028e:	4798      	blx	r3
  400290:	b168      	cbz	r0, 4002ae <udi_cdc_tx_send+0x8a>
  400292:	4b2f      	ldr	r3, [pc, #188]	; (400350 <udi_cdc_tx_send+0x12c>)
  400294:	881b      	ldrh	r3, [r3, #0]
  400296:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40029a:	d208      	bcs.n	4002ae <udi_cdc_tx_send+0x8a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40029c:	2d00      	cmp	r5, #0
  40029e:	d044      	beq.n	40032a <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
  4002a0:	2201      	movs	r2, #1
  4002a2:	4b28      	ldr	r3, [pc, #160]	; (400344 <udi_cdc_tx_send+0x120>)
  4002a4:	701a      	strb	r2, [r3, #0]
  4002a6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4002aa:	b662      	cpsie	i
  4002ac:	e03d      	b.n	40032a <udi_cdc_tx_send+0x106>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  4002ae:	2200      	movs	r2, #0
  4002b0:	4b27      	ldr	r3, [pc, #156]	; (400350 <udi_cdc_tx_send+0x12c>)
  4002b2:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  4002b4:	4b27      	ldr	r3, [pc, #156]	; (400354 <udi_cdc_tx_send+0x130>)
  4002b6:	781b      	ldrb	r3, [r3, #0]
  4002b8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002bc:	d105      	bne.n	4002ca <udi_cdc_tx_send+0xa6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4002be:	fab4 f384 	clz	r3, r4
  4002c2:	095b      	lsrs	r3, r3, #5
  4002c4:	4a20      	ldr	r2, [pc, #128]	; (400348 <udi_cdc_tx_send+0x124>)
  4002c6:	7013      	strb	r3, [r2, #0]
  4002c8:	e002      	b.n	4002d0 <udi_cdc_tx_send+0xac>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4002ca:	fab4 f484 	clz	r4, r4
  4002ce:	0964      	lsrs	r4, r4, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002d0:	2201      	movs	r2, #1
  4002d2:	4b17      	ldr	r3, [pc, #92]	; (400330 <udi_cdc_tx_send+0x10c>)
  4002d4:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002d6:	b125      	cbz	r5, 4002e2 <udi_cdc_tx_send+0xbe>
		cpu_irq_enable();
  4002d8:	4b1a      	ldr	r3, [pc, #104]	; (400344 <udi_cdc_tx_send+0x120>)
  4002da:	701a      	strb	r2, [r3, #0]
  4002dc:	f3bf 8f5f 	dmb	sy
  4002e0:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002e2:	4625      	mov	r5, r4
  4002e4:	4b19      	ldr	r3, [pc, #100]	; (40034c <udi_cdc_tx_send+0x128>)
  4002e6:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  4002ea:	3c40      	subs	r4, #64	; 0x40
  4002ec:	bf18      	it	ne
  4002ee:	2401      	movne	r4, #1
	if (b_short_packet) {
  4002f0:	b164      	cbz	r4, 40030c <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
  4002f2:	4b10      	ldr	r3, [pc, #64]	; (400334 <udi_cdc_tx_send+0x110>)
  4002f4:	4798      	blx	r3
  4002f6:	b120      	cbz	r0, 400302 <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002f8:	4b10      	ldr	r3, [pc, #64]	; (40033c <udi_cdc_tx_send+0x118>)
  4002fa:	4798      	blx	r3
  4002fc:	4b0e      	ldr	r3, [pc, #56]	; (400338 <udi_cdc_tx_send+0x114>)
  4002fe:	8018      	strh	r0, [r3, #0]
  400300:	e007      	b.n	400312 <udi_cdc_tx_send+0xee>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400302:	4b0f      	ldr	r3, [pc, #60]	; (400340 <udi_cdc_tx_send+0x11c>)
  400304:	4798      	blx	r3
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <udi_cdc_tx_send+0x114>)
  400308:	8018      	strh	r0, [r3, #0]
  40030a:	e002      	b.n	400312 <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  40030c:	2200      	movs	r2, #0
  40030e:	4b0a      	ldr	r3, [pc, #40]	; (400338 <udi_cdc_tx_send+0x114>)
  400310:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400312:	4b0e      	ldr	r3, [pc, #56]	; (40034c <udi_cdc_tx_send+0x128>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400314:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400318:	4a0f      	ldr	r2, [pc, #60]	; (400358 <udi_cdc_tx_send+0x134>)
  40031a:	9200      	str	r2, [sp, #0]
  40031c:	2081      	movs	r0, #129	; 0x81
  40031e:	4621      	mov	r1, r4
  400320:	4a0e      	ldr	r2, [pc, #56]	; (40035c <udi_cdc_tx_send+0x138>)
  400322:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400326:	4c0e      	ldr	r4, [pc, #56]	; (400360 <udi_cdc_tx_send+0x13c>)
  400328:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  40032a:	b003      	add	sp, #12
  40032c:	bd30      	pop	{r4, r5, pc}
  40032e:	4770      	bx	lr
  400330:	20000590 	.word	0x20000590
  400334:	0040242d 	.word	0x0040242d
  400338:	20000588 	.word	0x20000588
  40033c:	00402495 	.word	0x00402495
  400340:	00402485 	.word	0x00402485
  400344:	200000a0 	.word	0x200000a0
  400348:	200004f4 	.word	0x200004f4
  40034c:	200004f8 	.word	0x200004f8
  400350:	20000586 	.word	0x20000586
  400354:	20000624 	.word	0x20000624
  400358:	00400365 	.word	0x00400365
  40035c:	200004fc 	.word	0x200004fc
  400360:	00402831 	.word	0x00402831

00400364 <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400364:	b988      	cbnz	r0, 40038a <udi_cdc_data_sent+0x26>
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400366:	b508      	push	{r3, lr}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400368:	4b08      	ldr	r3, [pc, #32]	; (40038c <udi_cdc_data_sent+0x28>)
  40036a:	781b      	ldrb	r3, [r3, #0]
  40036c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400370:	bf0c      	ite	eq
  400372:	2201      	moveq	r2, #1
  400374:	2200      	movne	r2, #0
  400376:	4b06      	ldr	r3, [pc, #24]	; (400390 <udi_cdc_data_sent+0x2c>)
  400378:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40037c:	4b05      	ldr	r3, [pc, #20]	; (400394 <udi_cdc_data_sent+0x30>)
  40037e:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400380:	4b05      	ldr	r3, [pc, #20]	; (400398 <udi_cdc_data_sent+0x34>)
  400382:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400384:	4b05      	ldr	r3, [pc, #20]	; (40039c <udi_cdc_data_sent+0x38>)
  400386:	4798      	blx	r3
  400388:	bd08      	pop	{r3, pc}
  40038a:	4770      	bx	lr
  40038c:	200004f4 	.word	0x200004f4
  400390:	200004f8 	.word	0x200004f8
  400394:	20000624 	.word	0x20000624
  400398:	20000590 	.word	0x20000590
  40039c:	00400225 	.word	0x00400225

004003a0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  4003a0:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  4003a2:	2000      	movs	r0, #0
  4003a4:	4b01      	ldr	r3, [pc, #4]	; (4003ac <udi_cdc_data_sof_notify+0xc>)
  4003a6:	4798      	blx	r3
  4003a8:	bd08      	pop	{r3, pc}
  4003aa:	bf00      	nop
  4003ac:	00400225 	.word	0x00400225

004003b0 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
  4003b0:	b508      	push	{r3, lr}
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4003b2:	4a06      	ldr	r2, [pc, #24]	; (4003cc <udi_cdc_data_disable+0x1c>)
  4003b4:	7813      	ldrb	r3, [r2, #0]
  4003b6:	3b01      	subs	r3, #1
  4003b8:	b2db      	uxtb	r3, r3
  4003ba:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  4003bc:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
  4003be:	4b04      	ldr	r3, [pc, #16]	; (4003d0 <udi_cdc_data_disable+0x20>)
  4003c0:	4798      	blx	r3
	udi_cdc_data_running = false;
  4003c2:	2200      	movs	r2, #0
  4003c4:	4b03      	ldr	r3, [pc, #12]	; (4003d4 <udi_cdc_data_disable+0x24>)
  4003c6:	701a      	strb	r2, [r3, #0]
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	200004f3 	.word	0x200004f3
  4003d0:	00402dc5 	.word	0x00402dc5
  4003d4:	2000058a 	.word	0x2000058a

004003d8 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003d8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003dc:	b672      	cpsid	i
  4003de:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4003e2:	2100      	movs	r1, #0
  4003e4:	4b0a      	ldr	r3, [pc, #40]	; (400410 <udi_cdc_multi_get_nb_received_data+0x38>)
  4003e6:	7019      	strb	r1, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003e8:	4b0a      	ldr	r3, [pc, #40]	; (400414 <udi_cdc_multi_get_nb_received_data+0x3c>)
  4003ea:	8818      	ldrh	r0, [r3, #0]
  4003ec:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003ee:	4b0a      	ldr	r3, [pc, #40]	; (400418 <udi_cdc_multi_get_nb_received_data+0x40>)
  4003f0:	781b      	ldrb	r3, [r3, #0]
  4003f2:	b2db      	uxtb	r3, r3
  4003f4:	4909      	ldr	r1, [pc, #36]	; (40041c <udi_cdc_multi_get_nb_received_data+0x44>)
  4003f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  4003fa:	b29b      	uxth	r3, r3
  4003fc:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003fe:	b92a      	cbnz	r2, 40040c <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
  400400:	2201      	movs	r2, #1
  400402:	4b03      	ldr	r3, [pc, #12]	; (400410 <udi_cdc_multi_get_nb_received_data+0x38>)
  400404:	701a      	strb	r2, [r3, #0]
  400406:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40040a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  40040c:	4770      	bx	lr
  40040e:	bf00      	nop
  400410:	200000a0 	.word	0x200000a0
  400414:	20000584 	.word	0x20000584
  400418:	2000058c 	.word	0x2000058c
  40041c:	2000057c 	.word	0x2000057c

00400420 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400420:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400422:	4b03      	ldr	r3, [pc, #12]	; (400430 <udi_cdc_multi_is_rx_ready+0x10>)
  400424:	4798      	blx	r3
}
  400426:	3000      	adds	r0, #0
  400428:	bf18      	it	ne
  40042a:	2001      	movne	r0, #1
  40042c:	bd08      	pop	{r3, pc}
  40042e:	bf00      	nop
  400430:	004003d9 	.word	0x004003d9

00400434 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400434:	b510      	push	{r4, lr}
  400436:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400438:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40043c:	fab3 f383 	clz	r3, r3
  400440:	095b      	lsrs	r3, r3, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400442:	b672      	cpsid	i
  400444:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400448:	2100      	movs	r1, #0
  40044a:	4a1f      	ldr	r2, [pc, #124]	; (4004c8 <udi_cdc_rx_start+0x94>)
  40044c:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  40044e:	4a1f      	ldr	r2, [pc, #124]	; (4004cc <udi_cdc_rx_start+0x98>)
  400450:	7812      	ldrb	r2, [r2, #0]
  400452:	b2d4      	uxtb	r4, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400454:	4a1e      	ldr	r2, [pc, #120]	; (4004d0 <udi_cdc_rx_start+0x9c>)
  400456:	7812      	ldrb	r2, [r2, #0]
  400458:	f012 0fff 	tst.w	r2, #255	; 0xff
  40045c:	d108      	bne.n	400470 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  40045e:	4a1d      	ldr	r2, [pc, #116]	; (4004d4 <udi_cdc_rx_start+0xa0>)
  400460:	8811      	ldrh	r1, [r2, #0]
  400462:	b289      	uxth	r1, r1
  400464:	4a1c      	ldr	r2, [pc, #112]	; (4004d8 <udi_cdc_rx_start+0xa4>)
  400466:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40046a:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  40046c:	4291      	cmp	r1, r2
  40046e:	d208      	bcs.n	400482 <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400470:	b333      	cbz	r3, 4004c0 <udi_cdc_rx_start+0x8c>
		cpu_irq_enable();
  400472:	2201      	movs	r2, #1
  400474:	4b14      	ldr	r3, [pc, #80]	; (4004c8 <udi_cdc_rx_start+0x94>)
  400476:	701a      	strb	r2, [r3, #0]
  400478:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40047c:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  40047e:	2000      	movs	r0, #0
  400480:	e01f      	b.n	4004c2 <udi_cdc_rx_start+0x8e>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  400482:	2100      	movs	r1, #0
  400484:	4a13      	ldr	r2, [pc, #76]	; (4004d4 <udi_cdc_rx_start+0xa0>)
  400486:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400488:	fab4 f284 	clz	r2, r4
  40048c:	0952      	lsrs	r2, r2, #5
  40048e:	490f      	ldr	r1, [pc, #60]	; (4004cc <udi_cdc_rx_start+0x98>)
  400490:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400492:	2101      	movs	r1, #1
  400494:	4a0e      	ldr	r2, [pc, #56]	; (4004d0 <udi_cdc_rx_start+0x9c>)
  400496:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400498:	b123      	cbz	r3, 4004a4 <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
  40049a:	4b0b      	ldr	r3, [pc, #44]	; (4004c8 <udi_cdc_rx_start+0x94>)
  40049c:	7019      	strb	r1, [r3, #0]
  40049e:	f3bf 8f5f 	dmb	sy
  4004a2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  4004a4:	2000      	movs	r0, #0
  4004a6:	4b0d      	ldr	r3, [pc, #52]	; (4004dc <udi_cdc_rx_start+0xa8>)
  4004a8:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  4004aa:	4b0d      	ldr	r3, [pc, #52]	; (4004e0 <udi_cdc_rx_start+0xac>)
  4004ac:	9300      	str	r3, [sp, #0]
  4004ae:	2002      	movs	r0, #2
  4004b0:	2101      	movs	r1, #1
  4004b2:	4a0c      	ldr	r2, [pc, #48]	; (4004e4 <udi_cdc_rx_start+0xb0>)
  4004b4:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004b8:	2340      	movs	r3, #64	; 0x40
  4004ba:	4c0b      	ldr	r4, [pc, #44]	; (4004e8 <udi_cdc_rx_start+0xb4>)
  4004bc:	47a0      	blx	r4
  4004be:	e000      	b.n	4004c2 <udi_cdc_rx_start+0x8e>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  4004c0:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  4004c2:	b002      	add	sp, #8
  4004c4:	bd10      	pop	{r4, pc}
  4004c6:	bf00      	nop
  4004c8:	200000a0 	.word	0x200000a0
  4004cc:	2000058c 	.word	0x2000058c
  4004d0:	20000620 	.word	0x20000620
  4004d4:	20000584 	.word	0x20000584
  4004d8:	2000057c 	.word	0x2000057c
  4004dc:	00400421 	.word	0x00400421
  4004e0:	0040057d 	.word	0x0040057d
  4004e4:	200005a0 	.word	0x200005a0
  4004e8:	00402831 	.word	0x00402831

004004ec <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  4004ec:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  4004ee:	2400      	movs	r4, #0
  4004f0:	4b15      	ldr	r3, [pc, #84]	; (400548 <udi_cdc_data_enable+0x5c>)
  4004f2:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  4004f4:	4b15      	ldr	r3, [pc, #84]	; (40054c <udi_cdc_data_enable+0x60>)
  4004f6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4004f8:	4b15      	ldr	r3, [pc, #84]	; (400550 <udi_cdc_data_enable+0x64>)
  4004fa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  4004fc:	4b15      	ldr	r3, [pc, #84]	; (400554 <udi_cdc_data_enable+0x68>)
  4004fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400500:	4b15      	ldr	r3, [pc, #84]	; (400558 <udi_cdc_data_enable+0x6c>)
  400502:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400504:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400506:	4b15      	ldr	r3, [pc, #84]	; (40055c <udi_cdc_data_enable+0x70>)
  400508:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40050a:	4620      	mov	r0, r4
  40050c:	4b14      	ldr	r3, [pc, #80]	; (400560 <udi_cdc_data_enable+0x74>)
  40050e:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400510:	4b14      	ldr	r3, [pc, #80]	; (400564 <udi_cdc_data_enable+0x78>)
  400512:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400514:	4b14      	ldr	r3, [pc, #80]	; (400568 <udi_cdc_data_enable+0x7c>)
  400516:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400518:	4b14      	ldr	r3, [pc, #80]	; (40056c <udi_cdc_data_enable+0x80>)
  40051a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  40051c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  40051e:	4b14      	ldr	r3, [pc, #80]	; (400570 <udi_cdc_data_enable+0x84>)
  400520:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400522:	4620      	mov	r0, r4
  400524:	4b13      	ldr	r3, [pc, #76]	; (400574 <udi_cdc_data_enable+0x88>)
  400526:	4798      	blx	r3
  400528:	4601      	mov	r1, r0
  40052a:	b158      	cbz	r0, 400544 <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  40052c:	4a06      	ldr	r2, [pc, #24]	; (400548 <udi_cdc_data_enable+0x5c>)
  40052e:	7813      	ldrb	r3, [r2, #0]
  400530:	3301      	adds	r3, #1
  400532:	b2db      	uxtb	r3, r3
  400534:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400536:	7813      	ldrb	r3, [r2, #0]
  400538:	b2db      	uxtb	r3, r3
  40053a:	2b01      	cmp	r3, #1
  40053c:	d102      	bne.n	400544 <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
  40053e:	2201      	movs	r2, #1
  400540:	4b0d      	ldr	r3, [pc, #52]	; (400578 <udi_cdc_data_enable+0x8c>)
  400542:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
  400544:	4608      	mov	r0, r1
  400546:	bd10      	pop	{r4, pc}
  400548:	200004f3 	.word	0x200004f3
  40054c:	20000590 	.word	0x20000590
  400550:	20000624 	.word	0x20000624
  400554:	200004f4 	.word	0x200004f4
  400558:	200004f8 	.word	0x200004f8
  40055c:	20000588 	.word	0x20000588
  400560:	00400225 	.word	0x00400225
  400564:	20000620 	.word	0x20000620
  400568:	2000058c 	.word	0x2000058c
  40056c:	2000057c 	.word	0x2000057c
  400570:	20000584 	.word	0x20000584
  400574:	00400435 	.word	0x00400435
  400578:	2000058a 	.word	0x2000058a

0040057c <udi_cdc_data_received>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  40057c:	b9f8      	cbnz	r0, 4005be <udi_cdc_data_received+0x42>
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40057e:	b510      	push	{r4, lr}
  400580:	b082      	sub	sp, #8

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400582:	4b0f      	ldr	r3, [pc, #60]	; (4005c0 <udi_cdc_data_received+0x44>)
  400584:	781b      	ldrb	r3, [r3, #0]
  400586:	f013 0fff 	tst.w	r3, #255	; 0xff
  40058a:	bf0c      	ite	eq
  40058c:	2301      	moveq	r3, #1
  40058e:	2300      	movne	r3, #0
	if (!n) {
  400590:	b951      	cbnz	r1, 4005a8 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  400592:	490c      	ldr	r1, [pc, #48]	; (4005c4 <udi_cdc_data_received+0x48>)
  400594:	9100      	str	r1, [sp, #0]
  400596:	4610      	mov	r0, r2
  400598:	2101      	movs	r1, #1
  40059a:	4a0b      	ldr	r2, [pc, #44]	; (4005c8 <udi_cdc_data_received+0x4c>)
  40059c:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  4005a0:	2340      	movs	r3, #64	; 0x40
  4005a2:	4c0a      	ldr	r4, [pc, #40]	; (4005cc <udi_cdc_data_received+0x50>)
  4005a4:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4005a6:	e008      	b.n	4005ba <udi_cdc_data_received+0x3e>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005a8:	b289      	uxth	r1, r1
  4005aa:	4a09      	ldr	r2, [pc, #36]	; (4005d0 <udi_cdc_data_received+0x54>)
  4005ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005b0:	2000      	movs	r0, #0
  4005b2:	4b08      	ldr	r3, [pc, #32]	; (4005d4 <udi_cdc_data_received+0x58>)
  4005b4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005b6:	4b08      	ldr	r3, [pc, #32]	; (4005d8 <udi_cdc_data_received+0x5c>)
  4005b8:	4798      	blx	r3
}
  4005ba:	b002      	add	sp, #8
  4005bc:	bd10      	pop	{r4, pc}
  4005be:	4770      	bx	lr
  4005c0:	2000058c 	.word	0x2000058c
  4005c4:	0040057d 	.word	0x0040057d
  4005c8:	200005a0 	.word	0x200005a0
  4005cc:	00402831 	.word	0x00402831
  4005d0:	2000057c 	.word	0x2000057c
  4005d4:	20000620 	.word	0x20000620
  4005d8:	00400435 	.word	0x00400435

004005dc <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
  4005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4005e0:	4b22      	ldr	r3, [pc, #136]	; (40066c <udi_cdc_multi_getc+0x90>)
  4005e2:	f893 8006 	ldrb.w	r8, [r3, #6]
  4005e6:	f1b8 0f09 	cmp.w	r8, #9
  4005ea:	bf14      	ite	ne
  4005ec:	f04f 0800 	movne.w	r8, #0
  4005f0:	f04f 0801 	moveq.w	r8, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  4005f4:	f04f 0a00 	mov.w	sl, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4005f8:	4c1d      	ldr	r4, [pc, #116]	; (400670 <udi_cdc_multi_getc+0x94>)
  4005fa:	46d1      	mov	r9, sl
  4005fc:	4657      	mov	r7, sl
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4005fe:	4d1d      	ldr	r5, [pc, #116]	; (400674 <udi_cdc_multi_getc+0x98>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400600:	4e1d      	ldr	r6, [pc, #116]	; (400678 <udi_cdc_multi_getc+0x9c>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400602:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400606:	b672      	cpsid	i
  400608:	f3bf 8f5f 	dmb	sy
  40060c:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  40060e:	882b      	ldrh	r3, [r5, #0]
  400610:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400612:	7832      	ldrb	r2, [r6, #0]
  400614:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  400616:	4919      	ldr	r1, [pc, #100]	; (40067c <udi_cdc_multi_getc+0xa0>)
  400618:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  40061c:	b289      	uxth	r1, r1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40061e:	b920      	cbnz	r0, 40062a <udi_cdc_multi_getc+0x4e>
		cpu_irq_enable();
  400620:	2001      	movs	r0, #1
  400622:	7020      	strb	r0, [r4, #0]
  400624:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400628:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
  40062a:	428b      	cmp	r3, r1
  40062c:	d307      	bcc.n	40063e <udi_cdc_multi_getc+0x62>
		if (!udi_cdc_data_running) {
  40062e:	4b14      	ldr	r3, [pc, #80]	; (400680 <udi_cdc_multi_getc+0xa4>)
  400630:	781b      	ldrb	r3, [r3, #0]
  400632:	f013 0fff 	tst.w	r3, #255	; 0xff
  400636:	d1e4      	bne.n	400602 <udi_cdc_multi_getc+0x26>
			return 0;
  400638:	2000      	movs	r0, #0
  40063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  40063e:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  400642:	4910      	ldr	r1, [pc, #64]	; (400684 <udi_cdc_multi_getc+0xa8>)
  400644:	5c88      	ldrb	r0, [r1, r2]
  400646:	ea4a 0a00 	orr.w	sl, sl, r0
	udi_cdc_rx_pos[port] = pos+1;
  40064a:	3301      	adds	r3, #1
  40064c:	b29b      	uxth	r3, r3
  40064e:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  400650:	4648      	mov	r0, r9
  400652:	4b0d      	ldr	r3, [pc, #52]	; (400688 <udi_cdc_multi_getc+0xac>)
  400654:	4798      	blx	r3

	if (b_databit_9) {
  400656:	f1b8 0f00 	cmp.w	r8, #0
  40065a:	d003      	beq.n	400664 <udi_cdc_multi_getc+0x88>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  40065c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  400660:	46c8      	mov	r8, r9
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  400662:	e7ce      	b.n	400602 <udi_cdc_multi_getc+0x26>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400664:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40066a:	bf00      	nop
  40066c:	200004ec 	.word	0x200004ec
  400670:	200000a0 	.word	0x200000a0
  400674:	20000584 	.word	0x20000584
  400678:	2000058c 	.word	0x2000058c
  40067c:	2000057c 	.word	0x2000057c
  400680:	2000058a 	.word	0x2000058a
  400684:	200005a0 	.word	0x200005a0
  400688:	00400435 	.word	0x00400435

0040068c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  40068c:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  40068e:	2000      	movs	r0, #0
  400690:	4b01      	ldr	r3, [pc, #4]	; (400698 <udi_cdc_getc+0xc>)
  400692:	4798      	blx	r3
}
  400694:	bd08      	pop	{r3, pc}
  400696:	bf00      	nop
  400698:	004005dd 	.word	0x004005dd

0040069c <udi_cdc_multi_get_free_tx_buffer>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40069c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4006a0:	b672      	cpsid	i
  4006a2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4006a6:	2100      	movs	r1, #0
  4006a8:	4b13      	ldr	r3, [pc, #76]	; (4006f8 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  4006aa:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4006ac:	4b13      	ldr	r3, [pc, #76]	; (4006fc <udi_cdc_multi_get_free_tx_buffer+0x60>)
  4006ae:	781b      	ldrb	r3, [r3, #0]
  4006b0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  4006b2:	4913      	ldr	r1, [pc, #76]	; (400700 <udi_cdc_multi_get_free_tx_buffer+0x64>)
  4006b4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  4006b8:	2840      	cmp	r0, #64	; 0x40
  4006ba:	d112      	bne.n	4006e2 <udi_cdc_multi_get_free_tx_buffer+0x46>
		if ((!udi_cdc_tx_trans_ongoing[port])
  4006bc:	4911      	ldr	r1, [pc, #68]	; (400704 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006be:	7809      	ldrb	r1, [r1, #0]
  4006c0:	f011 0fff 	tst.w	r1, #255	; 0xff
  4006c4:	d10d      	bne.n	4006e2 <udi_cdc_multi_get_free_tx_buffer+0x46>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  4006c6:	4910      	ldr	r1, [pc, #64]	; (400708 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4006c8:	7809      	ldrb	r1, [r1, #0]
  4006ca:	f011 0fff 	tst.w	r1, #255	; 0xff
  4006ce:	d108      	bne.n	4006e2 <udi_cdc_multi_get_free_tx_buffer+0x46>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  4006d0:	2001      	movs	r0, #1
  4006d2:	490d      	ldr	r1, [pc, #52]	; (400708 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4006d4:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  4006d6:	fab3 f383 	clz	r3, r3
  4006da:	095b      	lsrs	r3, r3, #5
  4006dc:	4907      	ldr	r1, [pc, #28]	; (4006fc <udi_cdc_multi_get_free_tx_buffer+0x60>)
  4006de:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  4006e0:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  4006e2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4006e6:	b92a      	cbnz	r2, 4006f4 <udi_cdc_multi_get_free_tx_buffer+0x58>
		cpu_irq_enable();
  4006e8:	2201      	movs	r2, #1
  4006ea:	4b03      	ldr	r3, [pc, #12]	; (4006f8 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  4006ec:	701a      	strb	r2, [r3, #0]
  4006ee:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4006f2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	200000a0 	.word	0x200000a0
  4006fc:	200004f4 	.word	0x200004f4
  400700:	200004f8 	.word	0x200004f8
  400704:	20000590 	.word	0x20000590
  400708:	20000624 	.word	0x20000624

0040070c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  40070c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  40070e:	4b03      	ldr	r3, [pc, #12]	; (40071c <udi_cdc_multi_is_tx_ready+0x10>)
  400710:	4798      	blx	r3
}
  400712:	3000      	adds	r0, #0
  400714:	bf18      	it	ne
  400716:	2001      	movne	r0, #1
  400718:	bd08      	pop	{r3, pc}
  40071a:	bf00      	nop
  40071c:	0040069d 	.word	0x0040069d

00400720 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400724:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400726:	4b1b      	ldr	r3, [pc, #108]	; (400794 <udi_cdc_multi_putc+0x74>)
  400728:	799d      	ldrb	r5, [r3, #6]
  40072a:	2d09      	cmp	r5, #9
  40072c:	bf14      	ite	ne
  40072e:	2500      	movne	r5, #0
  400730:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400732:	4e19      	ldr	r6, [pc, #100]	; (400798 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400734:	4f19      	ldr	r7, [pc, #100]	; (40079c <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400736:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4007ac <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  40073a:	2000      	movs	r0, #0
  40073c:	47b0      	blx	r6
  40073e:	b930      	cbnz	r0, 40074e <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  400740:	4b17      	ldr	r3, [pc, #92]	; (4007a0 <udi_cdc_multi_putc+0x80>)
  400742:	781b      	ldrb	r3, [r3, #0]
  400744:	f013 0fff 	tst.w	r3, #255	; 0xff
  400748:	d1f7      	bne.n	40073a <udi_cdc_multi_putc+0x1a>
  40074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40074e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400752:	b672      	cpsid	i
  400754:	f3bf 8f5f 	dmb	sy
  400758:	2300      	movs	r3, #0
  40075a:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  40075c:	f898 3000 	ldrb.w	r3, [r8]
  400760:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400762:	4810      	ldr	r0, [pc, #64]	; (4007a4 <udi_cdc_multi_putc+0x84>)
  400764:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  400768:	f102 0e01 	add.w	lr, r2, #1
  40076c:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
  400770:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400774:	4a0c      	ldr	r2, [pc, #48]	; (4007a8 <udi_cdc_multi_putc+0x88>)
  400776:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400778:	b921      	cbnz	r1, 400784 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  40077a:	2301      	movs	r3, #1
  40077c:	703b      	strb	r3, [r7, #0]
  40077e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400782:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400784:	b115      	cbz	r5, 40078c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400786:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  400788:	2500      	movs	r5, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  40078a:	e7d6      	b.n	40073a <udi_cdc_multi_putc+0x1a>
	}
	return true;
  40078c:	2001      	movs	r0, #1
}
  40078e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400792:	bf00      	nop
  400794:	200004ec 	.word	0x200004ec
  400798:	0040070d 	.word	0x0040070d
  40079c:	200000a0 	.word	0x200000a0
  4007a0:	2000058a 	.word	0x2000058a
  4007a4:	200004f8 	.word	0x200004f8
  4007a8:	200004fc 	.word	0x200004fc
  4007ac:	200004f4 	.word	0x200004f4

004007b0 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  4007b0:	b508      	push	{r3, lr}
  4007b2:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  4007b4:	2000      	movs	r0, #0
  4007b6:	4b01      	ldr	r3, [pc, #4]	; (4007bc <udi_cdc_putc+0xc>)
  4007b8:	4798      	blx	r3
}
  4007ba:	bd08      	pop	{r3, pc}
  4007bc:	00400721 	.word	0x00400721

004007c0 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4007c0:	4b0f      	ldr	r3, [pc, #60]	; (400800 <udc_next_desc_in_iface+0x40>)
  4007c2:	681b      	ldr	r3, [r3, #0]
  4007c4:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4007c6:	8853      	ldrh	r3, [r2, #2]
  4007c8:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4007ca:	7803      	ldrb	r3, [r0, #0]
  4007cc:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4007ce:	4290      	cmp	r0, r2
  4007d0:	d210      	bcs.n	4007f4 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4007d2:	7843      	ldrb	r3, [r0, #1]
  4007d4:	2b04      	cmp	r3, #4
  4007d6:	d00f      	beq.n	4007f8 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4007d8:	428b      	cmp	r3, r1
  4007da:	d105      	bne.n	4007e8 <udc_next_desc_in_iface+0x28>
  4007dc:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4007de:	7843      	ldrb	r3, [r0, #1]
  4007e0:	2b04      	cmp	r3, #4
  4007e2:	d00b      	beq.n	4007fc <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4007e4:	428b      	cmp	r3, r1
  4007e6:	d00a      	beq.n	4007fe <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4007e8:	7803      	ldrb	r3, [r0, #0]
  4007ea:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4007ec:	4290      	cmp	r0, r2
  4007ee:	d3f6      	bcc.n	4007de <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  4007f0:	2000      	movs	r0, #0
  4007f2:	4770      	bx	lr
  4007f4:	2000      	movs	r0, #0
  4007f6:	4770      	bx	lr
  4007f8:	2000      	movs	r0, #0
  4007fa:	4770      	bx	lr
  4007fc:	2000      	movs	r0, #0
}
  4007fe:	4770      	bx	lr
  400800:	2000062c 	.word	0x2000062c

00400804 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400804:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400806:	4b03      	ldr	r3, [pc, #12]	; (400814 <udc_valid_address+0x10>)
  400808:	7898      	ldrb	r0, [r3, #2]
  40080a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40080e:	4b02      	ldr	r3, [pc, #8]	; (400818 <udc_valid_address+0x14>)
  400810:	4798      	blx	r3
  400812:	bd08      	pop	{r3, pc}
  400814:	20000708 	.word	0x20000708
  400818:	00402431 	.word	0x00402431

0040081c <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  40081c:	4b16      	ldr	r3, [pc, #88]	; (400878 <udc_update_iface_desc+0x5c>)
  40081e:	781b      	ldrb	r3, [r3, #0]
  400820:	b30b      	cbz	r3, 400866 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400822:	4b16      	ldr	r3, [pc, #88]	; (40087c <udc_update_iface_desc+0x60>)
  400824:	681b      	ldr	r3, [r3, #0]
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	791a      	ldrb	r2, [r3, #4]
  40082a:	4282      	cmp	r2, r0
  40082c:	d91d      	bls.n	40086a <udc_update_iface_desc+0x4e>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  40082e:	b410      	push	{r4}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400830:	4a13      	ldr	r2, [pc, #76]	; (400880 <udc_update_iface_desc+0x64>)
  400832:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400834:	885c      	ldrh	r4, [r3, #2]
  400836:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400838:	42a3      	cmp	r3, r4
  40083a:	d218      	bcs.n	40086e <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  40083c:	785a      	ldrb	r2, [r3, #1]
  40083e:	2a04      	cmp	r2, #4
  400840:	d109      	bne.n	400856 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400842:	789a      	ldrb	r2, [r3, #2]
  400844:	4282      	cmp	r2, r0
  400846:	d106      	bne.n	400856 <udc_update_iface_desc+0x3a>
  400848:	78da      	ldrb	r2, [r3, #3]
  40084a:	428a      	cmp	r2, r1
  40084c:	d103      	bne.n	400856 <udc_update_iface_desc+0x3a>
  40084e:	4a0c      	ldr	r2, [pc, #48]	; (400880 <udc_update_iface_desc+0x64>)
  400850:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  400852:	2001      	movs	r0, #1
  400854:	e00c      	b.n	400870 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400856:	781a      	ldrb	r2, [r3, #0]
  400858:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  40085a:	42a3      	cmp	r3, r4
  40085c:	d3ee      	bcc.n	40083c <udc_update_iface_desc+0x20>
  40085e:	4a08      	ldr	r2, [pc, #32]	; (400880 <udc_update_iface_desc+0x64>)
  400860:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400862:	2000      	movs	r0, #0
  400864:	e004      	b.n	400870 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400866:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
  400868:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  40086a:	2000      	movs	r0, #0
  40086c:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  40086e:	2000      	movs	r0, #0
}
  400870:	f85d 4b04 	ldr.w	r4, [sp], #4
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	20000638 	.word	0x20000638
  40087c:	2000062c 	.word	0x2000062c
  400880:	2000063c 	.word	0x2000063c

00400884 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400888:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40088a:	2100      	movs	r1, #0
  40088c:	4b12      	ldr	r3, [pc, #72]	; (4008d8 <udc_iface_disable+0x54>)
  40088e:	4798      	blx	r3
  400890:	4680      	mov	r8, r0
  400892:	b1e8      	cbz	r0, 4008d0 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400894:	4b11      	ldr	r3, [pc, #68]	; (4008dc <udc_iface_disable+0x58>)
  400896:	681b      	ldr	r3, [r3, #0]
  400898:	685b      	ldr	r3, [r3, #4]
  40089a:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40089e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4008a2:	4798      	blx	r3
  4008a4:	4601      	mov	r1, r0
  4008a6:	4620      	mov	r0, r4
  4008a8:	4b0b      	ldr	r3, [pc, #44]	; (4008d8 <udc_iface_disable+0x54>)
  4008aa:	4798      	blx	r3
  4008ac:	4680      	mov	r8, r0
  4008ae:	b178      	cbz	r0, 4008d0 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4008b0:	4b0b      	ldr	r3, [pc, #44]	; (4008e0 <udc_iface_disable+0x5c>)
  4008b2:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4008b4:	2605      	movs	r6, #5
  4008b6:	4d0b      	ldr	r5, [pc, #44]	; (4008e4 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4008b8:	4f0b      	ldr	r7, [pc, #44]	; (4008e8 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4008ba:	4620      	mov	r0, r4
  4008bc:	4631      	mov	r1, r6
  4008be:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  4008c0:	4604      	mov	r4, r0
  4008c2:	b110      	cbz	r0, 4008ca <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4008c4:	7880      	ldrb	r0, [r0, #2]
  4008c6:	47b8      	blx	r7
		}
  4008c8:	e7f7      	b.n	4008ba <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  4008ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4008ce:	4798      	blx	r3
	return true;
}
  4008d0:	4640      	mov	r0, r8
  4008d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008d6:	bf00      	nop
  4008d8:	0040081d 	.word	0x0040081d
  4008dc:	2000062c 	.word	0x2000062c
  4008e0:	2000063c 	.word	0x2000063c
  4008e4:	004007c1 	.word	0x004007c1
  4008e8:	004025ad 	.word	0x004025ad

004008ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4008ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008f0:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4008f2:	4b10      	ldr	r3, [pc, #64]	; (400934 <udc_iface_enable+0x48>)
  4008f4:	4798      	blx	r3
  4008f6:	4603      	mov	r3, r0
  4008f8:	b1c8      	cbz	r0, 40092e <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4008fa:	4b0f      	ldr	r3, [pc, #60]	; (400938 <udc_iface_enable+0x4c>)
  4008fc:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4008fe:	2605      	movs	r6, #5
  400900:	4d0e      	ldr	r5, [pc, #56]	; (40093c <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400902:	4f0f      	ldr	r7, [pc, #60]	; (400940 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400904:	4620      	mov	r0, r4
  400906:	4631      	mov	r1, r6
  400908:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  40090a:	4604      	mov	r4, r0
  40090c:	b138      	cbz	r0, 40091e <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40090e:	7880      	ldrb	r0, [r0, #2]
  400910:	78e1      	ldrb	r1, [r4, #3]
  400912:	88a2      	ldrh	r2, [r4, #4]
  400914:	47b8      	blx	r7
  400916:	4603      	mov	r3, r0
  400918:	2800      	cmp	r0, #0
  40091a:	d1f3      	bne.n	400904 <udc_iface_enable+0x18>
  40091c:	e007      	b.n	40092e <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40091e:	4b09      	ldr	r3, [pc, #36]	; (400944 <udc_iface_enable+0x58>)
  400920:	681b      	ldr	r3, [r3, #0]
  400922:	685b      	ldr	r3, [r3, #4]
  400924:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400928:	681b      	ldr	r3, [r3, #0]
  40092a:	4798      	blx	r3
  40092c:	4603      	mov	r3, r0
}
  40092e:	4618      	mov	r0, r3
  400930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400934:	0040081d 	.word	0x0040081d
  400938:	2000063c 	.word	0x2000063c
  40093c:	004007c1 	.word	0x004007c1
  400940:	004024a5 	.word	0x004024a5
  400944:	2000062c 	.word	0x2000062c

00400948 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  400948:	b508      	push	{r3, lr}
	udd_enable();
  40094a:	4b01      	ldr	r3, [pc, #4]	; (400950 <udc_start+0x8>)
  40094c:	4798      	blx	r3
  40094e:	bd08      	pop	{r3, pc}
  400950:	00402369 	.word	0x00402369

00400954 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  400954:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400956:	4b0d      	ldr	r3, [pc, #52]	; (40098c <udc_reset+0x38>)
  400958:	781b      	ldrb	r3, [r3, #0]
  40095a:	b183      	cbz	r3, 40097e <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40095c:	4b0c      	ldr	r3, [pc, #48]	; (400990 <udc_reset+0x3c>)
  40095e:	681b      	ldr	r3, [r3, #0]
  400960:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400962:	791b      	ldrb	r3, [r3, #4]
  400964:	b15b      	cbz	r3, 40097e <udc_reset+0x2a>
  400966:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400968:	4e0a      	ldr	r6, [pc, #40]	; (400994 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40096a:	4d09      	ldr	r5, [pc, #36]	; (400990 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  40096c:	4620      	mov	r0, r4
  40096e:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400970:	3401      	adds	r4, #1
  400972:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400974:	682b      	ldr	r3, [r5, #0]
  400976:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400978:	791b      	ldrb	r3, [r3, #4]
  40097a:	42a3      	cmp	r3, r4
  40097c:	d8f6      	bhi.n	40096c <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  40097e:	2200      	movs	r2, #0
  400980:	4b02      	ldr	r3, [pc, #8]	; (40098c <udc_reset+0x38>)
  400982:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  400984:	2201      	movs	r2, #1
  400986:	4b04      	ldr	r3, [pc, #16]	; (400998 <udc_reset+0x44>)
  400988:	801a      	strh	r2, [r3, #0]
  40098a:	bd70      	pop	{r4, r5, r6, pc}
  40098c:	20000638 	.word	0x20000638
  400990:	2000062c 	.word	0x2000062c
  400994:	00400885 	.word	0x00400885
  400998:	20000636 	.word	0x20000636

0040099c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  40099c:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  40099e:	4b0c      	ldr	r3, [pc, #48]	; (4009d0 <udc_sof_notify+0x34>)
  4009a0:	781b      	ldrb	r3, [r3, #0]
  4009a2:	b19b      	cbz	r3, 4009cc <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009a4:	4b0b      	ldr	r3, [pc, #44]	; (4009d4 <udc_sof_notify+0x38>)
  4009a6:	681b      	ldr	r3, [r3, #0]
  4009a8:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4009aa:	7912      	ldrb	r2, [r2, #4]
  4009ac:	b172      	cbz	r2, 4009cc <udc_sof_notify+0x30>
  4009ae:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009b0:	4d08      	ldr	r5, [pc, #32]	; (4009d4 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4009b2:	685b      	ldr	r3, [r3, #4]
  4009b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4009b8:	691b      	ldr	r3, [r3, #16]
  4009ba:	b103      	cbz	r3, 4009be <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4009bc:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4009be:	3401      	adds	r4, #1
  4009c0:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009c2:	682b      	ldr	r3, [r5, #0]
  4009c4:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4009c6:	7912      	ldrb	r2, [r2, #4]
  4009c8:	42a2      	cmp	r2, r4
  4009ca:	d8f2      	bhi.n	4009b2 <udc_sof_notify+0x16>
  4009cc:	bd38      	pop	{r3, r4, r5, pc}
  4009ce:	bf00      	nop
  4009d0:	20000638 	.word	0x20000638
  4009d4:	2000062c 	.word	0x2000062c

004009d8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4009da:	4b90      	ldr	r3, [pc, #576]	; (400c1c <udc_process_setup+0x244>)
  4009dc:	2200      	movs	r2, #0
  4009de:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4009e0:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4009e2:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4009e4:	781b      	ldrb	r3, [r3, #0]
  4009e6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4009ea:	f000 81d2 	beq.w	400d92 <udc_process_setup+0x3ba>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4009ee:	4a8b      	ldr	r2, [pc, #556]	; (400c1c <udc_process_setup+0x244>)
  4009f0:	88d2      	ldrh	r2, [r2, #6]
  4009f2:	2a00      	cmp	r2, #0
  4009f4:	f040 81d1 	bne.w	400d9a <udc_process_setup+0x3c2>
  4009f8:	e1c7      	b.n	400d8a <udc_process_setup+0x3b2>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4009fa:	f013 031f 	ands.w	r3, r3, #31
  4009fe:	d165      	bne.n	400acc <udc_process_setup+0xf4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400a00:	4986      	ldr	r1, [pc, #536]	; (400c1c <udc_process_setup+0x244>)
  400a02:	7849      	ldrb	r1, [r1, #1]
  400a04:	2906      	cmp	r1, #6
  400a06:	d00b      	beq.n	400a20 <udc_process_setup+0x48>
  400a08:	2908      	cmp	r1, #8
  400a0a:	d057      	beq.n	400abc <udc_process_setup+0xe4>
  400a0c:	2900      	cmp	r1, #0
  400a0e:	d15d      	bne.n	400acc <udc_process_setup+0xf4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400a10:	2a02      	cmp	r2, #2
  400a12:	f040 816a 	bne.w	400cea <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400a16:	4882      	ldr	r0, [pc, #520]	; (400c20 <udc_process_setup+0x248>)
  400a18:	2102      	movs	r1, #2
  400a1a:	4b82      	ldr	r3, [pc, #520]	; (400c24 <udc_process_setup+0x24c>)
  400a1c:	4798      	blx	r3
  400a1e:	e1c0      	b.n	400da2 <udc_process_setup+0x3ca>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400a20:	4b7e      	ldr	r3, [pc, #504]	; (400c1c <udc_process_setup+0x244>)
  400a22:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400a24:	0a13      	lsrs	r3, r2, #8
  400a26:	3b01      	subs	r3, #1
  400a28:	2b0e      	cmp	r3, #14
  400a2a:	f200 8155 	bhi.w	400cd8 <udc_process_setup+0x300>
  400a2e:	e8df f013 	tbh	[pc, r3, lsl #1]
  400a32:	000f      	.short	0x000f
  400a34:	00340016 	.word	0x00340016
  400a38:	01530153 	.word	0x01530153
  400a3c:	01530153 	.word	0x01530153
  400a40:	01530153 	.word	0x01530153
  400a44:	01530153 	.word	0x01530153
  400a48:	01530153 	.word	0x01530153
  400a4c:	002a0153 	.word	0x002a0153
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  400a50:	4b75      	ldr	r3, [pc, #468]	; (400c28 <udc_process_setup+0x250>)
  400a52:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  400a54:	4618      	mov	r0, r3
  400a56:	7819      	ldrb	r1, [r3, #0]
  400a58:	4b72      	ldr	r3, [pc, #456]	; (400c24 <udc_process_setup+0x24c>)
  400a5a:	4798      	blx	r3
  400a5c:	e025      	b.n	400aaa <udc_process_setup+0xd2>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400a5e:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  400a60:	4b71      	ldr	r3, [pc, #452]	; (400c28 <udc_process_setup+0x250>)
  400a62:	681b      	ldr	r3, [r3, #0]
  400a64:	7c5b      	ldrb	r3, [r3, #17]
  400a66:	4293      	cmp	r3, r2
  400a68:	f240 813f 	bls.w	400cea <udc_process_setup+0x312>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  400a6c:	4b6e      	ldr	r3, [pc, #440]	; (400c28 <udc_process_setup+0x250>)
  400a6e:	685b      	ldr	r3, [r3, #4]
  400a70:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  400a74:	4618      	mov	r0, r3
  400a76:	8859      	ldrh	r1, [r3, #2]
  400a78:	4b6a      	ldr	r3, [pc, #424]	; (400c24 <udc_process_setup+0x24c>)
  400a7a:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400a7c:	4b67      	ldr	r3, [pc, #412]	; (400c1c <udc_process_setup+0x244>)
  400a7e:	689b      	ldr	r3, [r3, #8]
  400a80:	2202      	movs	r2, #2
  400a82:	705a      	strb	r2, [r3, #1]
  400a84:	e011      	b.n	400aaa <udc_process_setup+0xd2>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  400a86:	4b68      	ldr	r3, [pc, #416]	; (400c28 <udc_process_setup+0x250>)
  400a88:	689b      	ldr	r3, [r3, #8]
  400a8a:	2b00      	cmp	r3, #0
  400a8c:	f000 812d 	beq.w	400cea <udc_process_setup+0x312>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400a90:	4618      	mov	r0, r3
  400a92:	8859      	ldrh	r1, [r3, #2]
  400a94:	4b63      	ldr	r3, [pc, #396]	; (400c24 <udc_process_setup+0x24c>)
  400a96:	4798      	blx	r3
  400a98:	e007      	b.n	400aaa <udc_process_setup+0xd2>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400a9a:	f012 0fff 	tst.w	r2, #255	; 0xff
  400a9e:	f040 8124 	bne.w	400cea <udc_process_setup+0x312>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400aa2:	4862      	ldr	r0, [pc, #392]	; (400c2c <udc_process_setup+0x254>)
  400aa4:	2104      	movs	r1, #4
  400aa6:	4b5f      	ldr	r3, [pc, #380]	; (400c24 <udc_process_setup+0x24c>)
  400aa8:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400aaa:	4b5c      	ldr	r3, [pc, #368]	; (400c1c <udc_process_setup+0x244>)
  400aac:	88da      	ldrh	r2, [r3, #6]
  400aae:	899b      	ldrh	r3, [r3, #12]
  400ab0:	4293      	cmp	r3, r2
  400ab2:	f240 8176 	bls.w	400da2 <udc_process_setup+0x3ca>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400ab6:	4b59      	ldr	r3, [pc, #356]	; (400c1c <udc_process_setup+0x244>)
  400ab8:	819a      	strh	r2, [r3, #12]
  400aba:	e172      	b.n	400da2 <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  400abc:	2a01      	cmp	r2, #1
  400abe:	f040 8114 	bne.w	400cea <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  400ac2:	485b      	ldr	r0, [pc, #364]	; (400c30 <udc_process_setup+0x258>)
  400ac4:	2101      	movs	r1, #1
  400ac6:	4b57      	ldr	r3, [pc, #348]	; (400c24 <udc_process_setup+0x24c>)
  400ac8:	4798      	blx	r3
  400aca:	e16a      	b.n	400da2 <udc_process_setup+0x3ca>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400acc:	2b01      	cmp	r3, #1
  400ace:	d127      	bne.n	400b20 <udc_process_setup+0x148>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400ad0:	4952      	ldr	r1, [pc, #328]	; (400c1c <udc_process_setup+0x244>)
  400ad2:	7849      	ldrb	r1, [r1, #1]
  400ad4:	290a      	cmp	r1, #10
  400ad6:	d123      	bne.n	400b20 <udc_process_setup+0x148>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  400ad8:	2a01      	cmp	r2, #1
  400ada:	f040 8106 	bne.w	400cea <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400ade:	4b54      	ldr	r3, [pc, #336]	; (400c30 <udc_process_setup+0x258>)
  400ae0:	781b      	ldrb	r3, [r3, #0]
  400ae2:	2b00      	cmp	r3, #0
  400ae4:	f000 8101 	beq.w	400cea <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400ae8:	4b4c      	ldr	r3, [pc, #304]	; (400c1c <udc_process_setup+0x244>)
  400aea:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400aec:	4b51      	ldr	r3, [pc, #324]	; (400c34 <udc_process_setup+0x25c>)
  400aee:	681d      	ldr	r5, [r3, #0]
  400af0:	682b      	ldr	r3, [r5, #0]
  400af2:	791b      	ldrb	r3, [r3, #4]
  400af4:	42a3      	cmp	r3, r4
  400af6:	f240 80f8 	bls.w	400cea <udc_process_setup+0x312>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400afa:	4620      	mov	r0, r4
  400afc:	2100      	movs	r1, #0
  400afe:	4b4e      	ldr	r3, [pc, #312]	; (400c38 <udc_process_setup+0x260>)
  400b00:	4798      	blx	r3
  400b02:	2800      	cmp	r0, #0
  400b04:	f000 80f1 	beq.w	400cea <udc_process_setup+0x312>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b08:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400b0a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400b0e:	68db      	ldr	r3, [r3, #12]
  400b10:	4798      	blx	r3
  400b12:	4b4a      	ldr	r3, [pc, #296]	; (400c3c <udc_process_setup+0x264>)
  400b14:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  400b16:	4618      	mov	r0, r3
  400b18:	2101      	movs	r1, #1
  400b1a:	4b42      	ldr	r3, [pc, #264]	; (400c24 <udc_process_setup+0x24c>)
  400b1c:	4798      	blx	r3
  400b1e:	e140      	b.n	400da2 <udc_process_setup+0x3ca>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400b20:	2b02      	cmp	r3, #2
  400b22:	f040 80e2 	bne.w	400cea <udc_process_setup+0x312>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400b26:	4b3d      	ldr	r3, [pc, #244]	; (400c1c <udc_process_setup+0x244>)
  400b28:	785b      	ldrb	r3, [r3, #1]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	f040 80d6 	bne.w	400cdc <udc_process_setup+0x304>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400b30:	2a02      	cmp	r2, #2
  400b32:	f040 80da 	bne.w	400cea <udc_process_setup+0x312>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400b36:	4b39      	ldr	r3, [pc, #228]	; (400c1c <udc_process_setup+0x244>)
  400b38:	7918      	ldrb	r0, [r3, #4]
  400b3a:	4b41      	ldr	r3, [pc, #260]	; (400c40 <udc_process_setup+0x268>)
  400b3c:	4798      	blx	r3
  400b3e:	4b41      	ldr	r3, [pc, #260]	; (400c44 <udc_process_setup+0x26c>)
  400b40:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400b42:	4618      	mov	r0, r3
  400b44:	2102      	movs	r1, #2
  400b46:	4b37      	ldr	r3, [pc, #220]	; (400c24 <udc_process_setup+0x24c>)
  400b48:	4798      	blx	r3
  400b4a:	e12a      	b.n	400da2 <udc_process_setup+0x3ca>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400b4c:	f013 031f 	ands.w	r3, r3, #31
  400b50:	f040 8082 	bne.w	400c58 <udc_process_setup+0x280>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400b54:	4a31      	ldr	r2, [pc, #196]	; (400c1c <udc_process_setup+0x244>)
  400b56:	7852      	ldrb	r2, [r2, #1]
  400b58:	3a01      	subs	r2, #1
  400b5a:	2a08      	cmp	r2, #8
  400b5c:	d87c      	bhi.n	400c58 <udc_process_setup+0x280>
  400b5e:	e8df f012 	tbh	[pc, r2, lsl #1]
  400b62:	0012      	.short	0x0012
  400b64:	00bf007b 	.word	0x00bf007b
  400b68:	0009007b 	.word	0x0009007b
  400b6c:	007b007b 	.word	0x007b007b
  400b70:	0022007b 	.word	0x0022007b
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400b74:	4b29      	ldr	r3, [pc, #164]	; (400c1c <udc_process_setup+0x244>)
  400b76:	88db      	ldrh	r3, [r3, #6]
  400b78:	2b00      	cmp	r3, #0
  400b7a:	f040 80b6 	bne.w	400cea <udc_process_setup+0x312>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  400b7e:	4a32      	ldr	r2, [pc, #200]	; (400c48 <udc_process_setup+0x270>)
  400b80:	4b26      	ldr	r3, [pc, #152]	; (400c1c <udc_process_setup+0x244>)
  400b82:	611a      	str	r2, [r3, #16]
  400b84:	e10d      	b.n	400da2 <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400b86:	4b25      	ldr	r3, [pc, #148]	; (400c1c <udc_process_setup+0x244>)
  400b88:	88db      	ldrh	r3, [r3, #6]
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	f040 80ad 	bne.w	400cea <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400b90:	4b22      	ldr	r3, [pc, #136]	; (400c1c <udc_process_setup+0x244>)
  400b92:	885b      	ldrh	r3, [r3, #2]
  400b94:	2b01      	cmp	r3, #1
  400b96:	f040 80a8 	bne.w	400cea <udc_process_setup+0x312>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400b9a:	4a21      	ldr	r2, [pc, #132]	; (400c20 <udc_process_setup+0x248>)
  400b9c:	8813      	ldrh	r3, [r2, #0]
  400b9e:	f023 0302 	bic.w	r3, r3, #2
  400ba2:	8013      	strh	r3, [r2, #0]
  400ba4:	e0fd      	b.n	400da2 <udc_process_setup+0x3ca>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  400ba6:	4b1d      	ldr	r3, [pc, #116]	; (400c1c <udc_process_setup+0x244>)
  400ba8:	88db      	ldrh	r3, [r3, #6]
  400baa:	2b00      	cmp	r3, #0
  400bac:	f040 809d 	bne.w	400cea <udc_process_setup+0x312>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  400bb0:	4b26      	ldr	r3, [pc, #152]	; (400c4c <udc_process_setup+0x274>)
  400bb2:	4798      	blx	r3
  400bb4:	2800      	cmp	r0, #0
  400bb6:	f000 8098 	beq.w	400cea <udc_process_setup+0x312>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400bba:	4b18      	ldr	r3, [pc, #96]	; (400c1c <udc_process_setup+0x244>)
  400bbc:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400bbe:	4b1a      	ldr	r3, [pc, #104]	; (400c28 <udc_process_setup+0x250>)
  400bc0:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400bc2:	7c5b      	ldrb	r3, [r3, #17]
  400bc4:	429a      	cmp	r2, r3
  400bc6:	f300 8090 	bgt.w	400cea <udc_process_setup+0x312>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  400bca:	4b21      	ldr	r3, [pc, #132]	; (400c50 <udc_process_setup+0x278>)
  400bcc:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400bce:	4b13      	ldr	r3, [pc, #76]	; (400c1c <udc_process_setup+0x244>)
  400bd0:	789b      	ldrb	r3, [r3, #2]
  400bd2:	4a17      	ldr	r2, [pc, #92]	; (400c30 <udc_process_setup+0x258>)
  400bd4:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	f000 80e3 	beq.w	400da2 <udc_process_setup+0x3ca>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400bdc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400be0:	3b01      	subs	r3, #1
  400be2:	4a11      	ldr	r2, [pc, #68]	; (400c28 <udc_process_setup+0x250>)
  400be4:	6852      	ldr	r2, [r2, #4]
  400be6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400bea:	4912      	ldr	r1, [pc, #72]	; (400c34 <udc_process_setup+0x25c>)
  400bec:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400bf2:	791b      	ldrb	r3, [r3, #4]
  400bf4:	2b00      	cmp	r3, #0
  400bf6:	f000 80d4 	beq.w	400da2 <udc_process_setup+0x3ca>
  400bfa:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400bfc:	4626      	mov	r6, r4
  400bfe:	4d15      	ldr	r5, [pc, #84]	; (400c54 <udc_process_setup+0x27c>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c00:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400c02:	4620      	mov	r0, r4
  400c04:	4631      	mov	r1, r6
  400c06:	47a8      	blx	r5
  400c08:	2800      	cmp	r0, #0
  400c0a:	d06e      	beq.n	400cea <udc_process_setup+0x312>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400c0c:	3401      	adds	r4, #1
  400c0e:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c10:	683b      	ldr	r3, [r7, #0]
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	791b      	ldrb	r3, [r3, #4]
  400c16:	42a3      	cmp	r3, r4
  400c18:	d8f3      	bhi.n	400c02 <udc_process_setup+0x22a>
  400c1a:	e0c2      	b.n	400da2 <udc_process_setup+0x3ca>
  400c1c:	20000708 	.word	0x20000708
  400c20:	20000636 	.word	0x20000636
  400c24:	00402499 	.word	0x00402499
  400c28:	20000028 	.word	0x20000028
  400c2c:	2000009c 	.word	0x2000009c
  400c30:	20000638 	.word	0x20000638
  400c34:	2000062c 	.word	0x2000062c
  400c38:	0040081d 	.word	0x0040081d
  400c3c:	20000634 	.word	0x20000634
  400c40:	00402615 	.word	0x00402615
  400c44:	20000630 	.word	0x20000630
  400c48:	00400805 	.word	0x00400805
  400c4c:	00402469 	.word	0x00402469
  400c50:	00400955 	.word	0x00400955
  400c54:	004008ed 	.word	0x004008ed
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400c58:	2b01      	cmp	r3, #1
  400c5a:	d119      	bne.n	400c90 <udc_process_setup+0x2b8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400c5c:	4a52      	ldr	r2, [pc, #328]	; (400da8 <udc_process_setup+0x3d0>)
  400c5e:	7852      	ldrb	r2, [r2, #1]
  400c60:	2a0b      	cmp	r2, #11
  400c62:	d115      	bne.n	400c90 <udc_process_setup+0x2b8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  400c64:	4b50      	ldr	r3, [pc, #320]	; (400da8 <udc_process_setup+0x3d0>)
  400c66:	88db      	ldrh	r3, [r3, #6]
  400c68:	2b00      	cmp	r3, #0
  400c6a:	d13e      	bne.n	400cea <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400c6c:	4b4f      	ldr	r3, [pc, #316]	; (400dac <udc_process_setup+0x3d4>)
  400c6e:	781b      	ldrb	r3, [r3, #0]
  400c70:	2b00      	cmp	r3, #0
  400c72:	d03a      	beq.n	400cea <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400c74:	4b4c      	ldr	r3, [pc, #304]	; (400da8 <udc_process_setup+0x3d0>)
  400c76:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400c78:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  400c7a:	4620      	mov	r0, r4
  400c7c:	4b4c      	ldr	r3, [pc, #304]	; (400db0 <udc_process_setup+0x3d8>)
  400c7e:	4798      	blx	r3
  400c80:	2800      	cmp	r0, #0
  400c82:	d032      	beq.n	400cea <udc_process_setup+0x312>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  400c84:	4620      	mov	r0, r4
  400c86:	b2e9      	uxtb	r1, r5
  400c88:	4b4a      	ldr	r3, [pc, #296]	; (400db4 <udc_process_setup+0x3dc>)
  400c8a:	4798      	blx	r3
  400c8c:	4603      	mov	r3, r0
  400c8e:	e02a      	b.n	400ce6 <udc_process_setup+0x30e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400c90:	2b02      	cmp	r3, #2
  400c92:	d12a      	bne.n	400cea <udc_process_setup+0x312>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400c94:	4b44      	ldr	r3, [pc, #272]	; (400da8 <udc_process_setup+0x3d0>)
  400c96:	785b      	ldrb	r3, [r3, #1]
  400c98:	2b01      	cmp	r3, #1
  400c9a:	d002      	beq.n	400ca2 <udc_process_setup+0x2ca>
  400c9c:	2b03      	cmp	r3, #3
  400c9e:	d00c      	beq.n	400cba <udc_process_setup+0x2e2>
  400ca0:	e020      	b.n	400ce4 <udc_process_setup+0x30c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400ca2:	4b41      	ldr	r3, [pc, #260]	; (400da8 <udc_process_setup+0x3d0>)
  400ca4:	88db      	ldrh	r3, [r3, #6]
  400ca6:	bb03      	cbnz	r3, 400cea <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400ca8:	4b3f      	ldr	r3, [pc, #252]	; (400da8 <udc_process_setup+0x3d0>)
  400caa:	885b      	ldrh	r3, [r3, #2]
  400cac:	b9eb      	cbnz	r3, 400cea <udc_process_setup+0x312>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400cae:	4b3e      	ldr	r3, [pc, #248]	; (400da8 <udc_process_setup+0x3d0>)
  400cb0:	7918      	ldrb	r0, [r3, #4]
  400cb2:	4b41      	ldr	r3, [pc, #260]	; (400db8 <udc_process_setup+0x3e0>)
  400cb4:	4798      	blx	r3
  400cb6:	4603      	mov	r3, r0
  400cb8:	e015      	b.n	400ce6 <udc_process_setup+0x30e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400cba:	4b3b      	ldr	r3, [pc, #236]	; (400da8 <udc_process_setup+0x3d0>)
  400cbc:	88db      	ldrh	r3, [r3, #6]
  400cbe:	b9a3      	cbnz	r3, 400cea <udc_process_setup+0x312>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400cc0:	4b39      	ldr	r3, [pc, #228]	; (400da8 <udc_process_setup+0x3d0>)
  400cc2:	885b      	ldrh	r3, [r3, #2]
  400cc4:	b98b      	cbnz	r3, 400cea <udc_process_setup+0x312>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400cc6:	4c38      	ldr	r4, [pc, #224]	; (400da8 <udc_process_setup+0x3d0>)
  400cc8:	7920      	ldrb	r0, [r4, #4]
  400cca:	4b3c      	ldr	r3, [pc, #240]	; (400dbc <udc_process_setup+0x3e4>)
  400ccc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400cce:	7920      	ldrb	r0, [r4, #4]
  400cd0:	4b3b      	ldr	r3, [pc, #236]	; (400dc0 <udc_process_setup+0x3e8>)
  400cd2:	4798      	blx	r3
  400cd4:	4603      	mov	r3, r0
  400cd6:	e006      	b.n	400ce6 <udc_process_setup+0x30e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  400cd8:	2300      	movs	r3, #0
  400cda:	e004      	b.n	400ce6 <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
  400cdc:	2300      	movs	r3, #0
  400cde:	e002      	b.n	400ce6 <udc_process_setup+0x30e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  400ce0:	2300      	movs	r3, #0
  400ce2:	e000      	b.n	400ce6 <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
  400ce4:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  400ce6:	2b00      	cmp	r3, #0
  400ce8:	d15c      	bne.n	400da4 <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400cea:	4b2f      	ldr	r3, [pc, #188]	; (400da8 <udc_process_setup+0x3d0>)
  400cec:	781b      	ldrb	r3, [r3, #0]
  400cee:	f003 031f 	and.w	r3, r3, #31
  400cf2:	2b01      	cmp	r3, #1
  400cf4:	d11e      	bne.n	400d34 <udc_process_setup+0x35c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400cf6:	4b2d      	ldr	r3, [pc, #180]	; (400dac <udc_process_setup+0x3d4>)
  400cf8:	781b      	ldrb	r3, [r3, #0]
  400cfa:	b1db      	cbz	r3, 400d34 <udc_process_setup+0x35c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400cfc:	4b2a      	ldr	r3, [pc, #168]	; (400da8 <udc_process_setup+0x3d0>)
  400cfe:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400d00:	4b30      	ldr	r3, [pc, #192]	; (400dc4 <udc_process_setup+0x3ec>)
  400d02:	681d      	ldr	r5, [r3, #0]
  400d04:	682b      	ldr	r3, [r5, #0]
  400d06:	791b      	ldrb	r3, [r3, #4]
  400d08:	42a3      	cmp	r3, r4
  400d0a:	d913      	bls.n	400d34 <udc_process_setup+0x35c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400d0c:	4620      	mov	r0, r4
  400d0e:	2100      	movs	r1, #0
  400d10:	4b2d      	ldr	r3, [pc, #180]	; (400dc8 <udc_process_setup+0x3f0>)
  400d12:	4798      	blx	r3
  400d14:	b170      	cbz	r0, 400d34 <udc_process_setup+0x35c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400d16:	686b      	ldr	r3, [r5, #4]
  400d18:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400d1c:	68eb      	ldr	r3, [r5, #12]
  400d1e:	4798      	blx	r3
  400d20:	4601      	mov	r1, r0
  400d22:	4620      	mov	r0, r4
  400d24:	4b28      	ldr	r3, [pc, #160]	; (400dc8 <udc_process_setup+0x3f0>)
  400d26:	4798      	blx	r3
  400d28:	b120      	cbz	r0, 400d34 <udc_process_setup+0x35c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  400d2a:	68ab      	ldr	r3, [r5, #8]
  400d2c:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  400d2e:	4603      	mov	r3, r0
  400d30:	2800      	cmp	r0, #0
  400d32:	d137      	bne.n	400da4 <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400d34:	4b1c      	ldr	r3, [pc, #112]	; (400da8 <udc_process_setup+0x3d0>)
  400d36:	781b      	ldrb	r3, [r3, #0]
  400d38:	f003 031f 	and.w	r3, r3, #31
  400d3c:	2b02      	cmp	r3, #2
  400d3e:	d126      	bne.n	400d8e <udc_process_setup+0x3b6>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400d40:	4b1a      	ldr	r3, [pc, #104]	; (400dac <udc_process_setup+0x3d4>)
  400d42:	781b      	ldrb	r3, [r3, #0]
  400d44:	b1eb      	cbz	r3, 400d82 <udc_process_setup+0x3aa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d46:	4b1f      	ldr	r3, [pc, #124]	; (400dc4 <udc_process_setup+0x3ec>)
  400d48:	681a      	ldr	r2, [r3, #0]
  400d4a:	6813      	ldr	r3, [r2, #0]
  400d4c:	791b      	ldrb	r3, [r3, #4]
  400d4e:	b1d3      	cbz	r3, 400d86 <udc_process_setup+0x3ae>
  400d50:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400d52:	4e1d      	ldr	r6, [pc, #116]	; (400dc8 <udc_process_setup+0x3f0>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d54:	4f1b      	ldr	r7, [pc, #108]	; (400dc4 <udc_process_setup+0x3ec>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400d56:	6853      	ldr	r3, [r2, #4]
  400d58:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400d5c:	68eb      	ldr	r3, [r5, #12]
  400d5e:	4798      	blx	r3
  400d60:	4601      	mov	r1, r0
  400d62:	4620      	mov	r0, r4
  400d64:	47b0      	blx	r6
  400d66:	4603      	mov	r3, r0
  400d68:	b1e0      	cbz	r0, 400da4 <udc_process_setup+0x3cc>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  400d6a:	68ab      	ldr	r3, [r5, #8]
  400d6c:	4798      	blx	r3
  400d6e:	4603      	mov	r3, r0
  400d70:	b9c0      	cbnz	r0, 400da4 <udc_process_setup+0x3cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400d72:	3401      	adds	r4, #1
  400d74:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d76:	683a      	ldr	r2, [r7, #0]
  400d78:	6811      	ldr	r1, [r2, #0]
  400d7a:	7909      	ldrb	r1, [r1, #4]
  400d7c:	42a1      	cmp	r1, r4
  400d7e:	d8ea      	bhi.n	400d56 <udc_process_setup+0x37e>
  400d80:	e010      	b.n	400da4 <udc_process_setup+0x3cc>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  400d82:	2300      	movs	r3, #0
  400d84:	e00e      	b.n	400da4 <udc_process_setup+0x3cc>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  400d86:	2300      	movs	r3, #0
  400d88:	e00c      	b.n	400da4 <udc_process_setup+0x3cc>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  400d8a:	2300      	movs	r3, #0
  400d8c:	e00a      	b.n	400da4 <udc_process_setup+0x3cc>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400d8e:	2300      	movs	r3, #0
  400d90:	e008      	b.n	400da4 <udc_process_setup+0x3cc>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400d92:	f013 0f60 	tst.w	r3, #96	; 0x60
  400d96:	d1a8      	bne.n	400cea <udc_process_setup+0x312>
  400d98:	e6d8      	b.n	400b4c <udc_process_setup+0x174>
  400d9a:	f013 0f60 	tst.w	r3, #96	; 0x60
  400d9e:	d1a4      	bne.n	400cea <udc_process_setup+0x312>
  400da0:	e62b      	b.n	4009fa <udc_process_setup+0x22>
		if (udc_reqstd()) {
			return true;
  400da2:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  400da4:	4618      	mov	r0, r3
  400da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400da8:	20000708 	.word	0x20000708
  400dac:	20000638 	.word	0x20000638
  400db0:	00400885 	.word	0x00400885
  400db4:	004008ed 	.word	0x004008ed
  400db8:	00402741 	.word	0x00402741
  400dbc:	004029a5 	.word	0x004029a5
  400dc0:	00402655 	.word	0x00402655
  400dc4:	2000062c 	.word	0x2000062c
  400dc8:	0040081d 	.word	0x0040081d

00400dcc <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  400dcc:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400dce:	2000      	movs	r0, #0
  400dd0:	213e      	movs	r1, #62	; 0x3e
  400dd2:	4b0a      	ldr	r3, [pc, #40]	; (400dfc <sysclk_enable_usb+0x30>)
  400dd4:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400dd6:	4c0a      	ldr	r4, [pc, #40]	; (400e00 <sysclk_enable_usb+0x34>)
  400dd8:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400dda:	2800      	cmp	r0, #0
  400ddc:	d0fc      	beq.n	400dd8 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400dde:	4b09      	ldr	r3, [pc, #36]	; (400e04 <sysclk_enable_usb+0x38>)
  400de0:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400de2:	4a09      	ldr	r2, [pc, #36]	; (400e08 <sysclk_enable_usb+0x3c>)
  400de4:	4b09      	ldr	r3, [pc, #36]	; (400e0c <sysclk_enable_usb+0x40>)
  400de6:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  400de8:	4c09      	ldr	r4, [pc, #36]	; (400e10 <sysclk_enable_usb+0x44>)
  400dea:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400dec:	2800      	cmp	r0, #0
  400dee:	d0fc      	beq.n	400dea <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  400df0:	2001      	movs	r0, #1
  400df2:	4b08      	ldr	r3, [pc, #32]	; (400e14 <sysclk_enable_usb+0x48>)
  400df4:	4798      	blx	r3
		pmc_enable_udpck();
  400df6:	4b08      	ldr	r3, [pc, #32]	; (400e18 <sysclk_enable_usb+0x4c>)
  400df8:	4798      	blx	r3
  400dfa:	bd10      	pop	{r4, pc}
  400dfc:	00401039 	.word	0x00401039
  400e00:	0040108d 	.word	0x0040108d
  400e04:	004010bd 	.word	0x004010bd
  400e08:	000f3f02 	.word	0x000f3f02
  400e0c:	400e0400 	.word	0x400e0400
  400e10:	004010c9 	.word	0x004010c9
  400e14:	00401181 	.word	0x00401181
  400e18:	00401195 	.word	0x00401195

00400e1c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e1c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e1e:	480e      	ldr	r0, [pc, #56]	; (400e58 <sysclk_init+0x3c>)
  400e20:	4b0e      	ldr	r3, [pc, #56]	; (400e5c <sysclk_init+0x40>)
  400e22:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400e24:	2000      	movs	r0, #0
  400e26:	213e      	movs	r1, #62	; 0x3e
  400e28:	4b0d      	ldr	r3, [pc, #52]	; (400e60 <sysclk_init+0x44>)
  400e2a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e2c:	4c0d      	ldr	r4, [pc, #52]	; (400e64 <sysclk_init+0x48>)
  400e2e:	47a0      	blx	r4
  400e30:	2800      	cmp	r0, #0
  400e32:	d0fc      	beq.n	400e2e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400e34:	4b0c      	ldr	r3, [pc, #48]	; (400e68 <sysclk_init+0x4c>)
  400e36:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400e38:	4a0c      	ldr	r2, [pc, #48]	; (400e6c <sysclk_init+0x50>)
  400e3a:	4b0d      	ldr	r3, [pc, #52]	; (400e70 <sysclk_init+0x54>)
  400e3c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400e3e:	4c0d      	ldr	r4, [pc, #52]	; (400e74 <sysclk_init+0x58>)
  400e40:	47a0      	blx	r4
  400e42:	2800      	cmp	r0, #0
  400e44:	d0fc      	beq.n	400e40 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e46:	2010      	movs	r0, #16
  400e48:	4b0b      	ldr	r3, [pc, #44]	; (400e78 <sysclk_init+0x5c>)
  400e4a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e4c:	4b0b      	ldr	r3, [pc, #44]	; (400e7c <sysclk_init+0x60>)
  400e4e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400e50:	4801      	ldr	r0, [pc, #4]	; (400e58 <sysclk_init+0x3c>)
  400e52:	4b02      	ldr	r3, [pc, #8]	; (400e5c <sysclk_init+0x40>)
  400e54:	4798      	blx	r3
  400e56:	bd10      	pop	{r4, pc}
  400e58:	07270e00 	.word	0x07270e00
  400e5c:	00402d11 	.word	0x00402d11
  400e60:	00401039 	.word	0x00401039
  400e64:	0040108d 	.word	0x0040108d
  400e68:	0040109d 	.word	0x0040109d
  400e6c:	20133f01 	.word	0x20133f01
  400e70:	400e0400 	.word	0x400e0400
  400e74:	004010ad 	.word	0x004010ad
  400e78:	00400fd1 	.word	0x00400fd1
  400e7c:	00402bfd 	.word	0x00402bfd

00400e80 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400e80:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400e82:	4823      	ldr	r0, [pc, #140]	; (400f10 <board_init+0x90>)
  400e84:	4b23      	ldr	r3, [pc, #140]	; (400f14 <board_init+0x94>)
  400e86:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400e88:	200b      	movs	r0, #11
  400e8a:	4c23      	ldr	r4, [pc, #140]	; (400f18 <board_init+0x98>)
  400e8c:	47a0      	blx	r4
  400e8e:	200c      	movs	r0, #12
  400e90:	47a0      	blx	r4
  400e92:	200d      	movs	r0, #13
  400e94:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e96:	4921      	ldr	r1, [pc, #132]	; (400f1c <board_init+0x9c>)
  400e98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  400e9c:	630b      	str	r3, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e9e:	610b      	str	r3, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ea0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ea4:	4b1e      	ldr	r3, [pc, #120]	; (400f20 <board_init+0xa0>)
  400ea6:	2204      	movs	r2, #4
  400ea8:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400eae:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400eb4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400eb6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ebc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400ebe:	f020 0004 	bic.w	r0, r0, #4
  400ec2:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400ec4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400ec6:	f020 0004 	bic.w	r0, r0, #4
  400eca:	6758      	str	r0, [r3, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ecc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400ed0:	6308      	str	r0, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ed2:	6108      	str	r0, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ed4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ed8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  400edc:	6318      	str	r0, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ede:	6118      	str	r0, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ee0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ee4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  400ee8:	6308      	str	r0, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400eea:	6108      	str	r0, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400eec:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400ef0:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400ef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400ef6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400ef8:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f00:	f022 0204 	bic.w	r2, r2, #4
  400f04:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400f06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f08:	f022 0204 	bic.w	r2, r2, #4
  400f0c:	675a      	str	r2, [r3, #116]	; 0x74
  400f0e:	bd10      	pop	{r4, pc}
  400f10:	400e1450 	.word	0x400e1450
  400f14:	00402b41 	.word	0x00402b41
  400f18:	004010d9 	.word	0x004010d9
  400f1c:	400e1200 	.word	0x400e1200
  400f20:	400e0e00 	.word	0x400e0e00

00400f24 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f26:	4770      	bx	lr

00400f28 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f28:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f2a:	4770      	bx	lr

00400f2c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f30:	4681      	mov	r9, r0
  400f32:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f34:	4b12      	ldr	r3, [pc, #72]	; (400f80 <pio_handler_process+0x54>)
  400f36:	4798      	blx	r3
  400f38:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f3a:	4648      	mov	r0, r9
  400f3c:	4b11      	ldr	r3, [pc, #68]	; (400f84 <pio_handler_process+0x58>)
  400f3e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f40:	4005      	ands	r5, r0
  400f42:	d013      	beq.n	400f6c <pio_handler_process+0x40>
  400f44:	4c10      	ldr	r4, [pc, #64]	; (400f88 <pio_handler_process+0x5c>)
  400f46:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400f4a:	6823      	ldr	r3, [r4, #0]
  400f4c:	4543      	cmp	r3, r8
  400f4e:	d108      	bne.n	400f62 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f50:	6861      	ldr	r1, [r4, #4]
  400f52:	4229      	tst	r1, r5
  400f54:	d005      	beq.n	400f62 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f56:	68e3      	ldr	r3, [r4, #12]
  400f58:	4640      	mov	r0, r8
  400f5a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400f5c:	6863      	ldr	r3, [r4, #4]
  400f5e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f62:	42b4      	cmp	r4, r6
  400f64:	d002      	beq.n	400f6c <pio_handler_process+0x40>
  400f66:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400f68:	2d00      	cmp	r5, #0
  400f6a:	d1ee      	bne.n	400f4a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f6c:	4b07      	ldr	r3, [pc, #28]	; (400f8c <pio_handler_process+0x60>)
  400f6e:	681b      	ldr	r3, [r3, #0]
  400f70:	b123      	cbz	r3, 400f7c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f72:	4b07      	ldr	r3, [pc, #28]	; (400f90 <pio_handler_process+0x64>)
  400f74:	681b      	ldr	r3, [r3, #0]
  400f76:	b10b      	cbz	r3, 400f7c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f78:	4648      	mov	r0, r9
  400f7a:	4798      	blx	r3
  400f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f80:	00400f25 	.word	0x00400f25
  400f84:	00400f29 	.word	0x00400f29
  400f88:	20000644 	.word	0x20000644
  400f8c:	20000704 	.word	0x20000704
  400f90:	20000640 	.word	0x20000640

00400f94 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f94:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f96:	4802      	ldr	r0, [pc, #8]	; (400fa0 <PIOA_Handler+0xc>)
  400f98:	210b      	movs	r1, #11
  400f9a:	4b02      	ldr	r3, [pc, #8]	; (400fa4 <PIOA_Handler+0x10>)
  400f9c:	4798      	blx	r3
  400f9e:	bd08      	pop	{r3, pc}
  400fa0:	400e0e00 	.word	0x400e0e00
  400fa4:	00400f2d 	.word	0x00400f2d

00400fa8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400fa8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400faa:	4802      	ldr	r0, [pc, #8]	; (400fb4 <PIOB_Handler+0xc>)
  400fac:	210c      	movs	r1, #12
  400fae:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <PIOB_Handler+0x10>)
  400fb0:	4798      	blx	r3
  400fb2:	bd08      	pop	{r3, pc}
  400fb4:	400e1000 	.word	0x400e1000
  400fb8:	00400f2d 	.word	0x00400f2d

00400fbc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400fbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400fbe:	4802      	ldr	r0, [pc, #8]	; (400fc8 <PIOC_Handler+0xc>)
  400fc0:	210d      	movs	r1, #13
  400fc2:	4b02      	ldr	r3, [pc, #8]	; (400fcc <PIOC_Handler+0x10>)
  400fc4:	4798      	blx	r3
  400fc6:	bd08      	pop	{r3, pc}
  400fc8:	400e1200 	.word	0x400e1200
  400fcc:	00400f2d 	.word	0x00400f2d

00400fd0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400fd0:	4a18      	ldr	r2, [pc, #96]	; (401034 <pmc_switch_mck_to_pllack+0x64>)
  400fd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400fd8:	4318      	orrs	r0, r3
  400fda:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400fdc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fde:	f013 0f08 	tst.w	r3, #8
  400fe2:	d003      	beq.n	400fec <pmc_switch_mck_to_pllack+0x1c>
  400fe4:	e009      	b.n	400ffa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400fe6:	3b01      	subs	r3, #1
  400fe8:	d103      	bne.n	400ff2 <pmc_switch_mck_to_pllack+0x22>
  400fea:	e01e      	b.n	40102a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ff0:	4910      	ldr	r1, [pc, #64]	; (401034 <pmc_switch_mck_to_pllack+0x64>)
  400ff2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ff4:	f012 0f08 	tst.w	r2, #8
  400ff8:	d0f5      	beq.n	400fe6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ffa:	4a0e      	ldr	r2, [pc, #56]	; (401034 <pmc_switch_mck_to_pllack+0x64>)
  400ffc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ffe:	f023 0303 	bic.w	r3, r3, #3
  401002:	f043 0302 	orr.w	r3, r3, #2
  401006:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401008:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40100a:	f010 0008 	ands.w	r0, r0, #8
  40100e:	d004      	beq.n	40101a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401010:	2000      	movs	r0, #0
  401012:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401014:	3b01      	subs	r3, #1
  401016:	d103      	bne.n	401020 <pmc_switch_mck_to_pllack+0x50>
  401018:	e009      	b.n	40102e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40101a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40101e:	4905      	ldr	r1, [pc, #20]	; (401034 <pmc_switch_mck_to_pllack+0x64>)
  401020:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401022:	f012 0f08 	tst.w	r2, #8
  401026:	d0f5      	beq.n	401014 <pmc_switch_mck_to_pllack+0x44>
  401028:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40102a:	2001      	movs	r0, #1
  40102c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40102e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401030:	4770      	bx	lr
  401032:	bf00      	nop
  401034:	400e0400 	.word	0x400e0400

00401038 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401038:	b138      	cbz	r0, 40104a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40103a:	4911      	ldr	r1, [pc, #68]	; (401080 <pmc_switch_mainck_to_xtal+0x48>)
  40103c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40103e:	4a11      	ldr	r2, [pc, #68]	; (401084 <pmc_switch_mainck_to_xtal+0x4c>)
  401040:	401a      	ands	r2, r3
  401042:	4b11      	ldr	r3, [pc, #68]	; (401088 <pmc_switch_mainck_to_xtal+0x50>)
  401044:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401046:	620b      	str	r3, [r1, #32]
  401048:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40104a:	4a0d      	ldr	r2, [pc, #52]	; (401080 <pmc_switch_mainck_to_xtal+0x48>)
  40104c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40104e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401052:	f023 0303 	bic.w	r3, r3, #3
  401056:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40105a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40105e:	0209      	lsls	r1, r1, #8
  401060:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401062:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401064:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401066:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401068:	f013 0f01 	tst.w	r3, #1
  40106c:	d0fb      	beq.n	401066 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40106e:	4a04      	ldr	r2, [pc, #16]	; (401080 <pmc_switch_mainck_to_xtal+0x48>)
  401070:	6a13      	ldr	r3, [r2, #32]
  401072:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40107a:	6213      	str	r3, [r2, #32]
  40107c:	4770      	bx	lr
  40107e:	bf00      	nop
  401080:	400e0400 	.word	0x400e0400
  401084:	fec8fffc 	.word	0xfec8fffc
  401088:	01370002 	.word	0x01370002

0040108c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40108c:	4b02      	ldr	r3, [pc, #8]	; (401098 <pmc_osc_is_ready_mainck+0xc>)
  40108e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401090:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401094:	4770      	bx	lr
  401096:	bf00      	nop
  401098:	400e0400 	.word	0x400e0400

0040109c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40109c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4010a0:	4b01      	ldr	r3, [pc, #4]	; (4010a8 <pmc_disable_pllack+0xc>)
  4010a2:	629a      	str	r2, [r3, #40]	; 0x28
  4010a4:	4770      	bx	lr
  4010a6:	bf00      	nop
  4010a8:	400e0400 	.word	0x400e0400

004010ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4010ac:	4b02      	ldr	r3, [pc, #8]	; (4010b8 <pmc_is_locked_pllack+0xc>)
  4010ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4010b0:	f000 0002 	and.w	r0, r0, #2
  4010b4:	4770      	bx	lr
  4010b6:	bf00      	nop
  4010b8:	400e0400 	.word	0x400e0400

004010bc <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4010bc:	2200      	movs	r2, #0
  4010be:	4b01      	ldr	r3, [pc, #4]	; (4010c4 <pmc_disable_pllbck+0x8>)
  4010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  4010c2:	4770      	bx	lr
  4010c4:	400e0400 	.word	0x400e0400

004010c8 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4010c8:	4b02      	ldr	r3, [pc, #8]	; (4010d4 <pmc_is_locked_pllbck+0xc>)
  4010ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4010cc:	f000 0004 	and.w	r0, r0, #4
  4010d0:	4770      	bx	lr
  4010d2:	bf00      	nop
  4010d4:	400e0400 	.word	0x400e0400

004010d8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4010d8:	2822      	cmp	r0, #34	; 0x22
  4010da:	d81e      	bhi.n	40111a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4010dc:	281f      	cmp	r0, #31
  4010de:	d80c      	bhi.n	4010fa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4010e0:	4b11      	ldr	r3, [pc, #68]	; (401128 <pmc_enable_periph_clk+0x50>)
  4010e2:	699a      	ldr	r2, [r3, #24]
  4010e4:	2301      	movs	r3, #1
  4010e6:	4083      	lsls	r3, r0
  4010e8:	401a      	ands	r2, r3
  4010ea:	4293      	cmp	r3, r2
  4010ec:	d017      	beq.n	40111e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010ee:	2301      	movs	r3, #1
  4010f0:	4083      	lsls	r3, r0
  4010f2:	4a0d      	ldr	r2, [pc, #52]	; (401128 <pmc_enable_periph_clk+0x50>)
  4010f4:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4010f6:	2000      	movs	r0, #0
  4010f8:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010fa:	4b0b      	ldr	r3, [pc, #44]	; (401128 <pmc_enable_periph_clk+0x50>)
  4010fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401100:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401102:	2301      	movs	r3, #1
  401104:	4083      	lsls	r3, r0
  401106:	401a      	ands	r2, r3
  401108:	4293      	cmp	r3, r2
  40110a:	d00a      	beq.n	401122 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40110c:	2301      	movs	r3, #1
  40110e:	4083      	lsls	r3, r0
  401110:	4a05      	ldr	r2, [pc, #20]	; (401128 <pmc_enable_periph_clk+0x50>)
  401112:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401116:	2000      	movs	r0, #0
  401118:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40111a:	2001      	movs	r0, #1
  40111c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40111e:	2000      	movs	r0, #0
  401120:	4770      	bx	lr
  401122:	2000      	movs	r0, #0
}
  401124:	4770      	bx	lr
  401126:	bf00      	nop
  401128:	400e0400 	.word	0x400e0400

0040112c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40112c:	2822      	cmp	r0, #34	; 0x22
  40112e:	d81e      	bhi.n	40116e <pmc_disable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401130:	281f      	cmp	r0, #31
  401132:	d80c      	bhi.n	40114e <pmc_disable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  401134:	4b11      	ldr	r3, [pc, #68]	; (40117c <pmc_disable_periph_clk+0x50>)
  401136:	699a      	ldr	r2, [r3, #24]
  401138:	2301      	movs	r3, #1
  40113a:	4083      	lsls	r3, r0
  40113c:	401a      	ands	r2, r3
  40113e:	4293      	cmp	r3, r2
  401140:	d117      	bne.n	401172 <pmc_disable_periph_clk+0x46>
			PMC->PMC_PCDR0 = 1 << ul_id;
  401142:	2301      	movs	r3, #1
  401144:	4083      	lsls	r3, r0
  401146:	4a0d      	ldr	r2, [pc, #52]	; (40117c <pmc_disable_periph_clk+0x50>)
  401148:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40114a:	2000      	movs	r0, #0
  40114c:	4770      	bx	lr
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40114e:	4b0b      	ldr	r3, [pc, #44]	; (40117c <pmc_disable_periph_clk+0x50>)
  401150:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401154:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401156:	2301      	movs	r3, #1
  401158:	4083      	lsls	r3, r0
  40115a:	401a      	ands	r2, r3
  40115c:	4293      	cmp	r3, r2
  40115e:	d10a      	bne.n	401176 <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR1 = 1 << ul_id;
  401160:	2301      	movs	r3, #1
  401162:	4083      	lsls	r3, r0
  401164:	4a05      	ldr	r2, [pc, #20]	; (40117c <pmc_disable_periph_clk+0x50>)
  401166:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  40116a:	2000      	movs	r0, #0
  40116c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40116e:	2001      	movs	r0, #1
  401170:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401172:	2000      	movs	r0, #0
  401174:	4770      	bx	lr
  401176:	2000      	movs	r0, #0
}
  401178:	4770      	bx	lr
  40117a:	bf00      	nop
  40117c:	400e0400 	.word	0x400e0400

00401180 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  401180:	0200      	lsls	r0, r0, #8
  401182:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  401186:	f040 0001 	orr.w	r0, r0, #1
  40118a:	4b01      	ldr	r3, [pc, #4]	; (401190 <pmc_switch_udpck_to_pllbck+0x10>)
  40118c:	6398      	str	r0, [r3, #56]	; 0x38
  40118e:	4770      	bx	lr
  401190:	400e0400 	.word	0x400e0400

00401194 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  401194:	2280      	movs	r2, #128	; 0x80
  401196:	4b01      	ldr	r3, [pc, #4]	; (40119c <pmc_enable_udpck+0x8>)
  401198:	601a      	str	r2, [r3, #0]
  40119a:	4770      	bx	lr
  40119c:	400e0400 	.word	0x400e0400

004011a0 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4011a0:	4a03      	ldr	r2, [pc, #12]	; (4011b0 <pmc_set_fast_startup_input+0x10>)
  4011a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4011a4:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4011a8:	4303      	orrs	r3, r0
  4011aa:	6713      	str	r3, [r2, #112]	; 0x70
  4011ac:	4770      	bx	lr
  4011ae:	bf00      	nop
  4011b0:	400e0400 	.word	0x400e0400

004011b4 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4011b4:	4b02      	ldr	r3, [pc, #8]	; (4011c0 <pmc_is_wakeup_clocks_restored+0xc>)
  4011b6:	7818      	ldrb	r0, [r3, #0]
}
  4011b8:	f080 0001 	eor.w	r0, r0, #1
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop
  4011c0:	200006b4 	.word	0x200006b4

004011c4 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4011c4:	4a03      	ldr	r2, [pc, #12]	; (4011d4 <udd_ctrl_init+0x10>)
  4011c6:	2300      	movs	r3, #0
  4011c8:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4011ca:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4011cc:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4011ce:	4a02      	ldr	r2, [pc, #8]	; (4011d8 <udd_ctrl_init+0x14>)
  4011d0:	7013      	strb	r3, [r2, #0]
  4011d2:	4770      	bx	lr
  4011d4:	20000708 	.word	0x20000708
  4011d8:	200006f8 	.word	0x200006f8

004011dc <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  4011dc:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4011de:	2205      	movs	r2, #5
  4011e0:	4b0e      	ldr	r3, [pc, #56]	; (40121c <udd_ctrl_stall_data+0x40>)
  4011e2:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4011e4:	4a0e      	ldr	r2, [pc, #56]	; (401220 <udd_ctrl_stall_data+0x44>)
  4011e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011e8:	9300      	str	r3, [sp, #0]
  4011ea:	9b00      	ldr	r3, [sp, #0]
  4011ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011f0:	9300      	str	r3, [sp, #0]
  4011f2:	9b00      	ldr	r3, [sp, #0]
  4011f4:	f043 0320 	orr.w	r3, r3, #32
  4011f8:	9300      	str	r3, [sp, #0]
  4011fa:	9b00      	ldr	r3, [sp, #0]
  4011fc:	6313      	str	r3, [r2, #48]	; 0x30
  4011fe:	2300      	movs	r3, #0
  401200:	9301      	str	r3, [sp, #4]
  401202:	9b01      	ldr	r3, [sp, #4]
  401204:	2b13      	cmp	r3, #19
  401206:	d806      	bhi.n	401216 <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401208:	bf00      	nop
  40120a:	9b01      	ldr	r3, [sp, #4]
  40120c:	3301      	adds	r3, #1
  40120e:	9301      	str	r3, [sp, #4]
  401210:	9b01      	ldr	r3, [sp, #4]
  401212:	2b13      	cmp	r3, #19
  401214:	d9f8      	bls.n	401208 <udd_ctrl_stall_data+0x2c>
}
  401216:	b002      	add	sp, #8
  401218:	4770      	bx	lr
  40121a:	bf00      	nop
  40121c:	200006f8 	.word	0x200006f8
  401220:	40034000 	.word	0x40034000

00401224 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401224:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401226:	2203      	movs	r2, #3
  401228:	4b0e      	ldr	r3, [pc, #56]	; (401264 <udd_ctrl_send_zlp_in+0x40>)
  40122a:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  40122c:	4a0e      	ldr	r2, [pc, #56]	; (401268 <udd_ctrl_send_zlp_in+0x44>)
  40122e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401230:	9300      	str	r3, [sp, #0]
  401232:	9b00      	ldr	r3, [sp, #0]
  401234:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401238:	9300      	str	r3, [sp, #0]
  40123a:	9b00      	ldr	r3, [sp, #0]
  40123c:	f043 0310 	orr.w	r3, r3, #16
  401240:	9300      	str	r3, [sp, #0]
  401242:	9b00      	ldr	r3, [sp, #0]
  401244:	6313      	str	r3, [r2, #48]	; 0x30
  401246:	2300      	movs	r3, #0
  401248:	9301      	str	r3, [sp, #4]
  40124a:	9b01      	ldr	r3, [sp, #4]
  40124c:	2b13      	cmp	r3, #19
  40124e:	d806      	bhi.n	40125e <udd_ctrl_send_zlp_in+0x3a>
  401250:	bf00      	nop
  401252:	9b01      	ldr	r3, [sp, #4]
  401254:	3301      	adds	r3, #1
  401256:	9301      	str	r3, [sp, #4]
  401258:	9b01      	ldr	r3, [sp, #4]
  40125a:	2b13      	cmp	r3, #19
  40125c:	d9f8      	bls.n	401250 <udd_ctrl_send_zlp_in+0x2c>
}
  40125e:	b002      	add	sp, #8
  401260:	4770      	bx	lr
  401262:	bf00      	nop
  401264:	200006f8 	.word	0x200006f8
  401268:	40034000 	.word	0x40034000

0040126c <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  40126c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  40126e:	4b02      	ldr	r3, [pc, #8]	; (401278 <udd_ctrl_endofrequest+0xc>)
  401270:	691b      	ldr	r3, [r3, #16]
  401272:	b103      	cbz	r3, 401276 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401274:	4798      	blx	r3
  401276:	bd08      	pop	{r3, pc}
  401278:	20000708 	.word	0x20000708

0040127c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  40127c:	b530      	push	{r4, r5, lr}
  40127e:	b08b      	sub	sp, #44	; 0x2c
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401280:	4b75      	ldr	r3, [pc, #468]	; (401458 <udd_ctrl_in_sent+0x1dc>)
  401282:	781b      	ldrb	r3, [r3, #0]
  401284:	2b03      	cmp	r3, #3
  401286:	d11d      	bne.n	4012c4 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  401288:	4a74      	ldr	r2, [pc, #464]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  40128a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40128c:	9300      	str	r3, [sp, #0]
  40128e:	9b00      	ldr	r3, [sp, #0]
  401290:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401294:	9300      	str	r3, [sp, #0]
  401296:	9b00      	ldr	r3, [sp, #0]
  401298:	f023 0301 	bic.w	r3, r3, #1
  40129c:	9300      	str	r3, [sp, #0]
  40129e:	9b00      	ldr	r3, [sp, #0]
  4012a0:	6313      	str	r3, [r2, #48]	; 0x30
  4012a2:	2300      	movs	r3, #0
  4012a4:	9301      	str	r3, [sp, #4]
  4012a6:	9b01      	ldr	r3, [sp, #4]
  4012a8:	2b13      	cmp	r3, #19
  4012aa:	d806      	bhi.n	4012ba <udd_ctrl_in_sent+0x3e>
  4012ac:	bf00      	nop
  4012ae:	9b01      	ldr	r3, [sp, #4]
  4012b0:	3301      	adds	r3, #1
  4012b2:	9301      	str	r3, [sp, #4]
  4012b4:	9b01      	ldr	r3, [sp, #4]
  4012b6:	2b13      	cmp	r3, #19
  4012b8:	d9f8      	bls.n	4012ac <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  4012ba:	4b69      	ldr	r3, [pc, #420]	; (401460 <udd_ctrl_in_sent+0x1e4>)
  4012bc:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4012be:	4b69      	ldr	r3, [pc, #420]	; (401464 <udd_ctrl_in_sent+0x1e8>)
  4012c0:	4798      	blx	r3
		return;
  4012c2:	e0c6      	b.n	401452 <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4012c4:	4b68      	ldr	r3, [pc, #416]	; (401468 <udd_ctrl_in_sent+0x1ec>)
  4012c6:	881a      	ldrh	r2, [r3, #0]
  4012c8:	4b68      	ldr	r3, [pc, #416]	; (40146c <udd_ctrl_in_sent+0x1f0>)
  4012ca:	899c      	ldrh	r4, [r3, #12]
  4012cc:	1aa4      	subs	r4, r4, r2
  4012ce:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4012d0:	2c00      	cmp	r4, #0
  4012d2:	d133      	bne.n	40133c <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4012d4:	4966      	ldr	r1, [pc, #408]	; (401470 <udd_ctrl_in_sent+0x1f4>)
  4012d6:	880b      	ldrh	r3, [r1, #0]
  4012d8:	4413      	add	r3, r2
  4012da:	b29b      	uxth	r3, r3
  4012dc:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4012de:	4a63      	ldr	r2, [pc, #396]	; (40146c <udd_ctrl_in_sent+0x1f0>)
  4012e0:	88d2      	ldrh	r2, [r2, #6]
  4012e2:	429a      	cmp	r2, r3
  4012e4:	d002      	beq.n	4012ec <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  4012e6:	4b63      	ldr	r3, [pc, #396]	; (401474 <udd_ctrl_in_sent+0x1f8>)
  4012e8:	781b      	ldrb	r3, [r3, #0]
  4012ea:	b1eb      	cbz	r3, 401328 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4012ec:	2204      	movs	r2, #4
  4012ee:	4b5a      	ldr	r3, [pc, #360]	; (401458 <udd_ctrl_in_sent+0x1dc>)
  4012f0:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  4012f2:	4a5a      	ldr	r2, [pc, #360]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  4012f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012f6:	9302      	str	r3, [sp, #8]
  4012f8:	9b02      	ldr	r3, [sp, #8]
  4012fa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4012fe:	9302      	str	r3, [sp, #8]
  401300:	9b02      	ldr	r3, [sp, #8]
  401302:	f023 0301 	bic.w	r3, r3, #1
  401306:	9302      	str	r3, [sp, #8]
  401308:	9b02      	ldr	r3, [sp, #8]
  40130a:	6313      	str	r3, [r2, #48]	; 0x30
  40130c:	2300      	movs	r3, #0
  40130e:	9303      	str	r3, [sp, #12]
  401310:	9b03      	ldr	r3, [sp, #12]
  401312:	2b13      	cmp	r3, #19
  401314:	f200 809d 	bhi.w	401452 <udd_ctrl_in_sent+0x1d6>
  401318:	bf00      	nop
  40131a:	9b03      	ldr	r3, [sp, #12]
  40131c:	3301      	adds	r3, #1
  40131e:	9303      	str	r3, [sp, #12]
  401320:	9b03      	ldr	r3, [sp, #12]
  401322:	2b13      	cmp	r3, #19
  401324:	d9f8      	bls.n	401318 <udd_ctrl_in_sent+0x9c>
  401326:	e094      	b.n	401452 <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401328:	4b50      	ldr	r3, [pc, #320]	; (40146c <udd_ctrl_in_sent+0x1f0>)
  40132a:	695b      	ldr	r3, [r3, #20]
  40132c:	b16b      	cbz	r3, 40134a <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40132e:	4798      	blx	r3
  401330:	b158      	cbz	r0, 40134a <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  401332:	2200      	movs	r2, #0
  401334:	4b4c      	ldr	r3, [pc, #304]	; (401468 <udd_ctrl_in_sent+0x1ec>)
  401336:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401338:	4b4c      	ldr	r3, [pc, #304]	; (40146c <udd_ctrl_in_sent+0x1f0>)
  40133a:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  40133c:	2c3f      	cmp	r4, #63	; 0x3f
  40133e:	d904      	bls.n	40134a <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401340:	2200      	movs	r2, #0
  401342:	4b4c      	ldr	r3, [pc, #304]	; (401474 <udd_ctrl_in_sent+0x1f8>)
  401344:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401346:	2440      	movs	r4, #64	; 0x40
  401348:	e002      	b.n	401350 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  40134a:	2201      	movs	r2, #1
  40134c:	4b49      	ldr	r3, [pc, #292]	; (401474 <udd_ctrl_in_sent+0x1f8>)
  40134e:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401350:	4b46      	ldr	r3, [pc, #280]	; (40146c <udd_ctrl_in_sent+0x1f0>)
  401352:	6899      	ldr	r1, [r3, #8]
  401354:	4b44      	ldr	r3, [pc, #272]	; (401468 <udd_ctrl_in_sent+0x1ec>)
  401356:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401358:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40135c:	fab0 f080 	clz	r0, r0
  401360:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401362:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401364:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401368:	2500      	movs	r5, #0
  40136a:	4a43      	ldr	r2, [pc, #268]	; (401478 <udd_ctrl_in_sent+0x1fc>)
  40136c:	7015      	strb	r5, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  40136e:	4a3b      	ldr	r2, [pc, #236]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  401370:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401372:	f012 0f02 	tst.w	r2, #2
  401376:	d101      	bne.n	40137c <udd_ctrl_in_sent+0x100>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401378:	bb24      	cbnz	r4, 4013c4 <udd_ctrl_in_sent+0x148>
  40137a:	e02d      	b.n	4013d8 <udd_ctrl_in_sent+0x15c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40137c:	b128      	cbz	r0, 40138a <udd_ctrl_in_sent+0x10e>
		cpu_irq_enable();
  40137e:	2201      	movs	r2, #1
  401380:	4b3d      	ldr	r3, [pc, #244]	; (401478 <udd_ctrl_in_sent+0x1fc>)
  401382:	701a      	strb	r2, [r3, #0]
  401384:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401388:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40138a:	2204      	movs	r2, #4
  40138c:	4b32      	ldr	r3, [pc, #200]	; (401458 <udd_ctrl_in_sent+0x1dc>)
  40138e:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401390:	4a32      	ldr	r2, [pc, #200]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  401392:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401394:	9304      	str	r3, [sp, #16]
  401396:	9b04      	ldr	r3, [sp, #16]
  401398:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40139c:	9304      	str	r3, [sp, #16]
  40139e:	9b04      	ldr	r3, [sp, #16]
  4013a0:	f023 0301 	bic.w	r3, r3, #1
  4013a4:	9304      	str	r3, [sp, #16]
  4013a6:	9b04      	ldr	r3, [sp, #16]
  4013a8:	6313      	str	r3, [r2, #48]	; 0x30
  4013aa:	2300      	movs	r3, #0
  4013ac:	9305      	str	r3, [sp, #20]
  4013ae:	9b05      	ldr	r3, [sp, #20]
  4013b0:	2b13      	cmp	r3, #19
  4013b2:	d84e      	bhi.n	401452 <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4013b4:	bf00      	nop
  4013b6:	9b05      	ldr	r3, [sp, #20]
  4013b8:	3301      	adds	r3, #1
  4013ba:	9305      	str	r3, [sp, #20]
  4013bc:	9b05      	ldr	r3, [sp, #20]
  4013be:	2b13      	cmp	r3, #19
  4013c0:	d9f8      	bls.n	4013b4 <udd_ctrl_in_sent+0x138>
  4013c2:	e046      	b.n	401452 <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4013c4:	4419      	add	r1, r3
  4013c6:	460a      	mov	r2, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  4013c8:	4d24      	ldr	r5, [pc, #144]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  4013ca:	f812 3b01 	ldrb.w	r3, [r2], #1
  4013ce:	652b      	str	r3, [r5, #80]	; 0x50
  4013d0:	1a53      	subs	r3, r2, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  4013d2:	b2db      	uxtb	r3, r3
  4013d4:	42a3      	cmp	r3, r4
  4013d6:	d3f8      	bcc.n	4013ca <udd_ctrl_in_sent+0x14e>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  4013d8:	4a23      	ldr	r2, [pc, #140]	; (401468 <udd_ctrl_in_sent+0x1ec>)
  4013da:	8813      	ldrh	r3, [r2, #0]
  4013dc:	441c      	add	r4, r3
  4013de:	8014      	strh	r4, [r2, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  4013e0:	4a1e      	ldr	r2, [pc, #120]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  4013e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013e4:	9306      	str	r3, [sp, #24]
  4013e6:	9b06      	ldr	r3, [sp, #24]
  4013e8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013ec:	9306      	str	r3, [sp, #24]
  4013ee:	9b06      	ldr	r3, [sp, #24]
  4013f0:	f043 0310 	orr.w	r3, r3, #16
  4013f4:	9306      	str	r3, [sp, #24]
  4013f6:	9b06      	ldr	r3, [sp, #24]
  4013f8:	6313      	str	r3, [r2, #48]	; 0x30
  4013fa:	2300      	movs	r3, #0
  4013fc:	9307      	str	r3, [sp, #28]
  4013fe:	9b07      	ldr	r3, [sp, #28]
  401400:	2b13      	cmp	r3, #19
  401402:	d806      	bhi.n	401412 <udd_ctrl_in_sent+0x196>
  401404:	bf00      	nop
  401406:	9b07      	ldr	r3, [sp, #28]
  401408:	3301      	adds	r3, #1
  40140a:	9307      	str	r3, [sp, #28]
  40140c:	9b07      	ldr	r3, [sp, #28]
  40140e:	2b13      	cmp	r3, #19
  401410:	d9f8      	bls.n	401404 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  401412:	4a12      	ldr	r2, [pc, #72]	; (40145c <udd_ctrl_in_sent+0x1e0>)
  401414:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401416:	9308      	str	r3, [sp, #32]
  401418:	9b08      	ldr	r3, [sp, #32]
  40141a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40141e:	9308      	str	r3, [sp, #32]
  401420:	9b08      	ldr	r3, [sp, #32]
  401422:	f023 0301 	bic.w	r3, r3, #1
  401426:	9308      	str	r3, [sp, #32]
  401428:	9b08      	ldr	r3, [sp, #32]
  40142a:	6313      	str	r3, [r2, #48]	; 0x30
  40142c:	2300      	movs	r3, #0
  40142e:	9309      	str	r3, [sp, #36]	; 0x24
  401430:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401432:	2b13      	cmp	r3, #19
  401434:	d806      	bhi.n	401444 <udd_ctrl_in_sent+0x1c8>
  401436:	bf00      	nop
  401438:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40143a:	3301      	adds	r3, #1
  40143c:	9309      	str	r3, [sp, #36]	; 0x24
  40143e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401440:	2b13      	cmp	r3, #19
  401442:	d9f8      	bls.n	401436 <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401444:	b128      	cbz	r0, 401452 <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401446:	2201      	movs	r2, #1
  401448:	4b0b      	ldr	r3, [pc, #44]	; (401478 <udd_ctrl_in_sent+0x1fc>)
  40144a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40144c:	f3bf 8f5f 	dmb	sy
  401450:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401452:	b00b      	add	sp, #44	; 0x2c
  401454:	bd30      	pop	{r4, r5, pc}
  401456:	bf00      	nop
  401458:	200006f8 	.word	0x200006f8
  40145c:	40034000 	.word	0x40034000
  401460:	0040126d 	.word	0x0040126d
  401464:	004011c5 	.word	0x004011c5
  401468:	200006f6 	.word	0x200006f6
  40146c:	20000708 	.word	0x20000708
  401470:	200006b6 	.word	0x200006b6
  401474:	200006b5 	.word	0x200006b5
  401478:	200000a0 	.word	0x200000a0

0040147c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  40147c:	b538      	push	{r3, r4, r5, lr}
  40147e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401480:	7c44      	ldrb	r4, [r0, #17]
  401482:	f014 0f10 	tst.w	r4, #16
  401486:	d015      	beq.n	4014b4 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401488:	7c44      	ldrb	r4, [r0, #17]
  40148a:	f36f 1404 	bfc	r4, #4, #1
  40148e:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401490:	6805      	ldr	r5, [r0, #0]
  401492:	b17d      	cbz	r5, 4014b4 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401494:	f102 040c 	add.w	r4, r2, #12
  401498:	4807      	ldr	r0, [pc, #28]	; (4014b8 <udd_ep_finish_job+0x3c>)
  40149a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  40149e:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  4014a2:	bf18      	it	ne
  4014a4:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4014a8:	2901      	cmp	r1, #1
  4014aa:	bf14      	ite	ne
  4014ac:	2000      	movne	r0, #0
  4014ae:	2001      	moveq	r0, #1
  4014b0:	6899      	ldr	r1, [r3, #8]
  4014b2:	47a8      	blx	r5
  4014b4:	bd38      	pop	{r3, r4, r5, pc}
  4014b6:	bf00      	nop
  4014b8:	40034000 	.word	0x40034000

004014bc <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  4014bc:	b430      	push	{r4, r5}
  4014be:	b084      	sub	sp, #16
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4014c0:	1e42      	subs	r2, r0, #1
  4014c2:	0083      	lsls	r3, r0, #2
  4014c4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4014c8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  4014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  4014ce:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  4014d0:	f011 0f02 	tst.w	r1, #2
  4014d4:	d00c      	beq.n	4014f0 <udd_ep_ack_out_received+0x34>
  4014d6:	f014 0f40 	tst.w	r4, #64	; 0x40
  4014da:	d113      	bne.n	401504 <udd_ep_ack_out_received+0x48>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  4014dc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4014e0:	4c32      	ldr	r4, [pc, #200]	; (4015ac <udd_ep_ack_out_received+0xf0>)
  4014e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4014e6:	7c4c      	ldrb	r4, [r1, #17]
  4014e8:	f36f 0483 	bfc	r4, #2, #2
  4014ec:	744c      	strb	r4, [r1, #17]
  4014ee:	e009      	b.n	401504 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  4014f0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4014f4:	4c2d      	ldr	r4, [pc, #180]	; (4015ac <udd_ep_ack_out_received+0xf0>)
  4014f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4014fa:	7c4c      	ldrb	r4, [r1, #17]
  4014fc:	2501      	movs	r5, #1
  4014fe:	f365 0483 	bfi	r4, r5, #2, #2
  401502:	744c      	strb	r4, [r1, #17]
	}
	if (ptr_job->bank == 0) {
  401504:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  401508:	4c28      	ldr	r4, [pc, #160]	; (4015ac <udd_ep_ack_out_received+0xf0>)
  40150a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40150e:	7c49      	ldrb	r1, [r1, #17]
  401510:	f011 0f0c 	tst.w	r1, #12
  401514:	d125      	bne.n	401562 <udd_ep_ack_out_received+0xa6>
		udd_ack_bank0_received(ep);
  401516:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401518:	9100      	str	r1, [sp, #0]
  40151a:	9900      	ldr	r1, [sp, #0]
  40151c:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401520:	9100      	str	r1, [sp, #0]
  401522:	9900      	ldr	r1, [sp, #0]
  401524:	f021 0102 	bic.w	r1, r1, #2
  401528:	9100      	str	r1, [sp, #0]
  40152a:	9900      	ldr	r1, [sp, #0]
  40152c:	6319      	str	r1, [r3, #48]	; 0x30
  40152e:	2300      	movs	r3, #0
  401530:	9301      	str	r3, [sp, #4]
  401532:	9b01      	ldr	r3, [sp, #4]
  401534:	2b13      	cmp	r3, #19
  401536:	d806      	bhi.n	401546 <udd_ep_ack_out_received+0x8a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401538:	bf00      	nop
  40153a:	9b01      	ldr	r3, [sp, #4]
  40153c:	3301      	adds	r3, #1
  40153e:	9301      	str	r3, [sp, #4]
  401540:	9b01      	ldr	r3, [sp, #4]
  401542:	2b13      	cmp	r3, #19
  401544:	d9f8      	bls.n	401538 <udd_ep_ack_out_received+0x7c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401546:	b368      	cbz	r0, 4015a4 <udd_ep_ack_out_received+0xe8>
  401548:	2803      	cmp	r0, #3
  40154a:	d02b      	beq.n	4015a4 <udd_ep_ack_out_received+0xe8>
			ptr_job->bank = 1;
  40154c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401550:	4b16      	ldr	r3, [pc, #88]	; (4015ac <udd_ep_ack_out_received+0xf0>)
  401552:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401556:	7c5a      	ldrb	r2, [r3, #17]
  401558:	2101      	movs	r1, #1
  40155a:	f361 0283 	bfi	r2, r1, #2, #2
  40155e:	745a      	strb	r2, [r3, #17]
  401560:	e020      	b.n	4015a4 <udd_ep_ack_out_received+0xe8>
		}
	} else {
		udd_ack_bank1_received(ep);
  401562:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401564:	9102      	str	r1, [sp, #8]
  401566:	9902      	ldr	r1, [sp, #8]
  401568:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  40156c:	9102      	str	r1, [sp, #8]
  40156e:	9902      	ldr	r1, [sp, #8]
  401570:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401574:	9102      	str	r1, [sp, #8]
  401576:	9902      	ldr	r1, [sp, #8]
  401578:	6319      	str	r1, [r3, #48]	; 0x30
  40157a:	2300      	movs	r3, #0
  40157c:	9303      	str	r3, [sp, #12]
  40157e:	9b03      	ldr	r3, [sp, #12]
  401580:	2b13      	cmp	r3, #19
  401582:	d806      	bhi.n	401592 <udd_ep_ack_out_received+0xd6>
  401584:	bf00      	nop
  401586:	9b03      	ldr	r3, [sp, #12]
  401588:	3301      	adds	r3, #1
  40158a:	9303      	str	r3, [sp, #12]
  40158c:	9b03      	ldr	r3, [sp, #12]
  40158e:	2b13      	cmp	r3, #19
  401590:	d9f8      	bls.n	401584 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 0;
  401592:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401596:	4b05      	ldr	r3, [pc, #20]	; (4015ac <udd_ep_ack_out_received+0xf0>)
  401598:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  40159c:	7c53      	ldrb	r3, [r2, #17]
  40159e:	f36f 0383 	bfc	r3, #2, #2
  4015a2:	7453      	strb	r3, [r2, #17]
	}
}
  4015a4:	b004      	add	sp, #16
  4015a6:	bc30      	pop	{r4, r5}
  4015a8:	4770      	bx	lr
  4015aa:	bf00      	nop
  4015ac:	200006b8 	.word	0x200006b8

004015b0 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4015b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4015b4:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4015b6:	4686      	mov	lr, r0
  4015b8:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4015ba:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  4015be:	4b6c      	ldr	r3, [pc, #432]	; (401770 <udd_ep_in_sent+0x1c0>)
  4015c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4015c4:	f893 8011 	ldrb.w	r8, [r3, #17]
  4015c8:	f3c8 0881 	ubfx	r8, r8, #2, #2
  4015cc:	b120      	cbz	r0, 4015d8 <udd_ep_in_sent+0x28>
  4015ce:	2803      	cmp	r0, #3
  4015d0:	bf0c      	ite	eq
  4015d2:	2301      	moveq	r3, #1
  4015d4:	2302      	movne	r3, #2
  4015d6:	e000      	b.n	4015da <udd_ep_in_sent+0x2a>
  4015d8:	2301      	movs	r3, #1
  4015da:	4543      	cmp	r3, r8
  4015dc:	f340 80be 	ble.w	40175c <udd_ep_in_sent+0x1ac>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4015e0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4015e4:	4a62      	ldr	r2, [pc, #392]	; (401770 <udd_ep_in_sent+0x1c0>)
  4015e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015ea:	68da      	ldr	r2, [r3, #12]
  4015ec:	689b      	ldr	r3, [r3, #8]
  4015ee:	429a      	cmp	r2, r3
  4015f0:	d309      	bcc.n	401606 <udd_ep_in_sent+0x56>
  4015f2:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  4015f6:	4d5e      	ldr	r5, [pc, #376]	; (401770 <udd_ep_in_sent+0x1c0>)
  4015f8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  4015fc:	7c64      	ldrb	r4, [r4, #17]
  4015fe:	f014 0f40 	tst.w	r4, #64	; 0x40
  401602:	f000 80ad 	beq.w	401760 <udd_ep_in_sent+0x1b0>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401606:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  40160a:	4c59      	ldr	r4, [pc, #356]	; (401770 <udd_ep_in_sent+0x1c0>)
  40160c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  401610:	687c      	ldr	r4, [r7, #4]
  401612:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401614:	1a9d      	subs	r5, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401616:	8a3b      	ldrh	r3, [r7, #16]
  401618:	f3c3 0709 	ubfx	r7, r3, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  40161c:	42bd      	cmp	r5, r7
		pkt_size = nb_remain;
  40161e:	bf3a      	itte	cc
  401620:	462f      	movcc	r7, r5
		is_short_pkt = true;
  401622:	f04f 0c01 	movcc.w	ip, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	bool is_short_pkt = false;
  401626:	f04f 0c00 	movcs.w	ip, #0
		pkt_size = nb_remain;
		is_short_pkt = true;
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  40162a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40162e:	4d50      	ldr	r5, [pc, #320]	; (401770 <udd_ep_in_sent+0x1c0>)
  401630:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  401634:	443a      	add	r2, r7
  401636:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401638:	2f07      	cmp	r7, #7
  40163a:	d933      	bls.n	4016a4 <udd_ep_in_sent+0xf4>
  40163c:	f104 0308 	add.w	r3, r4, #8
  401640:	463d      	mov	r5, r7
  401642:	0082      	lsls	r2, r0, #2
  401644:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401648:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40164c:	f813 9c08 	ldrb.w	r9, [r3, #-8]
  401650:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401654:	f813 9c07 	ldrb.w	r9, [r3, #-7]
  401658:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40165c:	f813 9c06 	ldrb.w	r9, [r3, #-6]
  401660:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401664:	f813 9c05 	ldrb.w	r9, [r3, #-5]
  401668:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40166c:	f813 9c04 	ldrb.w	r9, [r3, #-4]
  401670:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401674:	f813 9c03 	ldrb.w	r9, [r3, #-3]
  401678:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40167c:	f813 9c02 	ldrb.w	r9, [r3, #-2]
  401680:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401684:	f813 9c01 	ldrb.w	r9, [r3, #-1]
  401688:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  40168c:	3d08      	subs	r5, #8
  40168e:	3308      	adds	r3, #8
  401690:	2d07      	cmp	r5, #7
  401692:	d8db      	bhi.n	40164c <udd_ep_in_sent+0x9c>
  401694:	f1a7 0308 	sub.w	r3, r7, #8
  401698:	f023 0307 	bic.w	r3, r3, #7
  40169c:	3308      	adds	r3, #8
  40169e:	441c      	add	r4, r3
  4016a0:	f007 0707 	and.w	r7, r7, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  4016a4:	b14f      	cbz	r7, 4016ba <udd_ep_in_sent+0x10a>
  4016a6:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4016a8:	4f32      	ldr	r7, [pc, #200]	; (401774 <udd_ep_in_sent+0x1c4>)
  4016aa:	f814 5b01 	ldrb.w	r5, [r4], #1
  4016ae:	f10e 0214 	add.w	r2, lr, #20
  4016b2:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  4016b6:	429c      	cmp	r4, r3
  4016b8:	d1f7      	bne.n	4016aa <udd_ep_in_sent+0xfa>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  4016ba:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4016be:	4a2c      	ldr	r2, [pc, #176]	; (401770 <udd_ep_in_sent+0x1c0>)
  4016c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016c4:	f108 0801 	add.w	r8, r8, #1
  4016c8:	7c5a      	ldrb	r2, [r3, #17]
  4016ca:	f368 0283 	bfi	r2, r8, #2, #2
  4016ce:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4016d0:	b1e1      	cbz	r1, 40170c <udd_ep_in_sent+0x15c>
  4016d2:	0080      	lsls	r0, r0, #2
  4016d4:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4016d8:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4016dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016de:	9300      	str	r3, [sp, #0]
  4016e0:	9b00      	ldr	r3, [sp, #0]
  4016e2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016e6:	9300      	str	r3, [sp, #0]
  4016e8:	9b00      	ldr	r3, [sp, #0]
  4016ea:	f043 0310 	orr.w	r3, r3, #16
  4016ee:	9300      	str	r3, [sp, #0]
  4016f0:	9b00      	ldr	r3, [sp, #0]
  4016f2:	6303      	str	r3, [r0, #48]	; 0x30
  4016f4:	2300      	movs	r3, #0
  4016f6:	9301      	str	r3, [sp, #4]
  4016f8:	9b01      	ldr	r3, [sp, #4]
  4016fa:	2b13      	cmp	r3, #19
  4016fc:	d806      	bhi.n	40170c <udd_ep_in_sent+0x15c>
  4016fe:	bf00      	nop
  401700:	9b01      	ldr	r3, [sp, #4]
  401702:	3301      	adds	r3, #1
  401704:	9301      	str	r3, [sp, #4]
  401706:	9b01      	ldr	r3, [sp, #4]
  401708:	2b13      	cmp	r3, #19
  40170a:	d9f8      	bls.n	4016fe <udd_ep_in_sent+0x14e>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  40170c:	f1bc 0f00 	cmp.w	ip, #0
  401710:	d008      	beq.n	401724 <udd_ep_in_sent+0x174>
		ptr_job->b_shortpacket = false;
  401712:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401716:	4a16      	ldr	r2, [pc, #88]	; (401770 <udd_ep_in_sent+0x1c0>)
  401718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40171c:	7c5a      	ldrb	r2, [r3, #17]
  40171e:	f36f 1286 	bfc	r2, #6, #1
  401722:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401724:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401728:	4a11      	ldr	r2, [pc, #68]	; (401770 <udd_ep_in_sent+0x1c0>)
  40172a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40172e:	68da      	ldr	r2, [r3, #12]
  401730:	689b      	ldr	r3, [r3, #8]
  401732:	429a      	cmp	r2, r3
  401734:	d316      	bcc.n	401764 <udd_ep_in_sent+0x1b4>
			&& (!ptr_job->b_shortpacket)) {
  401736:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40173a:	4a0d      	ldr	r2, [pc, #52]	; (401770 <udd_ep_in_sent+0x1c0>)
  40173c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401740:	7c5b      	ldrb	r3, [r3, #17]
  401742:	f013 0f40 	tst.w	r3, #64	; 0x40
  401746:	d10f      	bne.n	401768 <udd_ep_in_sent+0x1b8>
		ptr_job->b_buf_end = true;
  401748:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40174c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401750:	7c73      	ldrb	r3, [r6, #17]
  401752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401756:	7473      	strb	r3, [r6, #17]
		return false;
  401758:	2000      	movs	r0, #0
  40175a:	e006      	b.n	40176a <udd_ep_in_sent+0x1ba>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  40175c:	2001      	movs	r0, #1
  40175e:	e004      	b.n	40176a <udd_ep_in_sent+0x1ba>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  401760:	2000      	movs	r0, #0
  401762:	e002      	b.n	40176a <udd_ep_in_sent+0x1ba>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401764:	2001      	movs	r0, #1
  401766:	e000      	b.n	40176a <udd_ep_in_sent+0x1ba>
  401768:	2001      	movs	r0, #1
}
  40176a:	b003      	add	sp, #12
  40176c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401770:	200006b8 	.word	0x200006b8
  401774:	40034000 	.word	0x40034000

00401778 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401778:	b410      	push	{r4}
	if (!b_idle && udd_b_idle) {
  40177a:	4604      	mov	r4, r0
  40177c:	2800      	cmp	r0, #0
  40177e:	d135      	bne.n	4017ec <udd_sleep_mode+0x74>
  401780:	4b1e      	ldr	r3, [pc, #120]	; (4017fc <udd_sleep_mode+0x84>)
  401782:	781b      	ldrb	r3, [r3, #0]
  401784:	b37b      	cbz	r3, 4017e6 <udd_sleep_mode+0x6e>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  401786:	4b1e      	ldr	r3, [pc, #120]	; (401800 <udd_sleep_mode+0x88>)
  401788:	789b      	ldrb	r3, [r3, #2]
  40178a:	b903      	cbnz	r3, 40178e <udd_sleep_mode+0x16>
  40178c:	e7fe      	b.n	40178c <udd_sleep_mode+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40178e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401792:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401794:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401798:	2100      	movs	r1, #0
  40179a:	4a1a      	ldr	r2, [pc, #104]	; (401804 <udd_sleep_mode+0x8c>)
  40179c:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  40179e:	4918      	ldr	r1, [pc, #96]	; (401800 <udd_sleep_mode+0x88>)
  4017a0:	788a      	ldrb	r2, [r1, #2]
  4017a2:	3a01      	subs	r2, #1
  4017a4:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017a6:	b9f3      	cbnz	r3, 4017e6 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  4017a8:	2201      	movs	r2, #1
  4017aa:	4b16      	ldr	r3, [pc, #88]	; (401804 <udd_sleep_mode+0x8c>)
  4017ac:	701a      	strb	r2, [r3, #0]
  4017ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4017b2:	b662      	cpsie	i
  4017b4:	e017      	b.n	4017e6 <udd_sleep_mode+0x6e>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4017b6:	4b12      	ldr	r3, [pc, #72]	; (401800 <udd_sleep_mode+0x88>)
  4017b8:	789b      	ldrb	r3, [r3, #2]
  4017ba:	2bff      	cmp	r3, #255	; 0xff
  4017bc:	d100      	bne.n	4017c0 <udd_sleep_mode+0x48>
  4017be:	e7fe      	b.n	4017be <udd_sleep_mode+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017c0:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4017c4:	b672      	cpsid	i
  4017c6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4017ca:	2100      	movs	r1, #0
  4017cc:	4a0d      	ldr	r2, [pc, #52]	; (401804 <udd_sleep_mode+0x8c>)
  4017ce:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4017d0:	490b      	ldr	r1, [pc, #44]	; (401800 <udd_sleep_mode+0x88>)
  4017d2:	788a      	ldrb	r2, [r1, #2]
  4017d4:	3201      	adds	r2, #1
  4017d6:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017d8:	b92b      	cbnz	r3, 4017e6 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  4017da:	2201      	movs	r2, #1
  4017dc:	4b09      	ldr	r3, [pc, #36]	; (401804 <udd_sleep_mode+0x8c>)
  4017de:	701a      	strb	r2, [r3, #0]
  4017e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4017e4:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4017e6:	4b05      	ldr	r3, [pc, #20]	; (4017fc <udd_sleep_mode+0x84>)
  4017e8:	701c      	strb	r4, [r3, #0]
  4017ea:	e004      	b.n	4017f6 <udd_sleep_mode+0x7e>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  4017ec:	4b03      	ldr	r3, [pc, #12]	; (4017fc <udd_sleep_mode+0x84>)
  4017ee:	781b      	ldrb	r3, [r3, #0]
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	d1f8      	bne.n	4017e6 <udd_sleep_mode+0x6e>
  4017f4:	e7df      	b.n	4017b6 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
  4017f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017fa:	4770      	bx	lr
  4017fc:	200006f4 	.word	0x200006f4
  401800:	200006fc 	.word	0x200006fc
  401804:	200000a0 	.word	0x200000a0

00401808 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40180c:	b0b1      	sub	sp, #196	; 0xc4
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40180e:	4b95      	ldr	r3, [pc, #596]	; (401a64 <UDP_Handler+0x25c>)
  401810:	4798      	blx	r3
  401812:	b960      	cbnz	r0, 40182e <UDP_Handler+0x26>
  401814:	4b94      	ldr	r3, [pc, #592]	; (401a68 <UDP_Handler+0x260>)
  401816:	69db      	ldr	r3, [r3, #28]
  401818:	f413 7f80 	tst.w	r3, #256	; 0x100
  40181c:	d107      	bne.n	40182e <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40181e:	b672      	cpsid	i
  401820:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401824:	2200      	movs	r2, #0
  401826:	4b91      	ldr	r3, [pc, #580]	; (401a6c <UDP_Handler+0x264>)
  401828:	701a      	strb	r2, [r3, #0]
		return;
  40182a:	f000 bd54 	b.w	4022d6 <UDP_Handler+0xace>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  40182e:	2022      	movs	r0, #34	; 0x22
  401830:	4b8f      	ldr	r3, [pc, #572]	; (401a70 <UDP_Handler+0x268>)
  401832:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401834:	4b8c      	ldr	r3, [pc, #560]	; (401a68 <UDP_Handler+0x260>)
  401836:	699b      	ldr	r3, [r3, #24]
  401838:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40183c:	d00c      	beq.n	401858 <UDP_Handler+0x50>
  40183e:	4b8a      	ldr	r3, [pc, #552]	; (401a68 <UDP_Handler+0x260>)
  401840:	69db      	ldr	r3, [r3, #28]
  401842:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401846:	d007      	beq.n	401858 <UDP_Handler+0x50>
		udd_ack_sof();
  401848:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40184c:	4b86      	ldr	r3, [pc, #536]	; (401a68 <UDP_Handler+0x260>)
  40184e:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401850:	4b88      	ldr	r3, [pc, #544]	; (401a74 <UDP_Handler+0x26c>)
  401852:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401854:	f000 bd3f 	b.w	4022d6 <UDP_Handler+0xace>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401858:	4b83      	ldr	r3, [pc, #524]	; (401a68 <UDP_Handler+0x260>)
  40185a:	69db      	ldr	r3, [r3, #28]
  40185c:	f013 0f01 	tst.w	r3, #1
  401860:	f000 81f2 	beq.w	401c48 <UDP_Handler+0x440>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401864:	4b80      	ldr	r3, [pc, #512]	; (401a68 <UDP_Handler+0x260>)
  401866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401868:	f013 0f04 	tst.w	r3, #4
  40186c:	f000 80c0 	beq.w	4019f0 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401870:	4b81      	ldr	r3, [pc, #516]	; (401a78 <UDP_Handler+0x270>)
  401872:	781b      	ldrb	r3, [r3, #0]
  401874:	b11b      	cbz	r3, 40187e <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401876:	4b81      	ldr	r3, [pc, #516]	; (401a7c <UDP_Handler+0x274>)
  401878:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  40187a:	4b81      	ldr	r3, [pc, #516]	; (401a80 <UDP_Handler+0x278>)
  40187c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40187e:	4b7a      	ldr	r3, [pc, #488]	; (401a68 <UDP_Handler+0x260>)
  401880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401882:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401886:	2b08      	cmp	r3, #8
  401888:	d01c      	beq.n	4018c4 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  40188a:	4a77      	ldr	r2, [pc, #476]	; (401a68 <UDP_Handler+0x260>)
  40188c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40188e:	9302      	str	r3, [sp, #8]
  401890:	9b02      	ldr	r3, [sp, #8]
  401892:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401896:	9302      	str	r3, [sp, #8]
  401898:	9b02      	ldr	r3, [sp, #8]
  40189a:	f023 0304 	bic.w	r3, r3, #4
  40189e:	9302      	str	r3, [sp, #8]
  4018a0:	9b02      	ldr	r3, [sp, #8]
  4018a2:	6313      	str	r3, [r2, #48]	; 0x30
  4018a4:	2300      	movs	r3, #0
  4018a6:	9303      	str	r3, [sp, #12]
  4018a8:	9b03      	ldr	r3, [sp, #12]
  4018aa:	2b13      	cmp	r3, #19
  4018ac:	d806      	bhi.n	4018bc <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4018ae:	bf00      	nop
  4018b0:	9b03      	ldr	r3, [sp, #12]
  4018b2:	3301      	adds	r3, #1
  4018b4:	9303      	str	r3, [sp, #12]
  4018b6:	9b03      	ldr	r3, [sp, #12]
  4018b8:	2b13      	cmp	r3, #19
  4018ba:	d9f8      	bls.n	4018ae <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  4018bc:	4b71      	ldr	r3, [pc, #452]	; (401a84 <UDP_Handler+0x27c>)
  4018be:	4798      	blx	r3
  4018c0:	f000 bd09 	b.w	4022d6 <UDP_Handler+0xace>
  4018c4:	4b70      	ldr	r3, [pc, #448]	; (401a88 <UDP_Handler+0x280>)
  4018c6:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  4018ca:	4967      	ldr	r1, [pc, #412]	; (401a68 <UDP_Handler+0x260>)
  4018cc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4018ce:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  4018d2:	4283      	cmp	r3, r0
  4018d4:	d1fa      	bne.n	4018cc <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  4018d6:	4b6d      	ldr	r3, [pc, #436]	; (401a8c <UDP_Handler+0x284>)
  4018d8:	4798      	blx	r3
  4018da:	b9e0      	cbnz	r0, 401916 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  4018dc:	4a62      	ldr	r2, [pc, #392]	; (401a68 <UDP_Handler+0x260>)
  4018de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018e0:	9304      	str	r3, [sp, #16]
  4018e2:	9b04      	ldr	r3, [sp, #16]
  4018e4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018e8:	9304      	str	r3, [sp, #16]
  4018ea:	9b04      	ldr	r3, [sp, #16]
  4018ec:	f023 0304 	bic.w	r3, r3, #4
  4018f0:	9304      	str	r3, [sp, #16]
  4018f2:	9b04      	ldr	r3, [sp, #16]
  4018f4:	6313      	str	r3, [r2, #48]	; 0x30
  4018f6:	2300      	movs	r3, #0
  4018f8:	9305      	str	r3, [sp, #20]
  4018fa:	9b05      	ldr	r3, [sp, #20]
  4018fc:	2b13      	cmp	r3, #19
  4018fe:	d806      	bhi.n	40190e <UDP_Handler+0x106>
  401900:	bf00      	nop
  401902:	9b05      	ldr	r3, [sp, #20]
  401904:	3301      	adds	r3, #1
  401906:	9305      	str	r3, [sp, #20]
  401908:	9b05      	ldr	r3, [sp, #20]
  40190a:	2b13      	cmp	r3, #19
  40190c:	d9f8      	bls.n	401900 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  40190e:	4b5d      	ldr	r3, [pc, #372]	; (401a84 <UDP_Handler+0x27c>)
  401910:	4798      	blx	r3
  401912:	f000 bce0 	b.w	4022d6 <UDP_Handler+0xace>
		return;
	}

	if (Udd_setup_is_in()) {
  401916:	4b5e      	ldr	r3, [pc, #376]	; (401a90 <UDP_Handler+0x288>)
  401918:	f993 3000 	ldrsb.w	r3, [r3]
  40191c:	2b00      	cmp	r3, #0
  40191e:	da3d      	bge.n	40199c <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401920:	4a51      	ldr	r2, [pc, #324]	; (401a68 <UDP_Handler+0x260>)
  401922:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401924:	9306      	str	r3, [sp, #24]
  401926:	9b06      	ldr	r3, [sp, #24]
  401928:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40192c:	9306      	str	r3, [sp, #24]
  40192e:	9b06      	ldr	r3, [sp, #24]
  401930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401934:	9306      	str	r3, [sp, #24]
  401936:	9b06      	ldr	r3, [sp, #24]
  401938:	6313      	str	r3, [r2, #48]	; 0x30
  40193a:	2300      	movs	r3, #0
  40193c:	9307      	str	r3, [sp, #28]
  40193e:	9b07      	ldr	r3, [sp, #28]
  401940:	2b13      	cmp	r3, #19
  401942:	d806      	bhi.n	401952 <UDP_Handler+0x14a>
  401944:	bf00      	nop
  401946:	9b07      	ldr	r3, [sp, #28]
  401948:	3301      	adds	r3, #1
  40194a:	9307      	str	r3, [sp, #28]
  40194c:	9b07      	ldr	r3, [sp, #28]
  40194e:	2b13      	cmp	r3, #19
  401950:	d9f8      	bls.n	401944 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  401952:	4a45      	ldr	r2, [pc, #276]	; (401a68 <UDP_Handler+0x260>)
  401954:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401956:	9308      	str	r3, [sp, #32]
  401958:	9b08      	ldr	r3, [sp, #32]
  40195a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40195e:	9308      	str	r3, [sp, #32]
  401960:	9b08      	ldr	r3, [sp, #32]
  401962:	f023 0304 	bic.w	r3, r3, #4
  401966:	9308      	str	r3, [sp, #32]
  401968:	9b08      	ldr	r3, [sp, #32]
  40196a:	6313      	str	r3, [r2, #48]	; 0x30
  40196c:	2300      	movs	r3, #0
  40196e:	9309      	str	r3, [sp, #36]	; 0x24
  401970:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401972:	2b13      	cmp	r3, #19
  401974:	d806      	bhi.n	401984 <UDP_Handler+0x17c>
  401976:	bf00      	nop
  401978:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40197a:	3301      	adds	r3, #1
  40197c:	9309      	str	r3, [sp, #36]	; 0x24
  40197e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401980:	2b13      	cmp	r3, #19
  401982:	d9f8      	bls.n	401976 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401984:	2300      	movs	r3, #0
  401986:	4a43      	ldr	r2, [pc, #268]	; (401a94 <UDP_Handler+0x28c>)
  401988:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40198a:	4a43      	ldr	r2, [pc, #268]	; (401a98 <UDP_Handler+0x290>)
  40198c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40198e:	2202      	movs	r2, #2
  401990:	4b39      	ldr	r3, [pc, #228]	; (401a78 <UDP_Handler+0x270>)
  401992:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401994:	4b41      	ldr	r3, [pc, #260]	; (401a9c <UDP_Handler+0x294>)
  401996:	4798      	blx	r3
  401998:	f000 bc9d 	b.w	4022d6 <UDP_Handler+0xace>
	} else {
		udd_ack_setup_received(0);
  40199c:	4a32      	ldr	r2, [pc, #200]	; (401a68 <UDP_Handler+0x260>)
  40199e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019a0:	930a      	str	r3, [sp, #40]	; 0x28
  4019a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019a4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019a8:	930a      	str	r3, [sp, #40]	; 0x28
  4019aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019ac:	f023 0304 	bic.w	r3, r3, #4
  4019b0:	930a      	str	r3, [sp, #40]	; 0x28
  4019b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019b4:	6313      	str	r3, [r2, #48]	; 0x30
  4019b6:	2300      	movs	r3, #0
  4019b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4019ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4019bc:	2b13      	cmp	r3, #19
  4019be:	d806      	bhi.n	4019ce <UDP_Handler+0x1c6>
  4019c0:	bf00      	nop
  4019c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4019c4:	3301      	adds	r3, #1
  4019c6:	930b      	str	r3, [sp, #44]	; 0x2c
  4019c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4019ca:	2b13      	cmp	r3, #19
  4019cc:	d9f8      	bls.n	4019c0 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4019ce:	4b30      	ldr	r3, [pc, #192]	; (401a90 <UDP_Handler+0x288>)
  4019d0:	88db      	ldrh	r3, [r3, #6]
  4019d2:	b91b      	cbnz	r3, 4019dc <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  4019d4:	4b32      	ldr	r3, [pc, #200]	; (401aa0 <UDP_Handler+0x298>)
  4019d6:	4798      	blx	r3
  4019d8:	f000 bc7d 	b.w	4022d6 <UDP_Handler+0xace>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4019dc:	2300      	movs	r3, #0
  4019de:	4a2d      	ldr	r2, [pc, #180]	; (401a94 <UDP_Handler+0x28c>)
  4019e0:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4019e2:	4a2d      	ldr	r2, [pc, #180]	; (401a98 <UDP_Handler+0x290>)
  4019e4:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4019e6:	2201      	movs	r2, #1
  4019e8:	4b23      	ldr	r3, [pc, #140]	; (401a78 <UDP_Handler+0x270>)
  4019ea:	701a      	strb	r2, [r3, #0]
  4019ec:	f000 bc73 	b.w	4022d6 <UDP_Handler+0xace>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  4019f0:	4b1d      	ldr	r3, [pc, #116]	; (401a68 <UDP_Handler+0x260>)
  4019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019f4:	f013 0f01 	tst.w	r3, #1
  4019f8:	d003      	beq.n	401a02 <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  4019fa:	4b28      	ldr	r3, [pc, #160]	; (401a9c <UDP_Handler+0x294>)
  4019fc:	4798      	blx	r3
  4019fe:	f000 bc6a 	b.w	4022d6 <UDP_Handler+0xace>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  401a02:	4b19      	ldr	r3, [pc, #100]	; (401a68 <UDP_Handler+0x260>)
  401a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a06:	f013 0f02 	tst.w	r3, #2
  401a0a:	f000 8118 	beq.w	401c3e <UDP_Handler+0x436>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401a0e:	4b1a      	ldr	r3, [pc, #104]	; (401a78 <UDP_Handler+0x270>)
  401a10:	781b      	ldrb	r3, [r3, #0]
  401a12:	2b01      	cmp	r3, #1
  401a14:	d046      	beq.n	401aa4 <UDP_Handler+0x29c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401a16:	2b02      	cmp	r3, #2
  401a18:	d001      	beq.n	401a1e <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401a1a:	2b04      	cmp	r3, #4
  401a1c:	d102      	bne.n	401a24 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  401a1e:	4b17      	ldr	r3, [pc, #92]	; (401a7c <UDP_Handler+0x274>)
  401a20:	4798      	blx	r3
  401a22:	e001      	b.n	401a28 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  401a24:	4b17      	ldr	r3, [pc, #92]	; (401a84 <UDP_Handler+0x27c>)
  401a26:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  401a28:	4a0f      	ldr	r2, [pc, #60]	; (401a68 <UDP_Handler+0x260>)
  401a2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a2c:	930c      	str	r3, [sp, #48]	; 0x30
  401a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a30:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a34:	930c      	str	r3, [sp, #48]	; 0x30
  401a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a38:	f023 0302 	bic.w	r3, r3, #2
  401a3c:	930c      	str	r3, [sp, #48]	; 0x30
  401a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a40:	6313      	str	r3, [r2, #48]	; 0x30
  401a42:	2300      	movs	r3, #0
  401a44:	930d      	str	r3, [sp, #52]	; 0x34
  401a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a48:	2b13      	cmp	r3, #19
  401a4a:	d806      	bhi.n	401a5a <UDP_Handler+0x252>
  401a4c:	bf00      	nop
  401a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a50:	3301      	adds	r3, #1
  401a52:	930d      	str	r3, [sp, #52]	; 0x34
  401a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a56:	2b13      	cmp	r3, #19
  401a58:	d9f8      	bls.n	401a4c <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401a5a:	4b09      	ldr	r3, [pc, #36]	; (401a80 <UDP_Handler+0x278>)
  401a5c:	4798      	blx	r3
  401a5e:	f000 bc3a 	b.w	4022d6 <UDP_Handler+0xace>
  401a62:	bf00      	nop
  401a64:	004011b5 	.word	0x004011b5
  401a68:	40034000 	.word	0x40034000
  401a6c:	200000a0 	.word	0x200000a0
  401a70:	004010d9 	.word	0x004010d9
  401a74:	0040099d 	.word	0x0040099d
  401a78:	200006f8 	.word	0x200006f8
  401a7c:	0040126d 	.word	0x0040126d
  401a80:	004011c5 	.word	0x004011c5
  401a84:	004011dd 	.word	0x004011dd
  401a88:	20000707 	.word	0x20000707
  401a8c:	004009d9 	.word	0x004009d9
  401a90:	20000708 	.word	0x20000708
  401a94:	200006b6 	.word	0x200006b6
  401a98:	200006f6 	.word	0x200006f6
  401a9c:	0040127d 	.word	0x0040127d
  401aa0:	00401225 	.word	0x00401225
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401aa4:	4b92      	ldr	r3, [pc, #584]	; (401cf0 <UDP_Handler+0x4e8>)
  401aa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401aa8:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401aac:	4b91      	ldr	r3, [pc, #580]	; (401cf4 <UDP_Handler+0x4ec>)
  401aae:	899b      	ldrh	r3, [r3, #12]
  401ab0:	4a91      	ldr	r2, [pc, #580]	; (401cf8 <UDP_Handler+0x4f0>)
  401ab2:	8815      	ldrh	r5, [r2, #0]
  401ab4:	186a      	adds	r2, r5, r1
  401ab6:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401ab8:	bfae      	itee	ge
  401aba:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  401abc:	1b5b      	sublt	r3, r3, r5
  401abe:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401ac0:	4b8c      	ldr	r3, [pc, #560]	; (401cf4 <UDP_Handler+0x4ec>)
  401ac2:	6898      	ldr	r0, [r3, #8]
  401ac4:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401ac6:	b1a9      	cbz	r1, 401af4 <UDP_Handler+0x2ec>
  401ac8:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401aca:	4c89      	ldr	r4, [pc, #548]	; (401cf0 <UDP_Handler+0x4e8>)
  401acc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401ace:	f802 3b01 	strb.w	r3, [r2], #1
  401ad2:	1a13      	subs	r3, r2, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401ad4:	b2db      	uxtb	r3, r3
  401ad6:	428b      	cmp	r3, r1
  401ad8:	d3f8      	bcc.n	401acc <UDP_Handler+0x2c4>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401ada:	440d      	add	r5, r1
  401adc:	b2ad      	uxth	r5, r5
  401ade:	4b86      	ldr	r3, [pc, #536]	; (401cf8 <UDP_Handler+0x4f0>)
  401ae0:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401ae2:	2940      	cmp	r1, #64	; 0x40
  401ae4:	d106      	bne.n	401af4 <UDP_Handler+0x2ec>
			|| (udd_g_ctrlreq.req.wLength <=
  401ae6:	4b83      	ldr	r3, [pc, #524]	; (401cf4 <UDP_Handler+0x4ec>)
  401ae8:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401aea:	4b84      	ldr	r3, [pc, #528]	; (401cfc <UDP_Handler+0x4f4>)
  401aec:	881b      	ldrh	r3, [r3, #0]
  401aee:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  401af0:	429a      	cmp	r2, r3
  401af2:	dc3e      	bgt.n	401b72 <UDP_Handler+0x36a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401af4:	4b7f      	ldr	r3, [pc, #508]	; (401cf4 <UDP_Handler+0x4ec>)
  401af6:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401af8:	695b      	ldr	r3, [r3, #20]
  401afa:	b1f3      	cbz	r3, 401b3a <UDP_Handler+0x332>
			if (!udd_g_ctrlreq.over_under_run()) {
  401afc:	4798      	blx	r3
  401afe:	b9e0      	cbnz	r0, 401b3a <UDP_Handler+0x332>
				// Stall ZLP
				udd_ctrl_stall_data();
  401b00:	4b7f      	ldr	r3, [pc, #508]	; (401d00 <UDP_Handler+0x4f8>)
  401b02:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  401b04:	4a7a      	ldr	r2, [pc, #488]	; (401cf0 <UDP_Handler+0x4e8>)
  401b06:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b08:	930e      	str	r3, [sp, #56]	; 0x38
  401b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b0c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b10:	930e      	str	r3, [sp, #56]	; 0x38
  401b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b14:	f023 0302 	bic.w	r3, r3, #2
  401b18:	930e      	str	r3, [sp, #56]	; 0x38
  401b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b1c:	6313      	str	r3, [r2, #48]	; 0x30
  401b1e:	2300      	movs	r3, #0
  401b20:	930f      	str	r3, [sp, #60]	; 0x3c
  401b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b24:	2b13      	cmp	r3, #19
  401b26:	f200 83d6 	bhi.w	4022d6 <UDP_Handler+0xace>
  401b2a:	bf00      	nop
  401b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b2e:	3301      	adds	r3, #1
  401b30:	930f      	str	r3, [sp, #60]	; 0x3c
  401b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b34:	2b13      	cmp	r3, #19
  401b36:	d9f8      	bls.n	401b2a <UDP_Handler+0x322>
  401b38:	e3cd      	b.n	4022d6 <UDP_Handler+0xace>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  401b3a:	4a6d      	ldr	r2, [pc, #436]	; (401cf0 <UDP_Handler+0x4e8>)
  401b3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b3e:	9310      	str	r3, [sp, #64]	; 0x40
  401b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401b42:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b46:	9310      	str	r3, [sp, #64]	; 0x40
  401b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401b4a:	f023 0302 	bic.w	r3, r3, #2
  401b4e:	9310      	str	r3, [sp, #64]	; 0x40
  401b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401b52:	6313      	str	r3, [r2, #48]	; 0x30
  401b54:	2300      	movs	r3, #0
  401b56:	9311      	str	r3, [sp, #68]	; 0x44
  401b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b5a:	2b13      	cmp	r3, #19
  401b5c:	d806      	bhi.n	401b6c <UDP_Handler+0x364>
  401b5e:	bf00      	nop
  401b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b62:	3301      	adds	r3, #1
  401b64:	9311      	str	r3, [sp, #68]	; 0x44
  401b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b68:	2b13      	cmp	r3, #19
  401b6a:	d9f8      	bls.n	401b5e <UDP_Handler+0x356>
		udd_ctrl_send_zlp_in();
  401b6c:	4b65      	ldr	r3, [pc, #404]	; (401d04 <UDP_Handler+0x4fc>)
  401b6e:	4798      	blx	r3
  401b70:	e3b1      	b.n	4022d6 <UDP_Handler+0xace>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401b72:	4b60      	ldr	r3, [pc, #384]	; (401cf4 <UDP_Handler+0x4ec>)
  401b74:	899b      	ldrh	r3, [r3, #12]
  401b76:	42ab      	cmp	r3, r5
  401b78:	d146      	bne.n	401c08 <UDP_Handler+0x400>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  401b7a:	4b5e      	ldr	r3, [pc, #376]	; (401cf4 <UDP_Handler+0x4ec>)
  401b7c:	695b      	ldr	r3, [r3, #20]
  401b7e:	b9e3      	cbnz	r3, 401bba <UDP_Handler+0x3b2>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  401b80:	4b5f      	ldr	r3, [pc, #380]	; (401d00 <UDP_Handler+0x4f8>)
  401b82:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401b84:	4a5a      	ldr	r2, [pc, #360]	; (401cf0 <UDP_Handler+0x4e8>)
  401b86:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b88:	9312      	str	r3, [sp, #72]	; 0x48
  401b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b8c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b90:	9312      	str	r3, [sp, #72]	; 0x48
  401b92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b94:	f023 0302 	bic.w	r3, r3, #2
  401b98:	9312      	str	r3, [sp, #72]	; 0x48
  401b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401b9c:	6313      	str	r3, [r2, #48]	; 0x30
  401b9e:	2300      	movs	r3, #0
  401ba0:	9313      	str	r3, [sp, #76]	; 0x4c
  401ba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401ba4:	2b13      	cmp	r3, #19
  401ba6:	f200 8396 	bhi.w	4022d6 <UDP_Handler+0xace>
  401baa:	bf00      	nop
  401bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401bae:	3301      	adds	r3, #1
  401bb0:	9313      	str	r3, [sp, #76]	; 0x4c
  401bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401bb4:	2b13      	cmp	r3, #19
  401bb6:	d9f8      	bls.n	401baa <UDP_Handler+0x3a2>
  401bb8:	e38d      	b.n	4022d6 <UDP_Handler+0xace>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  401bba:	4798      	blx	r3
  401bbc:	b9e0      	cbnz	r0, 401bf8 <UDP_Handler+0x3f0>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  401bbe:	4b50      	ldr	r3, [pc, #320]	; (401d00 <UDP_Handler+0x4f8>)
  401bc0:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401bc2:	4a4b      	ldr	r2, [pc, #300]	; (401cf0 <UDP_Handler+0x4e8>)
  401bc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401bc6:	9314      	str	r3, [sp, #80]	; 0x50
  401bc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401bca:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bce:	9314      	str	r3, [sp, #80]	; 0x50
  401bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401bd2:	f023 0302 	bic.w	r3, r3, #2
  401bd6:	9314      	str	r3, [sp, #80]	; 0x50
  401bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401bda:	6313      	str	r3, [r2, #48]	; 0x30
  401bdc:	2300      	movs	r3, #0
  401bde:	9315      	str	r3, [sp, #84]	; 0x54
  401be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401be2:	2b13      	cmp	r3, #19
  401be4:	f200 8377 	bhi.w	4022d6 <UDP_Handler+0xace>
  401be8:	bf00      	nop
  401bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401bec:	3301      	adds	r3, #1
  401bee:	9315      	str	r3, [sp, #84]	; 0x54
  401bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401bf2:	2b13      	cmp	r3, #19
  401bf4:	d9f8      	bls.n	401be8 <UDP_Handler+0x3e0>
  401bf6:	e36e      	b.n	4022d6 <UDP_Handler+0xace>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401bf8:	4940      	ldr	r1, [pc, #256]	; (401cfc <UDP_Handler+0x4f4>)
  401bfa:	4a3f      	ldr	r2, [pc, #252]	; (401cf8 <UDP_Handler+0x4f0>)
  401bfc:	8810      	ldrh	r0, [r2, #0]
  401bfe:	880b      	ldrh	r3, [r1, #0]
  401c00:	4403      	add	r3, r0
  401c02:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  401c04:	2300      	movs	r3, #0
  401c06:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  401c08:	4a39      	ldr	r2, [pc, #228]	; (401cf0 <UDP_Handler+0x4e8>)
  401c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c0c:	9316      	str	r3, [sp, #88]	; 0x58
  401c0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c10:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c14:	9316      	str	r3, [sp, #88]	; 0x58
  401c16:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c18:	f023 0302 	bic.w	r3, r3, #2
  401c1c:	9316      	str	r3, [sp, #88]	; 0x58
  401c1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401c20:	6313      	str	r3, [r2, #48]	; 0x30
  401c22:	2300      	movs	r3, #0
  401c24:	9317      	str	r3, [sp, #92]	; 0x5c
  401c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401c28:	2b13      	cmp	r3, #19
  401c2a:	f200 8354 	bhi.w	4022d6 <UDP_Handler+0xace>
  401c2e:	bf00      	nop
  401c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401c32:	3301      	adds	r3, #1
  401c34:	9317      	str	r3, [sp, #92]	; 0x5c
  401c36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401c38:	2b13      	cmp	r3, #19
  401c3a:	d9f8      	bls.n	401c2e <UDP_Handler+0x426>
  401c3c:	e34b      	b.n	4022d6 <UDP_Handler+0xace>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  401c3e:	4b2c      	ldr	r3, [pc, #176]	; (401cf0 <UDP_Handler+0x4e8>)
  401c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c42:	f013 0f08 	tst.w	r3, #8
  401c46:	d106      	bne.n	401c56 <UDP_Handler+0x44e>
  401c48:	4f2f      	ldr	r7, [pc, #188]	; (401d08 <UDP_Handler+0x500>)
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401c4a:	4639      	mov	r1, r7
  401c4c:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401c4e:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 401cf0 <UDP_Handler+0x4e8>
  401c52:	4618      	mov	r0, r3
  401c54:	e01a      	b.n	401c8c <UDP_Handler+0x484>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  401c56:	4a26      	ldr	r2, [pc, #152]	; (401cf0 <UDP_Handler+0x4e8>)
  401c58:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c5a:	9300      	str	r3, [sp, #0]
  401c5c:	9b00      	ldr	r3, [sp, #0]
  401c5e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c62:	9300      	str	r3, [sp, #0]
  401c64:	9b00      	ldr	r3, [sp, #0]
  401c66:	f023 0308 	bic.w	r3, r3, #8
  401c6a:	9300      	str	r3, [sp, #0]
  401c6c:	9b00      	ldr	r3, [sp, #0]
  401c6e:	6313      	str	r3, [r2, #48]	; 0x30
  401c70:	2300      	movs	r3, #0
  401c72:	9301      	str	r3, [sp, #4]
  401c74:	9b01      	ldr	r3, [sp, #4]
  401c76:	2b13      	cmp	r3, #19
  401c78:	f200 832d 	bhi.w	4022d6 <UDP_Handler+0xace>
  401c7c:	bf00      	nop
  401c7e:	9b01      	ldr	r3, [sp, #4]
  401c80:	3301      	adds	r3, #1
  401c82:	9301      	str	r3, [sp, #4]
  401c84:	9b01      	ldr	r3, [sp, #4]
  401c86:	2b13      	cmp	r3, #19
  401c88:	d9f8      	bls.n	401c7c <UDP_Handler+0x474>
  401c8a:	e324      	b.n	4022d6 <UDP_Handler+0xace>
  401c8c:	b2de      	uxtb	r6, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401c8e:	f8de 2018 	ldr.w	r2, [lr, #24]
  401c92:	461d      	mov	r5, r3
  401c94:	fa00 f403 	lsl.w	r4, r0, r3
  401c98:	4214      	tst	r4, r2
  401c9a:	f000 8220 	beq.w	4020de <UDP_Handler+0x8d6>
  401c9e:	f103 38ff 	add.w	r8, r3, #4294967295
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  401ca2:	4689      	mov	r9, r1
  401ca4:	009a      	lsls	r2, r3, #2
  401ca6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401caa:	f502 3240 	add.w	r2, r2, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  401cae:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  401cb2:	f01c 0f42 	tst.w	ip, #66	; 0x42
  401cb6:	d052      	beq.n	401d5e <UDP_Handler+0x556>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401cb8:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  401cbc:	4a12      	ldr	r2, [pc, #72]	; (401d08 <UDP_Handler+0x500>)
  401cbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401cc2:	689a      	ldr	r2, [r3, #8]
  401cc4:	68d9      	ldr	r1, [r3, #12]
	uint32_t pkt_size = ptr_job->size;
  401cc6:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  401cca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401cce:	685b      	ldr	r3, [r3, #4]
  401cd0:	00ad      	lsls	r5, r5, #2
  401cd2:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  401cd6:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  401cda:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401cdc:	f3c7 470a 	ubfx	r7, r7, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  401ce0:	2f00      	cmp	r7, #0
  401ce2:	f000 82ed 	beq.w	4022c0 <UDP_Handler+0xab8>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401ce6:	1a50      	subs	r0, r2, r1
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  401ce8:	42b8      	cmp	r0, r7
  401cea:	f240 82dd 	bls.w	4022a8 <UDP_Handler+0xaa0>
  401cee:	e2cc      	b.n	40228a <UDP_Handler+0xa82>
  401cf0:	40034000 	.word	0x40034000
  401cf4:	20000708 	.word	0x20000708
  401cf8:	200006f6 	.word	0x200006f6
  401cfc:	200006b6 	.word	0x200006b6
  401d00:	004011dd 	.word	0x004011dd
  401d04:	00401225 	.word	0x00401225
  401d08:	200006b8 	.word	0x200006b8
			nb_data = nb_remain;
			b_full = true;
  401d0c:	f04f 0b01 	mov.w	fp, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401d10:	4419      	add	r1, r3
  401d12:	460b      	mov	r3, r1
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401d14:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401d16:	f803 2b01 	strb.w	r2, [r3], #1
  401d1a:	1a5a      	subs	r2, r3, r1
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401d1c:	4290      	cmp	r0, r2
  401d1e:	d8f9      	bhi.n	401d14 <UDP_Handler+0x50c>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401d20:	4630      	mov	r0, r6
  401d22:	4ba5      	ldr	r3, [pc, #660]	; (401fb8 <UDP_Handler+0x7b0>)
  401d24:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401d26:	f1bb 0f00 	cmp.w	fp, #0
  401d2a:	d102      	bne.n	401d32 <UDP_Handler+0x52a>
  401d2c:	45ba      	cmp	sl, r7
  401d2e:	f240 82d2 	bls.w	4022d6 <UDP_Handler+0xace>
			!Is_udd_endpoint_stall_requested(ep)) {
  401d32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401d34:	f013 0f20 	tst.w	r3, #32
  401d38:	f040 82cd 	bne.w	4022d6 <UDP_Handler+0xace>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  401d3c:	4b9f      	ldr	r3, [pc, #636]	; (401fbc <UDP_Handler+0x7b4>)
  401d3e:	615c      	str	r4, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401d40:	4b9f      	ldr	r3, [pc, #636]	; (401fc0 <UDP_Handler+0x7b8>)
  401d42:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401d46:	eb02 0108 	add.w	r1, r2, r8
  401d4a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401d4e:	68cb      	ldr	r3, [r1, #12]
  401d50:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401d52:	4648      	mov	r0, r9
  401d54:	2100      	movs	r1, #0
  401d56:	4632      	mov	r2, r6
  401d58:	4b9a      	ldr	r3, [pc, #616]	; (401fc4 <UDP_Handler+0x7bc>)
  401d5a:	4798      	blx	r3
  401d5c:	e2bb      	b.n	4022d6 <UDP_Handler+0xace>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  401d5e:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  401d62:	f01c 0f01 	tst.w	ip, #1
  401d66:	f000 8190 	beq.w	40208a <UDP_Handler+0x882>

			ptr_job->bank--;
  401d6a:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401d6e:	4b94      	ldr	r3, [pc, #592]	; (401fc0 <UDP_Handler+0x7b8>)
  401d70:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401d74:	7c53      	ldrb	r3, [r2, #17]
  401d76:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401d7a:	3103      	adds	r1, #3
  401d7c:	f361 0383 	bfi	r3, r1, #2, #2
  401d80:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401d82:	7c53      	ldrb	r3, [r2, #17]
  401d84:	f013 0f20 	tst.w	r3, #32
  401d88:	d078      	beq.n	401e7c <UDP_Handler+0x674>
				if (ptr_job->bank) {
  401d8a:	f013 0f0c 	tst.w	r3, #12
  401d8e:	d036      	beq.n	401dfe <UDP_Handler+0x5f6>
  401d90:	00aa      	lsls	r2, r5, #2
  401d92:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401d96:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  401d9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d9c:	9318      	str	r3, [sp, #96]	; 0x60
  401d9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401da0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401da4:	9318      	str	r3, [sp, #96]	; 0x60
  401da6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401da8:	f043 0310 	orr.w	r3, r3, #16
  401dac:	9318      	str	r3, [sp, #96]	; 0x60
  401dae:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401db0:	6313      	str	r3, [r2, #48]	; 0x30
  401db2:	2300      	movs	r3, #0
  401db4:	9319      	str	r3, [sp, #100]	; 0x64
  401db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401db8:	2b13      	cmp	r3, #19
  401dba:	d806      	bhi.n	401dca <UDP_Handler+0x5c2>
  401dbc:	bf00      	nop
  401dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401dc0:	3301      	adds	r3, #1
  401dc2:	9319      	str	r3, [sp, #100]	; 0x64
  401dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401dc6:	2b13      	cmp	r3, #19
  401dc8:	d9f8      	bls.n	401dbc <UDP_Handler+0x5b4>
					udd_ack_in_sent(ep);
  401dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dcc:	931a      	str	r3, [sp, #104]	; 0x68
  401dce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401dd0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401dd4:	931a      	str	r3, [sp, #104]	; 0x68
  401dd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401dd8:	f023 0301 	bic.w	r3, r3, #1
  401ddc:	931a      	str	r3, [sp, #104]	; 0x68
  401dde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401de0:	6313      	str	r3, [r2, #48]	; 0x30
  401de2:	2300      	movs	r3, #0
  401de4:	931b      	str	r3, [sp, #108]	; 0x6c
  401de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401de8:	2b13      	cmp	r3, #19
  401dea:	f200 8274 	bhi.w	4022d6 <UDP_Handler+0xace>
  401dee:	bf00      	nop
  401df0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401df2:	3301      	adds	r3, #1
  401df4:	931b      	str	r3, [sp, #108]	; 0x6c
  401df6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401df8:	2b13      	cmp	r3, #19
  401dfa:	d9f8      	bls.n	401dee <UDP_Handler+0x5e6>
  401dfc:	e26b      	b.n	4022d6 <UDP_Handler+0xace>
  401dfe:	00aa      	lsls	r2, r5, #2
  401e00:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401e04:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401e08:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e0a:	931c      	str	r3, [sp, #112]	; 0x70
  401e0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401e0e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e12:	931c      	str	r3, [sp, #112]	; 0x70
  401e14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401e16:	f023 0301 	bic.w	r3, r3, #1
  401e1a:	931c      	str	r3, [sp, #112]	; 0x70
  401e1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401e1e:	6313      	str	r3, [r2, #48]	; 0x30
  401e20:	2300      	movs	r3, #0
  401e22:	931d      	str	r3, [sp, #116]	; 0x74
  401e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401e26:	2b13      	cmp	r3, #19
  401e28:	d806      	bhi.n	401e38 <UDP_Handler+0x630>
  401e2a:	bf00      	nop
  401e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401e2e:	3301      	adds	r3, #1
  401e30:	931d      	str	r3, [sp, #116]	; 0x74
  401e32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401e34:	2b13      	cmp	r3, #19
  401e36:	d9f8      	bls.n	401e2a <UDP_Handler+0x622>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401e38:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e3a:	931e      	str	r3, [sp, #120]	; 0x78
  401e3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401e3e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e42:	931e      	str	r3, [sp, #120]	; 0x78
  401e44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401e46:	f043 0320 	orr.w	r3, r3, #32
  401e4a:	931e      	str	r3, [sp, #120]	; 0x78
  401e4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401e4e:	6313      	str	r3, [r2, #48]	; 0x30
  401e50:	2300      	movs	r3, #0
  401e52:	931f      	str	r3, [sp, #124]	; 0x7c
  401e54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401e56:	2b13      	cmp	r3, #19
  401e58:	d806      	bhi.n	401e68 <UDP_Handler+0x660>
  401e5a:	bf00      	nop
  401e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401e5e:	3301      	adds	r3, #1
  401e60:	931f      	str	r3, [sp, #124]	; 0x7c
  401e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401e64:	2b13      	cmp	r3, #19
  401e66:	d9f8      	bls.n	401e5a <UDP_Handler+0x652>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401e68:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  401e6c:	4b54      	ldr	r3, [pc, #336]	; (401fc0 <UDP_Handler+0x7b8>)
  401e6e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  401e72:	7c5a      	ldrb	r2, [r3, #17]
  401e74:	f36f 1245 	bfc	r2, #5, #1
  401e78:	745a      	strb	r2, [r3, #17]
  401e7a:	e22c      	b.n	4022d6 <UDP_Handler+0xace>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401e7c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401e80:	d00f      	beq.n	401ea2 <UDP_Handler+0x69a>
				ptr_job->b_buf_end = false;
  401e82:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401e86:	4b4e      	ldr	r3, [pc, #312]	; (401fc0 <UDP_Handler+0x7b8>)
  401e88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401e8c:	7c59      	ldrb	r1, [r3, #17]
  401e8e:	f36f 11c7 	bfc	r1, #7, #1
  401e92:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401e94:	68da      	ldr	r2, [r3, #12]
  401e96:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401e98:	4648      	mov	r0, r9
  401e9a:	2100      	movs	r1, #0
  401e9c:	4632      	mov	r2, r6
  401e9e:	4b49      	ldr	r3, [pc, #292]	; (401fc4 <UDP_Handler+0x7bc>)
  401ea0:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401ea2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  401ea6:	4a46      	ldr	r2, [pc, #280]	; (401fc0 <UDP_Handler+0x7b8>)
  401ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401eac:	68da      	ldr	r2, [r3, #12]
  401eae:	689b      	ldr	r3, [r3, #8]
  401eb0:	429a      	cmp	r2, r3
  401eb2:	d338      	bcc.n	401f26 <UDP_Handler+0x71e>
					!ptr_job->b_shortpacket &&
  401eb4:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401eb8:	4b41      	ldr	r3, [pc, #260]	; (401fc0 <UDP_Handler+0x7b8>)
  401eba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ebe:	7c5b      	ldrb	r3, [r3, #17]
  401ec0:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401ec4:	d12f      	bne.n	401f26 <UDP_Handler+0x71e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ec6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401eca:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401ecc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401ed0:	2100      	movs	r1, #0
  401ed2:	4a3d      	ldr	r2, [pc, #244]	; (401fc8 <UDP_Handler+0x7c0>)
  401ed4:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401ed6:	4a39      	ldr	r2, [pc, #228]	; (401fbc <UDP_Handler+0x7b4>)
  401ed8:	6154      	str	r4, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401eda:	b92b      	cbnz	r3, 401ee8 <UDP_Handler+0x6e0>
		cpu_irq_enable();
  401edc:	2201      	movs	r2, #1
  401ede:	4b3a      	ldr	r3, [pc, #232]	; (401fc8 <UDP_Handler+0x7c0>)
  401ee0:	701a      	strb	r2, [r3, #0]
  401ee2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401ee6:	b662      	cpsie	i
  401ee8:	00ab      	lsls	r3, r5, #2
  401eea:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401eee:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ef4:	9220      	str	r2, [sp, #128]	; 0x80
  401ef6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401ef8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401efc:	9220      	str	r2, [sp, #128]	; 0x80
  401efe:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401f00:	f022 0201 	bic.w	r2, r2, #1
  401f04:	9220      	str	r2, [sp, #128]	; 0x80
  401f06:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401f08:	631a      	str	r2, [r3, #48]	; 0x30
  401f0a:	2300      	movs	r3, #0
  401f0c:	9321      	str	r3, [sp, #132]	; 0x84
  401f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401f10:	2b13      	cmp	r3, #19
  401f12:	f200 81e0 	bhi.w	4022d6 <UDP_Handler+0xace>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401f16:	bf00      	nop
  401f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401f1a:	3301      	adds	r3, #1
  401f1c:	9321      	str	r3, [sp, #132]	; 0x84
  401f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401f20:	2b13      	cmp	r3, #19
  401f22:	d9f8      	bls.n	401f16 <UDP_Handler+0x70e>
  401f24:	e1d7      	b.n	4022d6 <UDP_Handler+0xace>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401f26:	2e00      	cmp	r6, #0
  401f28:	f000 808c 	beq.w	402044 <UDP_Handler+0x83c>
  401f2c:	2e03      	cmp	r6, #3
  401f2e:	f000 8089 	beq.w	402044 <UDP_Handler+0x83c>
					&& ptr_job->bank > 0) {
  401f32:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401f36:	4b22      	ldr	r3, [pc, #136]	; (401fc0 <UDP_Handler+0x7b8>)
  401f38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401f3c:	7c5b      	ldrb	r3, [r3, #17]
  401f3e:	f013 0f0c 	tst.w	r3, #12
  401f42:	d045      	beq.n	401fd0 <UDP_Handler+0x7c8>
  401f44:	00aa      	lsls	r2, r5, #2
  401f46:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401f4a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401f4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f50:	9322      	str	r3, [sp, #136]	; 0x88
  401f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401f54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f58:	9322      	str	r3, [sp, #136]	; 0x88
  401f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401f5c:	f043 0310 	orr.w	r3, r3, #16
  401f60:	9322      	str	r3, [sp, #136]	; 0x88
  401f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401f64:	6313      	str	r3, [r2, #48]	; 0x30
  401f66:	2300      	movs	r3, #0
  401f68:	9323      	str	r3, [sp, #140]	; 0x8c
  401f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401f6c:	2b13      	cmp	r3, #19
  401f6e:	d806      	bhi.n	401f7e <UDP_Handler+0x776>
  401f70:	bf00      	nop
  401f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401f74:	3301      	adds	r3, #1
  401f76:	9323      	str	r3, [sp, #140]	; 0x8c
  401f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401f7a:	2b13      	cmp	r3, #19
  401f7c:	d9f8      	bls.n	401f70 <UDP_Handler+0x768>
				udd_ack_in_sent(ep);
  401f7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f80:	9324      	str	r3, [sp, #144]	; 0x90
  401f82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401f84:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f88:	9324      	str	r3, [sp, #144]	; 0x90
  401f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401f8c:	f023 0301 	bic.w	r3, r3, #1
  401f90:	9324      	str	r3, [sp, #144]	; 0x90
  401f92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401f94:	6313      	str	r3, [r2, #48]	; 0x30
  401f96:	2300      	movs	r3, #0
  401f98:	9325      	str	r3, [sp, #148]	; 0x94
  401f9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401f9c:	2b13      	cmp	r3, #19
  401f9e:	d806      	bhi.n	401fae <UDP_Handler+0x7a6>
  401fa0:	bf00      	nop
  401fa2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401fa4:	3301      	adds	r3, #1
  401fa6:	9325      	str	r3, [sp, #148]	; 0x94
  401fa8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401faa:	2b13      	cmp	r3, #19
  401fac:	d9f8      	bls.n	401fa0 <UDP_Handler+0x798>
				udd_ep_in_sent(ep, false);
  401fae:	4630      	mov	r0, r6
  401fb0:	2100      	movs	r1, #0
  401fb2:	4b06      	ldr	r3, [pc, #24]	; (401fcc <UDP_Handler+0x7c4>)
  401fb4:	4798      	blx	r3
  401fb6:	e18e      	b.n	4022d6 <UDP_Handler+0xace>
  401fb8:	004014bd 	.word	0x004014bd
  401fbc:	40034000 	.word	0x40034000
  401fc0:	200006b8 	.word	0x200006b8
  401fc4:	0040147d 	.word	0x0040147d
  401fc8:	200000a0 	.word	0x200000a0
  401fcc:	004015b1 	.word	0x004015b1
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401fd0:	4630      	mov	r0, r6
  401fd2:	2101      	movs	r1, #1
  401fd4:	4b69      	ldr	r3, [pc, #420]	; (40217c <UDP_Handler+0x974>)
  401fd6:	4798      	blx	r3
  401fd8:	b990      	cbnz	r0, 402000 <UDP_Handler+0x7f8>
					ptr_job->b_buf_end = false;
  401fda:	2314      	movs	r3, #20
  401fdc:	4a68      	ldr	r2, [pc, #416]	; (402180 <UDP_Handler+0x978>)
  401fde:	fb03 2808 	mla	r8, r3, r8, r2
  401fe2:	f898 2011 	ldrb.w	r2, [r8, #17]
  401fe6:	f36f 12c7 	bfc	r2, #7, #1
  401fea:	f888 2011 	strb.w	r2, [r8, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
  401ff2:	f8c8 3008 	str.w	r3, [r8, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401ff6:	4648      	mov	r0, r9
  401ff8:	2100      	movs	r1, #0
  401ffa:	4632      	mov	r2, r6
  401ffc:	4b61      	ldr	r3, [pc, #388]	; (402184 <UDP_Handler+0x97c>)
  401ffe:	4798      	blx	r3
  402000:	00ab      	lsls	r3, r5, #2
  402002:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402006:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  40200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40200c:	9226      	str	r2, [sp, #152]	; 0x98
  40200e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402010:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402014:	9226      	str	r2, [sp, #152]	; 0x98
  402016:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402018:	f022 0201 	bic.w	r2, r2, #1
  40201c:	9226      	str	r2, [sp, #152]	; 0x98
  40201e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402020:	631a      	str	r2, [r3, #48]	; 0x30
  402022:	2300      	movs	r3, #0
  402024:	9327      	str	r3, [sp, #156]	; 0x9c
  402026:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402028:	2b13      	cmp	r3, #19
  40202a:	d806      	bhi.n	40203a <UDP_Handler+0x832>
  40202c:	bf00      	nop
  40202e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402030:	3301      	adds	r3, #1
  402032:	9327      	str	r3, [sp, #156]	; 0x9c
  402034:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402036:	2b13      	cmp	r3, #19
  402038:	d9f8      	bls.n	40202c <UDP_Handler+0x824>
				udd_ep_in_sent(ep, false);
  40203a:	4630      	mov	r0, r6
  40203c:	2100      	movs	r1, #0
  40203e:	4b4f      	ldr	r3, [pc, #316]	; (40217c <UDP_Handler+0x974>)
  402040:	4798      	blx	r3
  402042:	e148      	b.n	4022d6 <UDP_Handler+0xace>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  402044:	4630      	mov	r0, r6
  402046:	2101      	movs	r1, #1
  402048:	4b4c      	ldr	r3, [pc, #304]	; (40217c <UDP_Handler+0x974>)
  40204a:	4798      	blx	r3
  40204c:	00ab      	lsls	r3, r5, #2
  40204e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402052:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  402056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402058:	9228      	str	r2, [sp, #160]	; 0xa0
  40205a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40205c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402060:	9228      	str	r2, [sp, #160]	; 0xa0
  402062:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402064:	f022 0201 	bic.w	r2, r2, #1
  402068:	9228      	str	r2, [sp, #160]	; 0xa0
  40206a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40206c:	631a      	str	r2, [r3, #48]	; 0x30
  40206e:	2300      	movs	r3, #0
  402070:	9329      	str	r3, [sp, #164]	; 0xa4
  402072:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402074:	2b13      	cmp	r3, #19
  402076:	f200 812e 	bhi.w	4022d6 <UDP_Handler+0xace>
  40207a:	bf00      	nop
  40207c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40207e:	3301      	adds	r3, #1
  402080:	9329      	str	r3, [sp, #164]	; 0xa4
  402082:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402084:	2b13      	cmp	r3, #19
  402086:	d9f8      	bls.n	40207a <UDP_Handler+0x872>
  402088:	e125      	b.n	4022d6 <UDP_Handler+0xace>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  40208a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40208c:	f012 0f08 	tst.w	r2, #8
  402090:	d025      	beq.n	4020de <UDP_Handler+0x8d6>
  402092:	009b      	lsls	r3, r3, #2
  402094:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402098:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
			udd_ack_stall(ep);
  40209c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40209e:	922a      	str	r2, [sp, #168]	; 0xa8
  4020a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  4020a2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020a6:	922a      	str	r2, [sp, #168]	; 0xa8
  4020a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  4020aa:	f022 0208 	bic.w	r2, r2, #8
  4020ae:	922a      	str	r2, [sp, #168]	; 0xa8
  4020b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  4020b2:	631a      	str	r2, [r3, #48]	; 0x30
  4020b4:	2200      	movs	r2, #0
  4020b6:	922b      	str	r2, [sp, #172]	; 0xac
  4020b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  4020ba:	2a13      	cmp	r2, #19
  4020bc:	d806      	bhi.n	4020cc <UDP_Handler+0x8c4>
  4020be:	bf00      	nop
  4020c0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  4020c2:	3201      	adds	r2, #1
  4020c4:	922b      	str	r2, [sp, #172]	; 0xac
  4020c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  4020c8:	2a13      	cmp	r2, #19
  4020ca:	d9f8      	bls.n	4020be <UDP_Handler+0x8b6>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  4020cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4020d2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  4020d6:	f000 80fe 	beq.w	4022d6 <UDP_Handler+0xace>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  4020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020dc:	e0fb      	b.n	4022d6 <UDP_Handler+0xace>
  4020de:	3301      	adds	r3, #1
  4020e0:	3114      	adds	r1, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4020e2:	2b04      	cmp	r3, #4
  4020e4:	f47f add2 	bne.w	401c8c <UDP_Handler+0x484>
  4020e8:	e0ee      	b.n	4022c8 <UDP_Handler+0xac0>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4020ea:	4b27      	ldr	r3, [pc, #156]	; (402188 <UDP_Handler+0x980>)
  4020ec:	69db      	ldr	r3, [r3, #28]
  4020ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4020f2:	d113      	bne.n	40211c <UDP_Handler+0x914>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4020f4:	4b24      	ldr	r3, [pc, #144]	; (402188 <UDP_Handler+0x980>)
  4020f6:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4020f8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4020fc:	d004      	beq.n	402108 <UDP_Handler+0x900>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4020fe:	4b22      	ldr	r3, [pc, #136]	; (402188 <UDP_Handler+0x980>)
  402100:	69db      	ldr	r3, [r3, #28]
  402102:	f413 7f00 	tst.w	r3, #512	; 0x200
  402106:	d109      	bne.n	40211c <UDP_Handler+0x914>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402108:	4b1f      	ldr	r3, [pc, #124]	; (402188 <UDP_Handler+0x980>)
  40210a:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40210c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402110:	d014      	beq.n	40213c <UDP_Handler+0x934>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402112:	4b1d      	ldr	r3, [pc, #116]	; (402188 <UDP_Handler+0x980>)
  402114:	69db      	ldr	r3, [r3, #28]
  402116:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40211a:	d00f      	beq.n	40213c <UDP_Handler+0x934>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40211c:	4c1a      	ldr	r4, [pc, #104]	; (402188 <UDP_Handler+0x980>)
  40211e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  402122:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  402124:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  402126:	2001      	movs	r0, #1
  402128:	4b18      	ldr	r3, [pc, #96]	; (40218c <UDP_Handler+0x984>)
  40212a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  40212c:	f44f 7380 	mov.w	r3, #256	; 0x100
  402130:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  402132:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  402134:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402138:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  40213a:	e0cc      	b.n	4022d6 <UDP_Handler+0xace>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  40213c:	4b12      	ldr	r3, [pc, #72]	; (402188 <UDP_Handler+0x980>)
  40213e:	699b      	ldr	r3, [r3, #24]
  402140:	f413 7f80 	tst.w	r3, #256	; 0x100
  402144:	d026      	beq.n	402194 <UDP_Handler+0x98c>
  402146:	4b10      	ldr	r3, [pc, #64]	; (402188 <UDP_Handler+0x980>)
  402148:	69db      	ldr	r3, [r3, #28]
  40214a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40214e:	d021      	beq.n	402194 <UDP_Handler+0x98c>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  402150:	4b0d      	ldr	r3, [pc, #52]	; (402188 <UDP_Handler+0x980>)
  402152:	f44f 7280 	mov.w	r2, #256	; 0x100
  402156:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  402158:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  40215a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40215e:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  402160:	f44f 7200 	mov.w	r2, #512	; 0x200
  402164:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  402166:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40216a:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  40216c:	2022      	movs	r0, #34	; 0x22
  40216e:	4b08      	ldr	r3, [pc, #32]	; (402190 <UDP_Handler+0x988>)
  402170:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  402172:	2000      	movs	r0, #0
  402174:	4b05      	ldr	r3, [pc, #20]	; (40218c <UDP_Handler+0x984>)
  402176:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402178:	e0ad      	b.n	4022d6 <UDP_Handler+0xace>
  40217a:	bf00      	nop
  40217c:	004015b1 	.word	0x004015b1
  402180:	200006b8 	.word	0x200006b8
  402184:	0040147d 	.word	0x0040147d
  402188:	40034000 	.word	0x40034000
  40218c:	00401779 	.word	0x00401779
  402190:	0040112d 	.word	0x0040112d
	}
	if (Is_udd_reset()) {
  402194:	4b51      	ldr	r3, [pc, #324]	; (4022dc <UDP_Handler+0xad4>)
  402196:	69db      	ldr	r3, [r3, #28]
  402198:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40219c:	f000 809b 	beq.w	4022d6 <UDP_Handler+0xace>
		// USB bus reset detection
		udd_ack_reset();
  4021a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4021a4:	4b4d      	ldr	r3, [pc, #308]	; (4022dc <UDP_Handler+0xad4>)
  4021a6:	621a      	str	r2, [r3, #32]
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4021a8:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  4021aa:	2601      	movs	r6, #1
  4021ac:	4d4c      	ldr	r5, [pc, #304]	; (4022e0 <UDP_Handler+0xad8>)
  4021ae:	3401      	adds	r4, #1
  4021b0:	b2e4      	uxtb	r4, r4
  4021b2:	4638      	mov	r0, r7
  4021b4:	4631      	mov	r1, r6
  4021b6:	4622      	mov	r2, r4
  4021b8:	47a8      	blx	r5
  4021ba:	3714      	adds	r7, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4021bc:	2c03      	cmp	r4, #3
  4021be:	d1f6      	bne.n	4021ae <UDP_Handler+0x9a6>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4021c0:	4b48      	ldr	r3, [pc, #288]	; (4022e4 <UDP_Handler+0xadc>)
  4021c2:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4021c4:	4b45      	ldr	r3, [pc, #276]	; (4022dc <UDP_Handler+0xad4>)
  4021c6:	685a      	ldr	r2, [r3, #4]
  4021c8:	f022 0201 	bic.w	r2, r2, #1
  4021cc:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  4021ce:	685a      	ldr	r2, [r3, #4]
  4021d0:	f022 0202 	bic.w	r2, r2, #2
  4021d4:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  4021d6:	689a      	ldr	r2, [r3, #8]
  4021d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4021dc:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  4021de:	689a      	ldr	r2, [r3, #8]
  4021e0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4021e4:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  4021e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021e8:	922c      	str	r2, [sp, #176]	; 0xb0
  4021ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4021ec:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4021f0:	922c      	str	r2, [sp, #176]	; 0xb0
  4021f2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4021f4:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4021f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4021fc:	922c      	str	r2, [sp, #176]	; 0xb0
  4021fe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402204:	922c      	str	r2, [sp, #176]	; 0xb0
  402206:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402208:	631a      	str	r2, [r3, #48]	; 0x30
  40220a:	2300      	movs	r3, #0
  40220c:	932d      	str	r3, [sp, #180]	; 0xb4
  40220e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402210:	2b13      	cmp	r3, #19
  402212:	d806      	bhi.n	402222 <UDP_Handler+0xa1a>
  402214:	bf00      	nop
  402216:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402218:	3301      	adds	r3, #1
  40221a:	932d      	str	r3, [sp, #180]	; 0xb4
  40221c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40221e:	2b13      	cmp	r3, #19
  402220:	d9f8      	bls.n	402214 <UDP_Handler+0xa0c>
	udd_enable_endpoint(0);
  402222:	4a2e      	ldr	r2, [pc, #184]	; (4022dc <UDP_Handler+0xad4>)
  402224:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402226:	932e      	str	r3, [sp, #184]	; 0xb8
  402228:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  40222a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40222e:	932e      	str	r3, [sp, #184]	; 0xb8
  402230:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  402232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402236:	932e      	str	r3, [sp, #184]	; 0xb8
  402238:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  40223a:	6313      	str	r3, [r2, #48]	; 0x30
  40223c:	2300      	movs	r3, #0
  40223e:	932f      	str	r3, [sp, #188]	; 0xbc
  402240:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402242:	2b13      	cmp	r3, #19
  402244:	d806      	bhi.n	402254 <UDP_Handler+0xa4c>
  402246:	bf00      	nop
  402248:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40224a:	3301      	adds	r3, #1
  40224c:	932f      	str	r3, [sp, #188]	; 0xbc
  40224e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402250:	2b13      	cmp	r3, #19
  402252:	d9f8      	bls.n	402246 <UDP_Handler+0xa3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402254:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402258:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40225a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40225e:	2100      	movs	r1, #0
  402260:	4a21      	ldr	r2, [pc, #132]	; (4022e8 <UDP_Handler+0xae0>)
  402262:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  402264:	2101      	movs	r1, #1
  402266:	4a1d      	ldr	r2, [pc, #116]	; (4022dc <UDP_Handler+0xad4>)
  402268:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40226a:	b923      	cbnz	r3, 402276 <UDP_Handler+0xa6e>
		cpu_irq_enable();
  40226c:	4b1e      	ldr	r3, [pc, #120]	; (4022e8 <UDP_Handler+0xae0>)
  40226e:	7019      	strb	r1, [r3, #0]
  402270:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402274:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  402276:	4b1d      	ldr	r3, [pc, #116]	; (4022ec <UDP_Handler+0xae4>)
  402278:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  40227a:	4b18      	ldr	r3, [pc, #96]	; (4022dc <UDP_Handler+0xad4>)
  40227c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402280:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402282:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402286:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402288:	e025      	b.n	4022d6 <UDP_Handler+0xace>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  40228a:	eb08 0088 	add.w	r0, r8, r8, lsl #2
  40228e:	4a18      	ldr	r2, [pc, #96]	; (4022f0 <UDP_Handler+0xae8>)
  402290:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  402294:	1878      	adds	r0, r7, r1
  402296:	60d0      	str	r0, [r2, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  402298:	4638      	mov	r0, r7
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  40229a:	f04f 0b00 	mov.w	fp, #0
  40229e:	e537      	b.n	401d10 <UDP_Handler+0x508>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4022a0:	4630      	mov	r0, r6
  4022a2:	4b14      	ldr	r3, [pc, #80]	; (4022f4 <UDP_Handler+0xaec>)
  4022a4:	4798      	blx	r3
  4022a6:	e544      	b.n	401d32 <UDP_Handler+0x52a>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4022a8:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
  4022ac:	f8df e040 	ldr.w	lr, [pc, #64]	; 4022f0 <UDP_Handler+0xae8>
  4022b0:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
  4022b4:	f8ce 200c 	str.w	r2, [lr, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4022b8:	2800      	cmp	r0, #0
  4022ba:	f47f ad27 	bne.w	401d0c <UDP_Handler+0x504>
  4022be:	e7ef      	b.n	4022a0 <UDP_Handler+0xa98>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4022c0:	4630      	mov	r0, r6
  4022c2:	4b0c      	ldr	r3, [pc, #48]	; (4022f4 <UDP_Handler+0xaec>)
  4022c4:	4798      	blx	r3
  4022c6:	e531      	b.n	401d2c <UDP_Handler+0x524>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4022c8:	4b04      	ldr	r3, [pc, #16]	; (4022dc <UDP_Handler+0xad4>)
  4022ca:	699b      	ldr	r3, [r3, #24]
  4022cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4022d0:	f47f af0b 	bne.w	4020ea <UDP_Handler+0x8e2>
  4022d4:	e70e      	b.n	4020f4 <UDP_Handler+0x8ec>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  4022d6:	b031      	add	sp, #196	; 0xc4
  4022d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022dc:	40034000 	.word	0x40034000
  4022e0:	0040147d 	.word	0x0040147d
  4022e4:	00400955 	.word	0x00400955
  4022e8:	200000a0 	.word	0x200000a0
  4022ec:	004011c5 	.word	0x004011c5
  4022f0:	200006b8 	.word	0x200006b8
  4022f4:	004014bd 	.word	0x004014bd

004022f8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  4022f8:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4022fa:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4022fe:	b672      	cpsid	i
  402300:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402304:	2200      	movs	r2, #0
  402306:	4b14      	ldr	r3, [pc, #80]	; (402358 <udd_attach+0x60>)
  402308:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  40230a:	2001      	movs	r0, #1
  40230c:	4b13      	ldr	r3, [pc, #76]	; (40235c <udd_attach+0x64>)
  40230e:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  402310:	2022      	movs	r0, #34	; 0x22
  402312:	4b13      	ldr	r3, [pc, #76]	; (402360 <udd_attach+0x68>)
  402314:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  402316:	4b13      	ldr	r3, [pc, #76]	; (402364 <udd_attach+0x6c>)
  402318:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40231a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40231e:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402320:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  402326:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  402328:	f44f 7280 	mov.w	r2, #256	; 0x100
  40232c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  40232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402332:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  402334:	f44f 7200 	mov.w	r2, #512	; 0x200
  402338:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  40233a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40233e:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402340:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402344:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402346:	b92c      	cbnz	r4, 402354 <udd_attach+0x5c>
		cpu_irq_enable();
  402348:	2201      	movs	r2, #1
  40234a:	4b03      	ldr	r3, [pc, #12]	; (402358 <udd_attach+0x60>)
  40234c:	701a      	strb	r2, [r3, #0]
  40234e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402352:	b662      	cpsie	i
  402354:	bd10      	pop	{r4, pc}
  402356:	bf00      	nop
  402358:	200000a0 	.word	0x200000a0
  40235c:	00401779 	.word	0x00401779
  402360:	004010d9 	.word	0x004010d9
  402364:	40034000 	.word	0x40034000

00402368 <udd_enable>:
#endif
}


void udd_enable(void)
{
  402368:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40236a:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40236e:	b672      	cpsid	i
  402370:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402374:	2400      	movs	r4, #0
  402376:	4b24      	ldr	r3, [pc, #144]	; (402408 <udd_enable+0xa0>)
  402378:	701c      	strb	r4, [r3, #0]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  40237a:	2022      	movs	r0, #34	; 0x22
  40237c:	4b23      	ldr	r3, [pc, #140]	; (40240c <udd_enable+0xa4>)
  40237e:	4798      	blx	r3
	sysclk_enable_usb();
  402380:	4b23      	ldr	r3, [pc, #140]	; (402410 <udd_enable+0xa8>)
  402382:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402384:	4b23      	ldr	r3, [pc, #140]	; (402414 <udd_enable+0xac>)
  402386:	2250      	movs	r2, #80	; 0x50
  402388:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40238c:	2204      	movs	r2, #4
  40238e:	605a      	str	r2, [r3, #4]
  402390:	4623      	mov	r3, r4

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  402392:	4821      	ldr	r0, [pc, #132]	; (402418 <udd_enable+0xb0>)
  402394:	009a      	lsls	r2, r3, #2
  402396:	18d1      	adds	r1, r2, r3
  402398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40239c:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  40239e:	441a      	add	r2, r3
  4023a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4023a4:	f001 0183 	and.w	r1, r1, #131	; 0x83
  4023a8:	f36f 11c7 	bfc	r1, #7, #1
  4023ac:	7451      	strb	r1, [r2, #17]
  4023ae:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4023b0:	2b03      	cmp	r3, #3
  4023b2:	d1ef      	bne.n	402394 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4023b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4023b8:	4b18      	ldr	r3, [pc, #96]	; (40241c <udd_enable+0xb4>)
  4023ba:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  4023bc:	2200      	movs	r2, #0
  4023be:	4b18      	ldr	r3, [pc, #96]	; (402420 <udd_enable+0xb8>)
  4023c0:	701a      	strb	r2, [r3, #0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4023c2:	4b18      	ldr	r3, [pc, #96]	; (402424 <udd_enable+0xbc>)
  4023c4:	781b      	ldrb	r3, [r3, #0]
  4023c6:	2bff      	cmp	r3, #255	; 0xff
  4023c8:	d100      	bne.n	4023cc <udd_enable+0x64>
  4023ca:	e7fe      	b.n	4023ca <udd_enable+0x62>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4023cc:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4023d0:	b672      	cpsid	i
  4023d2:	f3bf 8f5f 	dmb	sy
  4023d6:	2100      	movs	r1, #0
  4023d8:	4a0b      	ldr	r2, [pc, #44]	; (402408 <udd_enable+0xa0>)
  4023da:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4023dc:	4911      	ldr	r1, [pc, #68]	; (402424 <udd_enable+0xbc>)
  4023de:	780a      	ldrb	r2, [r1, #0]
  4023e0:	3201      	adds	r2, #1
  4023e2:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4023e4:	b92b      	cbnz	r3, 4023f2 <udd_enable+0x8a>
		cpu_irq_enable();
  4023e6:	2201      	movs	r2, #1
  4023e8:	4b07      	ldr	r3, [pc, #28]	; (402408 <udd_enable+0xa0>)
  4023ea:	701a      	strb	r2, [r3, #0]
  4023ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4023f0:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  4023f2:	4b0d      	ldr	r3, [pc, #52]	; (402428 <udd_enable+0xc0>)
  4023f4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4023f6:	b92d      	cbnz	r5, 402404 <udd_enable+0x9c>
		cpu_irq_enable();
  4023f8:	2201      	movs	r2, #1
  4023fa:	4b03      	ldr	r3, [pc, #12]	; (402408 <udd_enable+0xa0>)
  4023fc:	701a      	strb	r2, [r3, #0]
  4023fe:	f3bf 8f5f 	dmb	sy
  402402:	b662      	cpsie	i
  402404:	bd38      	pop	{r3, r4, r5, pc}
  402406:	bf00      	nop
  402408:	200000a0 	.word	0x200000a0
  40240c:	004010d9 	.word	0x004010d9
  402410:	00400dcd 	.word	0x00400dcd
  402414:	e000e100 	.word	0xe000e100
  402418:	200006b8 	.word	0x200006b8
  40241c:	004011a1 	.word	0x004011a1
  402420:	200006f4 	.word	0x200006f4
  402424:	200006fc 	.word	0x200006fc
  402428:	004022f9 	.word	0x004022f9

0040242c <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  40242c:	2000      	movs	r0, #0
  40242e:	4770      	bx	lr

00402430 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402430:	4b0c      	ldr	r3, [pc, #48]	; (402464 <udd_set_address+0x34>)
  402432:	685a      	ldr	r2, [r3, #4]
  402434:	f022 0201 	bic.w	r2, r2, #1
  402438:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40243a:	689a      	ldr	r2, [r3, #8]
  40243c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402440:	609a      	str	r2, [r3, #8]
	if (address) {
  402442:	b170      	cbz	r0, 402462 <udd_set_address+0x32>
		udd_configure_address(address);
  402444:	689a      	ldr	r2, [r3, #8]
  402446:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40244a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40244e:	4310      	orrs	r0, r2
  402450:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402452:	689a      	ldr	r2, [r3, #8]
  402454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402458:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  40245a:	685a      	ldr	r2, [r3, #4]
  40245c:	f042 0201 	orr.w	r2, r2, #1
  402460:	605a      	str	r2, [r3, #4]
  402462:	4770      	bx	lr
  402464:	40034000 	.word	0x40034000

00402468 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  402468:	4b05      	ldr	r3, [pc, #20]	; (402480 <udd_getaddress+0x18>)
  40246a:	685b      	ldr	r3, [r3, #4]
  40246c:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402470:	bf1d      	ittte	ne
  402472:	4b03      	ldrne	r3, [pc, #12]	; (402480 <udd_getaddress+0x18>)
  402474:	6898      	ldrne	r0, [r3, #8]
  402476:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  40247a:	2000      	moveq	r0, #0
}
  40247c:	4770      	bx	lr
  40247e:	bf00      	nop
  402480:	40034000 	.word	0x40034000

00402484 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402484:	4b02      	ldr	r3, [pc, #8]	; (402490 <udd_get_frame_number+0xc>)
  402486:	6818      	ldr	r0, [r3, #0]
}
  402488:	f3c0 000a 	ubfx	r0, r0, #0, #11
  40248c:	4770      	bx	lr
  40248e:	bf00      	nop
  402490:	40034000 	.word	0x40034000

00402494 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402494:	2000      	movs	r0, #0
  402496:	4770      	bx	lr

00402498 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402498:	4b01      	ldr	r3, [pc, #4]	; (4024a0 <udd_set_setup_payload+0x8>)
  40249a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  40249c:	8199      	strh	r1, [r3, #12]
  40249e:	4770      	bx	lr
  4024a0:	20000708 	.word	0x20000708

004024a4 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  4024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024a6:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  4024a8:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  4024ac:	2c03      	cmp	r4, #3
  4024ae:	d86c      	bhi.n	40258a <udd_ep_alloc+0xe6>
  4024b0:	00a3      	lsls	r3, r4, #2
  4024b2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4024b6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  4024ba:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4024bc:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4024c0:	d165      	bne.n	40258e <udd_ep_alloc+0xea>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4024c2:	f001 0503 	and.w	r5, r1, #3
  4024c6:	2d01      	cmp	r5, #1
  4024c8:	d103      	bne.n	4024d2 <udd_ep_alloc+0x2e>
  4024ca:	2c00      	cmp	r4, #0
  4024cc:	d061      	beq.n	402592 <udd_ep_alloc+0xee>
  4024ce:	2c03      	cmp	r4, #3
  4024d0:	d061      	beq.n	402596 <udd_ep_alloc+0xf2>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4024d2:	1f25      	subs	r5, r4, #4
  4024d4:	b2ed      	uxtb	r5, r5
  4024d6:	2d02      	cmp	r5, #2
  4024d8:	bf34      	ite	cc
  4024da:	f44f 7500 	movcc.w	r5, #512	; 0x200
  4024de:	2540      	movcs	r5, #64	; 0x40
  4024e0:	4295      	cmp	r5, r2
  4024e2:	db5a      	blt.n	40259a <udd_ep_alloc+0xf6>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  4024e4:	1e66      	subs	r6, r4, #1

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  4024e6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4024ea:	4d2e      	ldr	r5, [pc, #184]	; (4025a4 <udd_ep_alloc+0x100>)
  4024ec:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  4024f0:	f105 0710 	add.w	r7, r5, #16
  4024f4:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  4024f8:	f362 0e09 	bfi	lr, r2, #0, #10
  4024fc:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  402500:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402502:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402506:	f36f 1245 	bfc	r2, #5, #1
  40250a:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  40250c:	09c0      	lsrs	r0, r0, #7
  40250e:	d003      	beq.n	402518 <udd_ep_alloc+0x74>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402510:	787a      	ldrb	r2, [r7, #1]
  402512:	f36f 0283 	bfc	r2, #2, #2
  402516:	707a      	strb	r2, [r7, #1]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402518:	4a23      	ldr	r2, [pc, #140]	; (4025a8 <udd_ep_alloc+0x104>)
  40251a:	6a96      	ldr	r6, [r2, #40]	; 0x28
  40251c:	2501      	movs	r5, #1
  40251e:	fa05 f404 	lsl.w	r4, r5, r4
  402522:	ea44 0506 	orr.w	r5, r4, r6
  402526:	6295      	str	r5, [r2, #40]	; 0x28
  402528:	6a95      	ldr	r5, [r2, #40]	; 0x28
  40252a:	ea25 0404 	bic.w	r4, r5, r4
  40252e:	6294      	str	r4, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402532:	9200      	str	r2, [sp, #0]
  402534:	9a00      	ldr	r2, [sp, #0]
  402536:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40253a:	9200      	str	r2, [sp, #0]
  40253c:	9a00      	ldr	r2, [sp, #0]
  40253e:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402546:	9200      	str	r2, [sp, #0]
  402548:	b138      	cbz	r0, 40255a <udd_ep_alloc+0xb6>
  40254a:	f041 0204 	orr.w	r2, r1, #4
  40254e:	0212      	lsls	r2, r2, #8
  402550:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402558:	e004      	b.n	402564 <udd_ep_alloc+0xc0>
  40255a:	020a      	lsls	r2, r1, #8
  40255c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402564:	9900      	ldr	r1, [sp, #0]
  402566:	430a      	orrs	r2, r1
  402568:	9200      	str	r2, [sp, #0]
  40256a:	9a00      	ldr	r2, [sp, #0]
  40256c:	631a      	str	r2, [r3, #48]	; 0x30
  40256e:	2300      	movs	r3, #0
  402570:	9301      	str	r3, [sp, #4]
  402572:	9b01      	ldr	r3, [sp, #4]
  402574:	2b13      	cmp	r3, #19
  402576:	d812      	bhi.n	40259e <udd_ep_alloc+0xfa>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402578:	bf00      	nop
  40257a:	9b01      	ldr	r3, [sp, #4]
  40257c:	3301      	adds	r3, #1
  40257e:	9301      	str	r3, [sp, #4]
  402580:	9b01      	ldr	r3, [sp, #4]
  402582:	2b13      	cmp	r3, #19
  402584:	d9f8      	bls.n	402578 <udd_ep_alloc+0xd4>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402586:	2001      	movs	r0, #1
  402588:	e00a      	b.n	4025a0 <udd_ep_alloc+0xfc>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  40258a:	2000      	movs	r0, #0
  40258c:	e008      	b.n	4025a0 <udd_ep_alloc+0xfc>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  40258e:	2000      	movs	r0, #0
  402590:	e006      	b.n	4025a0 <udd_ep_alloc+0xfc>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  402592:	2000      	movs	r0, #0
  402594:	e004      	b.n	4025a0 <udd_ep_alloc+0xfc>
  402596:	2000      	movs	r0, #0
  402598:	e002      	b.n	4025a0 <udd_ep_alloc+0xfc>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  40259a:	2000      	movs	r0, #0
  40259c:	e000      	b.n	4025a0 <udd_ep_alloc+0xfc>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  40259e:	2001      	movs	r0, #1
}
  4025a0:	b003      	add	sp, #12
  4025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025a4:	200006b8 	.word	0x200006b8
  4025a8:	40034000 	.word	0x40034000

004025ac <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4025ac:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4025b0:	2a03      	cmp	r2, #3
  4025b2:	d82a      	bhi.n	40260a <udd_ep_free+0x5e>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
  4025b4:	b500      	push	{lr}
  4025b6:	b083      	sub	sp, #12
  4025b8:	0093      	lsls	r3, r2, #2
  4025ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4025be:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
  4025c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4025c4:	9100      	str	r1, [sp, #0]
  4025c6:	9900      	ldr	r1, [sp, #0]
  4025c8:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4025cc:	9100      	str	r1, [sp, #0]
  4025ce:	9900      	ldr	r1, [sp, #0]
  4025d0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4025d4:	9100      	str	r1, [sp, #0]
  4025d6:	9900      	ldr	r1, [sp, #0]
  4025d8:	6319      	str	r1, [r3, #48]	; 0x30
  4025da:	2300      	movs	r3, #0
  4025dc:	9301      	str	r3, [sp, #4]
  4025de:	9b01      	ldr	r3, [sp, #4]
  4025e0:	2b13      	cmp	r3, #19
  4025e2:	d806      	bhi.n	4025f2 <udd_ep_free+0x46>
  4025e4:	bf00      	nop
  4025e6:	9b01      	ldr	r3, [sp, #4]
  4025e8:	3301      	adds	r3, #1
  4025ea:	9301      	str	r3, [sp, #4]
  4025ec:	9b01      	ldr	r3, [sp, #4]
  4025ee:	2b13      	cmp	r3, #19
  4025f0:	d9f8      	bls.n	4025e4 <udd_ep_free+0x38>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4025f2:	1e50      	subs	r0, r2, #1
  4025f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025f8:	4b04      	ldr	r3, [pc, #16]	; (40260c <udd_ep_free+0x60>)
  4025fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025fe:	2101      	movs	r1, #1
  402600:	4b03      	ldr	r3, [pc, #12]	; (402610 <udd_ep_free+0x64>)
  402602:	4798      	blx	r3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_ep_abort_job(ep);
}
  402604:	b003      	add	sp, #12
  402606:	f85d fb04 	ldr.w	pc, [sp], #4
  40260a:	4770      	bx	lr
  40260c:	200006b8 	.word	0x200006b8
  402610:	0040147d 	.word	0x0040147d

00402614 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402614:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  402618:	2803      	cmp	r0, #3
  40261a:	d815      	bhi.n	402648 <udd_ep_is_halted+0x34>
		return false;
	}
	return ptr_job->b_stall_requested ||
  40261c:	1e43      	subs	r3, r0, #1
  40261e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402622:	4a0a      	ldr	r2, [pc, #40]	; (40264c <udd_ep_is_halted+0x38>)
  402624:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402628:	7c5b      	ldrb	r3, [r3, #17]
  40262a:	f013 0f20 	tst.w	r3, #32
  40262e:	d109      	bne.n	402644 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402630:	300c      	adds	r0, #12
  402632:	4b07      	ldr	r3, [pc, #28]	; (402650 <udd_ep_is_halted+0x3c>)
  402634:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402638:	f013 0f28 	tst.w	r3, #40	; 0x28
  40263c:	bf14      	ite	ne
  40263e:	2001      	movne	r0, #1
  402640:	2000      	moveq	r0, #0
  402642:	4770      	bx	lr
  402644:	2001      	movs	r0, #1
  402646:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402648:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  40264a:	4770      	bx	lr
  40264c:	200006b8 	.word	0x200006b8
  402650:	40034000 	.word	0x40034000

00402654 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402654:	f000 010f 	and.w	r1, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402658:	2903      	cmp	r1, #3
  40265a:	d861      	bhi.n	402720 <udd_ep_set_halt+0xcc>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  40265c:	b410      	push	{r4}
  40265e:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402660:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402664:	fab2 f282 	clz	r2, r2
  402668:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40266a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40266c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402670:	2400      	movs	r4, #0
  402672:	4b30      	ldr	r3, [pc, #192]	; (402734 <udd_ep_set_halt+0xe0>)
  402674:	701c      	strb	r4, [r3, #0]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402676:	f010 0f80 	tst.w	r0, #128	; 0x80
  40267a:	d028      	beq.n	4026ce <udd_ep_set_halt+0x7a>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40267c:	1e4b      	subs	r3, r1, #1
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40267e:	f101 000c 	add.w	r0, r1, #12
  402682:	4c2d      	ldr	r4, [pc, #180]	; (402738 <udd_ep_set_halt+0xe4>)
  402684:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  402688:	f010 0f10 	tst.w	r0, #16
  40268c:	d109      	bne.n	4026a2 <udd_ep_set_halt+0x4e>
				|| ptr_job->bank > 1)) {
  40268e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  402692:	4c2a      	ldr	r4, [pc, #168]	; (40273c <udd_ep_set_halt+0xe8>)
  402694:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  402698:	7c40      	ldrb	r0, [r0, #17]
  40269a:	f3c0 0081 	ubfx	r0, r0, #2, #2
  40269e:	2801      	cmp	r0, #1
  4026a0:	dd15      	ble.n	4026ce <udd_ep_set_halt+0x7a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4026a2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  4026a6:	4b25      	ldr	r3, [pc, #148]	; (40273c <udd_ep_set_halt+0xe8>)
  4026a8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  4026ac:	7c58      	ldrb	r0, [r3, #17]
  4026ae:	f040 0020 	orr.w	r0, r0, #32
  4026b2:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4026b4:	2301      	movs	r3, #1
  4026b6:	408b      	lsls	r3, r1
  4026b8:	491f      	ldr	r1, [pc, #124]	; (402738 <udd_ep_set_halt+0xe4>)
  4026ba:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4026bc:	2a00      	cmp	r2, #0
  4026be:	d031      	beq.n	402724 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  4026c0:	2001      	movs	r0, #1
  4026c2:	4b1c      	ldr	r3, [pc, #112]	; (402734 <udd_ep_set_halt+0xe0>)
  4026c4:	7018      	strb	r0, [r3, #0]
  4026c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4026ca:	b662      	cpsie	i
  4026cc:	e02d      	b.n	40272a <udd_ep_set_halt+0xd6>
  4026ce:	008b      	lsls	r3, r1, #2
  4026d0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4026d4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  4026d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
  4026da:	9000      	str	r0, [sp, #0]
  4026dc:	9800      	ldr	r0, [sp, #0]
  4026de:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  4026e2:	9000      	str	r0, [sp, #0]
  4026e4:	9800      	ldr	r0, [sp, #0]
  4026e6:	f040 0020 	orr.w	r0, r0, #32
  4026ea:	9000      	str	r0, [sp, #0]
  4026ec:	9800      	ldr	r0, [sp, #0]
  4026ee:	6318      	str	r0, [r3, #48]	; 0x30
  4026f0:	2300      	movs	r3, #0
  4026f2:	9301      	str	r3, [sp, #4]
  4026f4:	9b01      	ldr	r3, [sp, #4]
  4026f6:	2b13      	cmp	r3, #19
  4026f8:	d806      	bhi.n	402708 <udd_ep_set_halt+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4026fa:	bf00      	nop
  4026fc:	9b01      	ldr	r3, [sp, #4]
  4026fe:	3301      	adds	r3, #1
  402700:	9301      	str	r3, [sp, #4]
  402702:	9b01      	ldr	r3, [sp, #4]
  402704:	2b13      	cmp	r3, #19
  402706:	d9f8      	bls.n	4026fa <udd_ep_set_halt+0xa6>
		udd_enable_endpoint_interrupt(ep_index);
  402708:	2301      	movs	r3, #1
  40270a:	408b      	lsls	r3, r1
  40270c:	490a      	ldr	r1, [pc, #40]	; (402738 <udd_ep_set_halt+0xe4>)
  40270e:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402710:	b152      	cbz	r2, 402728 <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  402712:	2001      	movs	r0, #1
  402714:	4b07      	ldr	r3, [pc, #28]	; (402734 <udd_ep_set_halt+0xe0>)
  402716:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402718:	f3bf 8f5f 	dmb	sy
  40271c:	b662      	cpsie	i
  40271e:	e004      	b.n	40272a <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402720:	2000      	movs	r0, #0
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
}
  402722:	4770      	bx	lr
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402724:	2001      	movs	r0, #1
  402726:	e000      	b.n	40272a <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402728:	2001      	movs	r0, #1
}
  40272a:	b003      	add	sp, #12
  40272c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402730:	4770      	bx	lr
  402732:	bf00      	nop
  402734:	200000a0 	.word	0x200000a0
  402738:	40034000 	.word	0x40034000
  40273c:	200006b8 	.word	0x200006b8

00402740 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402740:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402744:	2803      	cmp	r0, #3
  402746:	d867      	bhi.n	402818 <udd_ep_clear_halt+0xd8>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402748:	1e41      	subs	r1, r0, #1

	ptr_job->b_stall_requested = false;
  40274a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40274e:	4b36      	ldr	r3, [pc, #216]	; (402828 <udd_ep_clear_halt+0xe8>)
  402750:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402754:	7c5a      	ldrb	r2, [r3, #17]
  402756:	f36f 1245 	bfc	r2, #5, #1
  40275a:	745a      	strb	r2, [r3, #17]
  40275c:	0082      	lsls	r2, r0, #2
  40275e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402762:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402766:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402768:	f013 0f20 	tst.w	r3, #32
  40276c:	d056      	beq.n	40281c <udd_ep_clear_halt+0xdc>
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  40276e:	b530      	push	{r4, r5, lr}
  402770:	b085      	sub	sp, #20
	ptr_job = &udd_ep_job[ep - 1];

	ptr_job->b_stall_requested = false;
	if (Is_udd_endpoint_stall_requested(ep)) {
		// Remove stall
		udd_disable_stall_handshake(ep);
  402772:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402774:	9300      	str	r3, [sp, #0]
  402776:	9b00      	ldr	r3, [sp, #0]
  402778:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40277c:	9300      	str	r3, [sp, #0]
  40277e:	9b00      	ldr	r3, [sp, #0]
  402780:	f023 0320 	bic.w	r3, r3, #32
  402784:	9300      	str	r3, [sp, #0]
  402786:	9b00      	ldr	r3, [sp, #0]
  402788:	6313      	str	r3, [r2, #48]	; 0x30
  40278a:	2300      	movs	r3, #0
  40278c:	9301      	str	r3, [sp, #4]
  40278e:	9b01      	ldr	r3, [sp, #4]
  402790:	2b13      	cmp	r3, #19
  402792:	d806      	bhi.n	4027a2 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402794:	bf00      	nop
  402796:	9b01      	ldr	r3, [sp, #4]
  402798:	3301      	adds	r3, #1
  40279a:	9301      	str	r3, [sp, #4]
  40279c:	9b01      	ldr	r3, [sp, #4]
  40279e:	2b13      	cmp	r3, #19
  4027a0:	d9f8      	bls.n	402794 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4027a2:	4b22      	ldr	r3, [pc, #136]	; (40282c <udd_ep_clear_halt+0xec>)
  4027a4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  4027a6:	2401      	movs	r4, #1
  4027a8:	fa04 f000 	lsl.w	r0, r4, r0
  4027ac:	ea40 0405 	orr.w	r4, r0, r5
  4027b0:	629c      	str	r4, [r3, #40]	; 0x28
  4027b2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  4027b4:	ea24 0000 	bic.w	r0, r4, r0
  4027b8:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  4027ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027bc:	9302      	str	r3, [sp, #8]
  4027be:	9b02      	ldr	r3, [sp, #8]
  4027c0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4027c4:	9302      	str	r3, [sp, #8]
  4027c6:	9b02      	ldr	r3, [sp, #8]
  4027c8:	f023 0308 	bic.w	r3, r3, #8
  4027cc:	9302      	str	r3, [sp, #8]
  4027ce:	9b02      	ldr	r3, [sp, #8]
  4027d0:	6313      	str	r3, [r2, #48]	; 0x30
  4027d2:	2300      	movs	r3, #0
  4027d4:	9303      	str	r3, [sp, #12]
  4027d6:	9b03      	ldr	r3, [sp, #12]
  4027d8:	2b13      	cmp	r3, #19
  4027da:	d806      	bhi.n	4027ea <udd_ep_clear_halt+0xaa>
  4027dc:	bf00      	nop
  4027de:	9b03      	ldr	r3, [sp, #12]
  4027e0:	3301      	adds	r3, #1
  4027e2:	9303      	str	r3, [sp, #12]
  4027e4:	9b03      	ldr	r3, [sp, #12]
  4027e6:	2b13      	cmp	r3, #19
  4027e8:	d9f8      	bls.n	4027dc <udd_ep_clear_halt+0x9c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  4027ea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4027ee:	4a0e      	ldr	r2, [pc, #56]	; (402828 <udd_ep_clear_halt+0xe8>)
  4027f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4027f4:	7c5b      	ldrb	r3, [r3, #17]
  4027f6:	f013 0f10 	tst.w	r3, #16
  4027fa:	d011      	beq.n	402820 <udd_ep_clear_halt+0xe0>
			ptr_job->busy = false;
  4027fc:	0088      	lsls	r0, r1, #2
  4027fe:	1843      	adds	r3, r0, r1
  402800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402804:	7c5c      	ldrb	r4, [r3, #17]
  402806:	f36f 1404 	bfc	r4, #4, #1
  40280a:	745c      	strb	r4, [r3, #17]
			ptr_job->call_nohalt();
  40280c:	4401      	add	r1, r0
  40280e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  402812:	4798      	blx	r3
		}
	}
	return true;
  402814:	2001      	movs	r0, #1
  402816:	e004      	b.n	402822 <udd_ep_clear_halt+0xe2>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402818:	2000      	movs	r0, #0
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
}
  40281a:	4770      	bx	lr
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  40281c:	2001      	movs	r0, #1
  40281e:	4770      	bx	lr
  402820:	2001      	movs	r0, #1
}
  402822:	b005      	add	sp, #20
  402824:	bd30      	pop	{r4, r5, pc}
  402826:	bf00      	nop
  402828:	200006b8 	.word	0x200006b8
  40282c:	40034000 	.word	0x40034000

00402830 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402832:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402836:	2d03      	cmp	r5, #3
  402838:	f200 809f 	bhi.w	40297a <udd_ep_run+0x14a>
  40283c:	00ac      	lsls	r4, r5, #2
  40283e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402842:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402846:	6b26      	ldr	r6, [r4, #48]	; 0x30
  402848:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  40284c:	f000 8097 	beq.w	40297e <udd_ep_run+0x14e>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402850:	1e6e      	subs	r6, r5, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402852:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  402856:	4f4f      	ldr	r7, [pc, #316]	; (402994 <udd_ep_run+0x164>)
  402858:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  40285c:	7c7f      	ldrb	r7, [r7, #17]
  40285e:	f017 0f20 	tst.w	r7, #32
  402862:	f040 808e 	bne.w	402982 <udd_ep_run+0x152>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402866:	6b27      	ldr	r7, [r4, #48]	; 0x30
  402868:	f017 0f20 	tst.w	r7, #32
  40286c:	f040 808b 	bne.w	402986 <udd_ep_run+0x156>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402870:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402874:	fab7 f787 	clz	r7, r7
  402878:	097f      	lsrs	r7, r7, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40287a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40287c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402880:	f04f 0c00 	mov.w	ip, #0
  402884:	f8df e110 	ldr.w	lr, [pc, #272]	; 402998 <udd_ep_run+0x168>
  402888:	f88e c000 	strb.w	ip, [lr]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  40288c:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  402890:	f8df c100 	ldr.w	ip, [pc, #256]	; 402994 <udd_ep_run+0x164>
  402894:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  402898:	f89e e011 	ldrb.w	lr, [lr, #17]
  40289c:	f01e 0f10 	tst.w	lr, #16
  4028a0:	d009      	beq.n	4028b6 <udd_ep_run+0x86>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4028a2:	2f00      	cmp	r7, #0
  4028a4:	d071      	beq.n	40298a <udd_ep_run+0x15a>
		cpu_irq_enable();
  4028a6:	2201      	movs	r2, #1
  4028a8:	4b3b      	ldr	r3, [pc, #236]	; (402998 <udd_ep_run+0x168>)
  4028aa:	701a      	strb	r2, [r3, #0]
  4028ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4028b0:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  4028b2:	2000      	movs	r0, #0
  4028b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
  4028b6:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  4028ba:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 402994 <udd_ep_run+0x164>
  4028be:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  4028c2:	f89e c011 	ldrb.w	ip, [lr, #17]
  4028c6:	f04c 0c10 	orr.w	ip, ip, #16
  4028ca:	f88e c011 	strb.w	ip, [lr, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4028ce:	b13f      	cbz	r7, 4028e0 <udd_ep_run+0xb0>
		cpu_irq_enable();
  4028d0:	f04f 0e01 	mov.w	lr, #1
  4028d4:	4f30      	ldr	r7, [pc, #192]	; (402998 <udd_ep_run+0x168>)
  4028d6:	f887 e000 	strb.w	lr, [r7]
  4028da:	f3bf 8f5f 	dmb	sy
  4028de:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  4028e0:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 402994 <udd_ep_run+0x164>
  4028e4:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4028e8:	00bf      	lsls	r7, r7, #2
  4028ea:	eb0c 0e07 	add.w	lr, ip, r7
  4028ee:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4028f2:	f10e 0208 	add.w	r2, lr, #8
  4028f6:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4028fa:	f04f 0e00 	mov.w	lr, #0
  4028fe:	f8c2 e004 	str.w	lr, [r2, #4]
	ptr_job->call_trans = callback;
  402902:	9a06      	ldr	r2, [sp, #24]
  402904:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402908:	b919      	cbnz	r1, 402912 <udd_ep_run+0xe2>
  40290a:	fab3 f383 	clz	r3, r3
  40290e:	095b      	lsrs	r3, r3, #5
  402910:	e000      	b.n	402914 <udd_ep_run+0xe4>
  402912:	2301      	movs	r3, #1
  402914:	491f      	ldr	r1, [pc, #124]	; (402994 <udd_ep_run+0x164>)
  402916:	00b7      	lsls	r7, r6, #2
  402918:	19ba      	adds	r2, r7, r6
  40291a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40291e:	7c52      	ldrb	r2, [r2, #17]
  402920:	f363 1286 	bfi	r2, r3, #6, #1
	ptr_job->b_buf_end = false;
  402924:	443e      	add	r6, r7
  402926:	eb01 0686 	add.w	r6, r1, r6, lsl #2
  40292a:	4613      	mov	r3, r2
  40292c:	f36f 13c7 	bfc	r3, #7, #1
  402930:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402932:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402936:	b672      	cpsid	i
  402938:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40293c:	2200      	movs	r2, #0
  40293e:	4b16      	ldr	r3, [pc, #88]	; (402998 <udd_ep_run+0x168>)
  402940:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402942:	2301      	movs	r3, #1
  402944:	40ab      	lsls	r3, r5
  402946:	4a15      	ldr	r2, [pc, #84]	; (40299c <udd_ep_run+0x16c>)
  402948:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  40294a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40294e:	d00c      	beq.n	40296a <udd_ep_run+0x13a>
		if (Is_udd_in_pending(ep)) {
  402950:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402952:	f013 0f11 	tst.w	r3, #17
  402956:	d108      	bne.n	40296a <udd_ep_run+0x13a>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  402958:	4628      	mov	r0, r5
  40295a:	2101      	movs	r1, #1
  40295c:	4b10      	ldr	r3, [pc, #64]	; (4029a0 <udd_ep_run+0x170>)
  40295e:	4798      	blx	r3
  402960:	b118      	cbz	r0, 40296a <udd_ep_run+0x13a>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402962:	4628      	mov	r0, r5
  402964:	2100      	movs	r1, #0
  402966:	4b0e      	ldr	r3, [pc, #56]	; (4029a0 <udd_ep_run+0x170>)
  402968:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40296a:	b986      	cbnz	r6, 40298e <udd_ep_run+0x15e>
		cpu_irq_enable();
  40296c:	2001      	movs	r0, #1
  40296e:	4b0a      	ldr	r3, [pc, #40]	; (402998 <udd_ep_run+0x168>)
  402970:	7018      	strb	r0, [r3, #0]
  402972:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402976:	b662      	cpsie	i
  402978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  40297a:	2000      	movs	r0, #0
  40297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  40297e:	2000      	movs	r0, #0
  402980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402982:	2000      	movs	r0, #0
  402984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402986:	2000      	movs	r0, #0
  402988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  40298a:	2000      	movs	r0, #0
  40298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  40298e:	2001      	movs	r0, #1
}
  402990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402992:	bf00      	nop
  402994:	200006b8 	.word	0x200006b8
  402998:	200000a0 	.word	0x200000a0
  40299c:	40034000 	.word	0x40034000
  4029a0:	004015b1 	.word	0x004015b1

004029a4 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4029a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4029a6:	b089      	sub	sp, #36	; 0x24
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4029a8:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4029ac:	2c03      	cmp	r4, #3
  4029ae:	f200 80ba 	bhi.w	402b26 <udd_ep_abort+0x182>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029b2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4029b6:	b672      	cpsid	i
  4029b8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4029bc:	2100      	movs	r1, #0
  4029be:	4a5b      	ldr	r2, [pc, #364]	; (402b2c <udd_ep_abort+0x188>)
  4029c0:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  4029c2:	2501      	movs	r5, #1
  4029c4:	40a5      	lsls	r5, r4
  4029c6:	4a5a      	ldr	r2, [pc, #360]	; (402b30 <udd_ep_abort+0x18c>)
  4029c8:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4029ca:	b92b      	cbnz	r3, 4029d8 <udd_ep_abort+0x34>
		cpu_irq_enable();
  4029cc:	2201      	movs	r2, #1
  4029ce:	4b57      	ldr	r3, [pc, #348]	; (402b2c <udd_ep_abort+0x188>)
  4029d0:	701a      	strb	r2, [r3, #0]
  4029d2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4029d6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  4029d8:	f010 0f80 	tst.w	r0, #128	; 0x80
  4029dc:	d10a      	bne.n	4029f4 <udd_ep_abort+0x50>
  4029de:	00a6      	lsls	r6, r4, #2
  4029e0:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  4029e4:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  4029e8:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4029ea:	f013 0f42 	tst.w	r3, #66	; 0x42
  4029ee:	f040 8081 	bne.w	402af4 <udd_ep_abort+0x150>
  4029f2:	e086      	b.n	402b02 <udd_ep_abort+0x15e>
  4029f4:	00a2      	lsls	r2, r4, #2
  4029f6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4029fa:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  4029fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a00:	f013 0f10 	tst.w	r3, #16
  402a04:	d053      	beq.n	402aae <udd_ep_abort+0x10a>
			udd_kill_data_in_fifo(ep,
  402a06:	2c00      	cmp	r4, #0
  402a08:	d039      	beq.n	402a7e <udd_ep_abort+0xda>
  402a0a:	2c03      	cmp	r4, #3
  402a0c:	d037      	beq.n	402a7e <udd_ep_abort+0xda>
  402a0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a10:	9300      	str	r3, [sp, #0]
  402a12:	9b00      	ldr	r3, [sp, #0]
  402a14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a18:	9300      	str	r3, [sp, #0]
  402a1a:	9b00      	ldr	r3, [sp, #0]
  402a1c:	f023 0310 	bic.w	r3, r3, #16
  402a20:	9300      	str	r3, [sp, #0]
  402a22:	9b00      	ldr	r3, [sp, #0]
  402a24:	6313      	str	r3, [r2, #48]	; 0x30
  402a26:	2300      	movs	r3, #0
  402a28:	9301      	str	r3, [sp, #4]
  402a2a:	9b01      	ldr	r3, [sp, #4]
  402a2c:	2b13      	cmp	r3, #19
  402a2e:	d806      	bhi.n	402a3e <udd_ep_abort+0x9a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402a30:	bf00      	nop
  402a32:	9b01      	ldr	r3, [sp, #4]
  402a34:	3301      	adds	r3, #1
  402a36:	9301      	str	r3, [sp, #4]
  402a38:	9b01      	ldr	r3, [sp, #4]
  402a3a:	2b13      	cmp	r3, #19
  402a3c:	d9f8      	bls.n	402a30 <udd_ep_abort+0x8c>
  402a3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a40:	f013 0f10 	tst.w	r3, #16
  402a44:	d1fb      	bne.n	402a3e <udd_ep_abort+0x9a>
  402a46:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a48:	9302      	str	r3, [sp, #8]
  402a4a:	9b02      	ldr	r3, [sp, #8]
  402a4c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a50:	9302      	str	r3, [sp, #8]
  402a52:	9b02      	ldr	r3, [sp, #8]
  402a54:	f043 0310 	orr.w	r3, r3, #16
  402a58:	9302      	str	r3, [sp, #8]
  402a5a:	9b02      	ldr	r3, [sp, #8]
  402a5c:	6313      	str	r3, [r2, #48]	; 0x30
  402a5e:	2300      	movs	r3, #0
  402a60:	9303      	str	r3, [sp, #12]
  402a62:	9b03      	ldr	r3, [sp, #12]
  402a64:	2b13      	cmp	r3, #19
  402a66:	d806      	bhi.n	402a76 <udd_ep_abort+0xd2>
  402a68:	bf00      	nop
  402a6a:	9b03      	ldr	r3, [sp, #12]
  402a6c:	3301      	adds	r3, #1
  402a6e:	9303      	str	r3, [sp, #12]
  402a70:	9b03      	ldr	r3, [sp, #12]
  402a72:	2b13      	cmp	r3, #19
  402a74:	d9f8      	bls.n	402a68 <udd_ep_abort+0xc4>
  402a76:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a78:	f013 0f10 	tst.w	r3, #16
  402a7c:	d0fb      	beq.n	402a76 <udd_ep_abort+0xd2>
  402a7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a80:	9304      	str	r3, [sp, #16]
  402a82:	9b04      	ldr	r3, [sp, #16]
  402a84:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a88:	9304      	str	r3, [sp, #16]
  402a8a:	9b04      	ldr	r3, [sp, #16]
  402a8c:	f023 0310 	bic.w	r3, r3, #16
  402a90:	9304      	str	r3, [sp, #16]
  402a92:	9b04      	ldr	r3, [sp, #16]
  402a94:	6313      	str	r3, [r2, #48]	; 0x30
  402a96:	2300      	movs	r3, #0
  402a98:	9305      	str	r3, [sp, #20]
  402a9a:	9b05      	ldr	r3, [sp, #20]
  402a9c:	2b13      	cmp	r3, #19
  402a9e:	d806      	bhi.n	402aae <udd_ep_abort+0x10a>
  402aa0:	bf00      	nop
  402aa2:	9b05      	ldr	r3, [sp, #20]
  402aa4:	3301      	adds	r3, #1
  402aa6:	9305      	str	r3, [sp, #20]
  402aa8:	9b05      	ldr	r3, [sp, #20]
  402aaa:	2b13      	cmp	r3, #19
  402aac:	d9f8      	bls.n	402aa0 <udd_ep_abort+0xfc>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  402aae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ab0:	9306      	str	r3, [sp, #24]
  402ab2:	9b06      	ldr	r3, [sp, #24]
  402ab4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ab8:	9306      	str	r3, [sp, #24]
  402aba:	9b06      	ldr	r3, [sp, #24]
  402abc:	f023 0301 	bic.w	r3, r3, #1
  402ac0:	9306      	str	r3, [sp, #24]
  402ac2:	9b06      	ldr	r3, [sp, #24]
  402ac4:	6313      	str	r3, [r2, #48]	; 0x30
  402ac6:	2300      	movs	r3, #0
  402ac8:	9307      	str	r3, [sp, #28]
  402aca:	9b07      	ldr	r3, [sp, #28]
  402acc:	2b13      	cmp	r3, #19
  402ace:	d806      	bhi.n	402ade <udd_ep_abort+0x13a>
  402ad0:	bf00      	nop
  402ad2:	9b07      	ldr	r3, [sp, #28]
  402ad4:	3301      	adds	r3, #1
  402ad6:	9307      	str	r3, [sp, #28]
  402ad8:	9b07      	ldr	r3, [sp, #28]
  402ada:	2b13      	cmp	r3, #19
  402adc:	d9f8      	bls.n	402ad0 <udd_ep_abort+0x12c>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402ade:	1e63      	subs	r3, r4, #1
  402ae0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402ae4:	4b13      	ldr	r3, [pc, #76]	; (402b34 <udd_ep_abort+0x190>)
  402ae6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402aea:	7c5a      	ldrb	r2, [r3, #17]
  402aec:	f36f 0283 	bfc	r2, #2, #2
  402af0:	745a      	strb	r2, [r3, #17]
  402af2:	e006      	b.n	402b02 <udd_ep_abort+0x15e>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  402af4:	4f10      	ldr	r7, [pc, #64]	; (402b38 <udd_ep_abort+0x194>)
  402af6:	4620      	mov	r0, r4
  402af8:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402afa:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402afc:	f013 0f42 	tst.w	r3, #66	; 0x42
  402b00:	d1f9      	bne.n	402af6 <udd_ep_abort+0x152>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402b02:	4b0b      	ldr	r3, [pc, #44]	; (402b30 <udd_ep_abort+0x18c>)
  402b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402b06:	432a      	orrs	r2, r5
  402b08:	629a      	str	r2, [r3, #40]	; 0x28
  402b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402b0c:	ea22 0505 	bic.w	r5, r2, r5
  402b10:	629d      	str	r5, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402b12:	1e60      	subs	r0, r4, #1
  402b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b18:	4b06      	ldr	r3, [pc, #24]	; (402b34 <udd_ep_abort+0x190>)
  402b1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b1e:	2101      	movs	r1, #1
  402b20:	4622      	mov	r2, r4
  402b22:	4b06      	ldr	r3, [pc, #24]	; (402b3c <udd_ep_abort+0x198>)
  402b24:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  402b26:	b009      	add	sp, #36	; 0x24
  402b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b2a:	bf00      	nop
  402b2c:	200000a0 	.word	0x200000a0
  402b30:	40034000 	.word	0x40034000
  402b34:	200006b8 	.word	0x200006b8
  402b38:	004014bd 	.word	0x004014bd
  402b3c:	0040147d 	.word	0x0040147d

00402b40 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b44:	6043      	str	r3, [r0, #4]
  402b46:	4770      	bx	lr

00402b48 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  402b48:	e7fe      	b.n	402b48 <Dummy_Handler>
  402b4a:	bf00      	nop

00402b4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402b4c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402b4e:	4b20      	ldr	r3, [pc, #128]	; (402bd0 <Reset_Handler+0x84>)
  402b50:	4a20      	ldr	r2, [pc, #128]	; (402bd4 <Reset_Handler+0x88>)
  402b52:	429a      	cmp	r2, r3
  402b54:	d913      	bls.n	402b7e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402b56:	4b20      	ldr	r3, [pc, #128]	; (402bd8 <Reset_Handler+0x8c>)
  402b58:	4a1d      	ldr	r2, [pc, #116]	; (402bd0 <Reset_Handler+0x84>)
  402b5a:	429a      	cmp	r2, r3
  402b5c:	d21f      	bcs.n	402b9e <Reset_Handler+0x52>
  402b5e:	4611      	mov	r1, r2
  402b60:	3204      	adds	r2, #4
  402b62:	3303      	adds	r3, #3
  402b64:	1a9b      	subs	r3, r3, r2
  402b66:	f023 0303 	bic.w	r3, r3, #3
  402b6a:	3304      	adds	r3, #4
  402b6c:	4a19      	ldr	r2, [pc, #100]	; (402bd4 <Reset_Handler+0x88>)
  402b6e:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402b70:	f852 0b04 	ldr.w	r0, [r2], #4
  402b74:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402b78:	429a      	cmp	r2, r3
  402b7a:	d1f9      	bne.n	402b70 <Reset_Handler+0x24>
  402b7c:	e00f      	b.n	402b9e <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402b7e:	4b14      	ldr	r3, [pc, #80]	; (402bd0 <Reset_Handler+0x84>)
  402b80:	4a14      	ldr	r2, [pc, #80]	; (402bd4 <Reset_Handler+0x88>)
  402b82:	429a      	cmp	r2, r3
  402b84:	d20b      	bcs.n	402b9e <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402b86:	4b14      	ldr	r3, [pc, #80]	; (402bd8 <Reset_Handler+0x8c>)
  402b88:	4a11      	ldr	r2, [pc, #68]	; (402bd0 <Reset_Handler+0x84>)
  402b8a:	1a9a      	subs	r2, r3, r2
  402b8c:	4813      	ldr	r0, [pc, #76]	; (402bdc <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402b8e:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402b90:	b12a      	cbz	r2, 402b9e <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  402b92:	f851 2904 	ldr.w	r2, [r1], #-4
  402b96:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402b9a:	4281      	cmp	r1, r0
  402b9c:	d1f9      	bne.n	402b92 <Reset_Handler+0x46>
  402b9e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402ba0:	4b0f      	ldr	r3, [pc, #60]	; (402be0 <Reset_Handler+0x94>)
  402ba2:	4a10      	ldr	r2, [pc, #64]	; (402be4 <Reset_Handler+0x98>)
  402ba4:	429a      	cmp	r2, r3
  402ba6:	d20b      	bcs.n	402bc0 <Reset_Handler+0x74>
  402ba8:	1d13      	adds	r3, r2, #4
  402baa:	4a0f      	ldr	r2, [pc, #60]	; (402be8 <Reset_Handler+0x9c>)
  402bac:	1ad2      	subs	r2, r2, r3
  402bae:	f022 0203 	bic.w	r2, r2, #3
  402bb2:	441a      	add	r2, r3
  402bb4:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402bb6:	2100      	movs	r1, #0
  402bb8:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402bbc:	4293      	cmp	r3, r2
  402bbe:	d1fb      	bne.n	402bb8 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402bc0:	4b0a      	ldr	r3, [pc, #40]	; (402bec <Reset_Handler+0xa0>)
  402bc2:	4a0b      	ldr	r2, [pc, #44]	; (402bf0 <Reset_Handler+0xa4>)
  402bc4:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  402bc6:	4b0b      	ldr	r3, [pc, #44]	; (402bf4 <Reset_Handler+0xa8>)
  402bc8:	4798      	blx	r3

	/* Branch to main function */
	main();
  402bca:	4b0b      	ldr	r3, [pc, #44]	; (402bf8 <Reset_Handler+0xac>)
  402bcc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402bce:	e7fe      	b.n	402bce <Reset_Handler+0x82>
  402bd0:	20000000 	.word	0x20000000
  402bd4:	00402fc8 	.word	0x00402fc8
  402bd8:	200004d0 	.word	0x200004d0
  402bdc:	00402fc4 	.word	0x00402fc4
  402be0:	20000720 	.word	0x20000720
  402be4:	200004d0 	.word	0x200004d0
  402be8:	20000723 	.word	0x20000723
  402bec:	e000ed00 	.word	0xe000ed00
  402bf0:	00400000 	.word	0x00400000
  402bf4:	00402e5d 	.word	0x00402e5d
  402bf8:	00402df9 	.word	0x00402df9

00402bfc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402bfc:	4b3d      	ldr	r3, [pc, #244]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c00:	f003 0303 	and.w	r3, r3, #3
  402c04:	2b03      	cmp	r3, #3
  402c06:	d85d      	bhi.n	402cc4 <SystemCoreClockUpdate+0xc8>
  402c08:	e8df f003 	tbb	[pc, r3]
  402c0c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402c10:	4b39      	ldr	r3, [pc, #228]	; (402cf8 <SystemCoreClockUpdate+0xfc>)
  402c12:	695b      	ldr	r3, [r3, #20]
  402c14:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402c18:	bf14      	ite	ne
  402c1a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402c1e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402c22:	4b36      	ldr	r3, [pc, #216]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c24:	601a      	str	r2, [r3, #0]
  402c26:	e04d      	b.n	402cc4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402c28:	4b32      	ldr	r3, [pc, #200]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402c2a:	6a1b      	ldr	r3, [r3, #32]
  402c2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c30:	d003      	beq.n	402c3a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402c32:	4a33      	ldr	r2, [pc, #204]	; (402d00 <SystemCoreClockUpdate+0x104>)
  402c34:	4b31      	ldr	r3, [pc, #196]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c36:	601a      	str	r2, [r3, #0]
  402c38:	e044      	b.n	402cc4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c3a:	4a32      	ldr	r2, [pc, #200]	; (402d04 <SystemCoreClockUpdate+0x108>)
  402c3c:	4b2f      	ldr	r3, [pc, #188]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c3e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402c40:	4b2c      	ldr	r3, [pc, #176]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402c42:	6a1b      	ldr	r3, [r3, #32]
  402c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c48:	2b10      	cmp	r3, #16
  402c4a:	d002      	beq.n	402c52 <SystemCoreClockUpdate+0x56>
  402c4c:	2b20      	cmp	r3, #32
  402c4e:	d004      	beq.n	402c5a <SystemCoreClockUpdate+0x5e>
  402c50:	e038      	b.n	402cc4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402c52:	4a2d      	ldr	r2, [pc, #180]	; (402d08 <SystemCoreClockUpdate+0x10c>)
  402c54:	4b29      	ldr	r3, [pc, #164]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c56:	601a      	str	r2, [r3, #0]
			break;
  402c58:	e034      	b.n	402cc4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402c5a:	4a29      	ldr	r2, [pc, #164]	; (402d00 <SystemCoreClockUpdate+0x104>)
  402c5c:	4b27      	ldr	r3, [pc, #156]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c5e:	601a      	str	r2, [r3, #0]
			break;
  402c60:	e030      	b.n	402cc4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402c62:	4b24      	ldr	r3, [pc, #144]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402c64:	6a1b      	ldr	r3, [r3, #32]
  402c66:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c6a:	d003      	beq.n	402c74 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402c6c:	4a24      	ldr	r2, [pc, #144]	; (402d00 <SystemCoreClockUpdate+0x104>)
  402c6e:	4b23      	ldr	r3, [pc, #140]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c70:	601a      	str	r2, [r3, #0]
  402c72:	e012      	b.n	402c9a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c74:	4a23      	ldr	r2, [pc, #140]	; (402d04 <SystemCoreClockUpdate+0x108>)
  402c76:	4b21      	ldr	r3, [pc, #132]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c78:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402c7a:	4b1e      	ldr	r3, [pc, #120]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402c7c:	6a1b      	ldr	r3, [r3, #32]
  402c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c82:	2b10      	cmp	r3, #16
  402c84:	d002      	beq.n	402c8c <SystemCoreClockUpdate+0x90>
  402c86:	2b20      	cmp	r3, #32
  402c88:	d004      	beq.n	402c94 <SystemCoreClockUpdate+0x98>
  402c8a:	e006      	b.n	402c9a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402c8c:	4a1e      	ldr	r2, [pc, #120]	; (402d08 <SystemCoreClockUpdate+0x10c>)
  402c8e:	4b1b      	ldr	r3, [pc, #108]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c90:	601a      	str	r2, [r3, #0]
					break;
  402c92:	e002      	b.n	402c9a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402c94:	4a1a      	ldr	r2, [pc, #104]	; (402d00 <SystemCoreClockUpdate+0x104>)
  402c96:	4b19      	ldr	r3, [pc, #100]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402c98:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402c9a:	4b16      	ldr	r3, [pc, #88]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c9e:	f003 0303 	and.w	r3, r3, #3
  402ca2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402ca4:	4a13      	ldr	r2, [pc, #76]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402ca6:	bf07      	ittee	eq
  402ca8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402caa:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402cac:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402cae:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402cb0:	4812      	ldr	r0, [pc, #72]	; (402cfc <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402cb2:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402cb6:	6803      	ldr	r3, [r0, #0]
  402cb8:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  402cbc:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402cbe:	fbb3 f3f2 	udiv	r3, r3, r2
  402cc2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402cc4:	4b0b      	ldr	r3, [pc, #44]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ccc:	2b70      	cmp	r3, #112	; 0x70
  402cce:	d107      	bne.n	402ce0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402cd0:	4a0a      	ldr	r2, [pc, #40]	; (402cfc <SystemCoreClockUpdate+0x100>)
  402cd2:	6813      	ldr	r3, [r2, #0]
  402cd4:	490d      	ldr	r1, [pc, #52]	; (402d0c <SystemCoreClockUpdate+0x110>)
  402cd6:	fba1 1303 	umull	r1, r3, r1, r3
  402cda:	085b      	lsrs	r3, r3, #1
  402cdc:	6013      	str	r3, [r2, #0]
  402cde:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402ce0:	4b04      	ldr	r3, [pc, #16]	; (402cf4 <SystemCoreClockUpdate+0xf8>)
  402ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402ce4:	4905      	ldr	r1, [pc, #20]	; (402cfc <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402ce6:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402cea:	680b      	ldr	r3, [r1, #0]
  402cec:	40d3      	lsrs	r3, r2
  402cee:	600b      	str	r3, [r1, #0]
  402cf0:	4770      	bx	lr
  402cf2:	bf00      	nop
  402cf4:	400e0400 	.word	0x400e0400
  402cf8:	400e1410 	.word	0x400e1410
  402cfc:	200000a4 	.word	0x200000a4
  402d00:	00b71b00 	.word	0x00b71b00
  402d04:	003d0900 	.word	0x003d0900
  402d08:	007a1200 	.word	0x007a1200
  402d0c:	aaaaaaab 	.word	0xaaaaaaab

00402d10 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402d10:	4b1a      	ldr	r3, [pc, #104]	; (402d7c <system_init_flash+0x6c>)
  402d12:	4298      	cmp	r0, r3
  402d14:	d807      	bhi.n	402d26 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  402d1a:	4a19      	ldr	r2, [pc, #100]	; (402d80 <system_init_flash+0x70>)
  402d1c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402d1e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402d22:	6013      	str	r3, [r2, #0]
  402d24:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402d26:	4b17      	ldr	r3, [pc, #92]	; (402d84 <system_init_flash+0x74>)
  402d28:	4298      	cmp	r0, r3
  402d2a:	d806      	bhi.n	402d3a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402d2c:	4b16      	ldr	r3, [pc, #88]	; (402d88 <system_init_flash+0x78>)
  402d2e:	4a14      	ldr	r2, [pc, #80]	; (402d80 <system_init_flash+0x70>)
  402d30:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402d32:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402d36:	6013      	str	r3, [r2, #0]
  402d38:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402d3a:	4b14      	ldr	r3, [pc, #80]	; (402d8c <system_init_flash+0x7c>)
  402d3c:	4298      	cmp	r0, r3
  402d3e:	d806      	bhi.n	402d4e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402d40:	4b13      	ldr	r3, [pc, #76]	; (402d90 <system_init_flash+0x80>)
  402d42:	4a0f      	ldr	r2, [pc, #60]	; (402d80 <system_init_flash+0x70>)
  402d44:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402d46:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402d4a:	6013      	str	r3, [r2, #0]
  402d4c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402d4e:	4b11      	ldr	r3, [pc, #68]	; (402d94 <system_init_flash+0x84>)
  402d50:	4298      	cmp	r0, r3
  402d52:	d806      	bhi.n	402d62 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402d54:	4b10      	ldr	r3, [pc, #64]	; (402d98 <system_init_flash+0x88>)
  402d56:	4a0a      	ldr	r2, [pc, #40]	; (402d80 <system_init_flash+0x70>)
  402d58:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402d5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402d5e:	6013      	str	r3, [r2, #0]
  402d60:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402d62:	4b0e      	ldr	r3, [pc, #56]	; (402d9c <system_init_flash+0x8c>)
  402d64:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402d66:	bf94      	ite	ls
  402d68:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402d6c:	4b0c      	ldrhi	r3, [pc, #48]	; (402da0 <system_init_flash+0x90>)
  402d6e:	4a04      	ldr	r2, [pc, #16]	; (402d80 <system_init_flash+0x70>)
  402d70:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402d72:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402d76:	6013      	str	r3, [r2, #0]
  402d78:	4770      	bx	lr
  402d7a:	bf00      	nop
  402d7c:	01312cff 	.word	0x01312cff
  402d80:	400e0a00 	.word	0x400e0a00
  402d84:	026259ff 	.word	0x026259ff
  402d88:	04000100 	.word	0x04000100
  402d8c:	039386ff 	.word	0x039386ff
  402d90:	04000200 	.word	0x04000200
  402d94:	04c4b3ff 	.word	0x04c4b3ff
  402d98:	04000300 	.word	0x04000300
  402d9c:	05f5e0ff 	.word	0x05f5e0ff
  402da0:	04000500 	.word	0x04000500

00402da4 <usb_cdc_start>:
		//echo function
		usb_cdc_putc(reverse_case(usb_cdc_getc()));
	}
}

void usb_cdc_start(void) {
  402da4:	b508      	push	{r3, lr}
	udc_start();
  402da6:	4b02      	ldr	r3, [pc, #8]	; (402db0 <usb_cdc_start+0xc>)
  402da8:	4798      	blx	r3
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
  402daa:	4b02      	ldr	r3, [pc, #8]	; (402db4 <usb_cdc_start+0x10>)
  402dac:	4798      	blx	r3
  402dae:	bd08      	pop	{r3, pc}
  402db0:	00400949 	.word	0x00400949
  402db4:	004022f9 	.word	0x004022f9

00402db8 <my_callback_cdc_enable>:
void usb_cdc_stop(void) {
	UDC_VBUS_EVENT(false);
}

bool my_callback_cdc_enable(void) {
	my_flag_autorize_cdc_transfert = true;
  402db8:	2001      	movs	r0, #1
  402dba:	4b01      	ldr	r3, [pc, #4]	; (402dc0 <my_callback_cdc_enable+0x8>)
  402dbc:	7018      	strb	r0, [r3, #0]
	return true;
}
  402dbe:	4770      	bx	lr
  402dc0:	200006f9 	.word	0x200006f9

00402dc4 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void) {
	my_flag_autorize_cdc_transfert = false;
  402dc4:	2200      	movs	r2, #0
  402dc6:	4b01      	ldr	r3, [pc, #4]	; (402dcc <my_callback_cdc_disable+0x8>)
  402dc8:	701a      	strb	r2, [r3, #0]
  402dca:	4770      	bx	lr
  402dcc:	200006f9 	.word	0x200006f9

00402dd0 <usb_cdc_putc>:
		//detach usb device
		udc_detach();
	}
}

void usb_cdc_putc(char c) {
  402dd0:	b508      	push	{r3, lr}
	if(my_flag_autorize_cdc_transfert) {
  402dd2:	4b03      	ldr	r3, [pc, #12]	; (402de0 <usb_cdc_putc+0x10>)
  402dd4:	781b      	ldrb	r3, [r3, #0]
  402dd6:	b10b      	cbz	r3, 402ddc <usb_cdc_putc+0xc>
		//wait til tx is ready
		while(!udi_cdc_is_tx_ready);
		udi_cdc_putc(c);
  402dd8:	4b02      	ldr	r3, [pc, #8]	; (402de4 <usb_cdc_putc+0x14>)
  402dda:	4798      	blx	r3
  402ddc:	bd08      	pop	{r3, pc}
  402dde:	bf00      	nop
  402de0:	200006f9 	.word	0x200006f9
  402de4:	004007b1 	.word	0x004007b1

00402de8 <reverse_case>:
}

uint8_t reverse_case(uint8_t c) {
	if(c >= 'a' && c <= 'Z') {
		return c - ('a' - 'A');
	} else if(c >= 'A' && c <= 'Z') {
  402de8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402dec:	b2db      	uxtb	r3, r3
  402dee:	2b19      	cmp	r3, #25
		return c + ('a' - 'A');
  402df0:	bf9c      	itt	ls
  402df2:	3020      	addls	r0, #32
  402df4:	b2c0      	uxtbls	r0, r0
	} else {
		return c;
	}
}	
  402df6:	4770      	bx	lr

00402df8 <main>:
	void usb_cdc_read(uint8_t*, uint32_t);
	void usb_cdc_write(const uint8_t*, uint32_t);
	uint8_t reverse_case(uint8_t);	
#endif

int main (void) {
  402df8:	b508      	push	{r3, lr}
	board_init();
  402dfa:	4b0f      	ldr	r3, [pc, #60]	; (402e38 <main+0x40>)
  402dfc:	4798      	blx	r3
		/* UART initialization, implemented in uart_config.h */
		uart_init();
	#endif
	
	#ifdef USB_TEST
		sysclk_init();
  402dfe:	4b0f      	ldr	r3, [pc, #60]	; (402e3c <main+0x44>)
  402e00:	4798      	blx	r3
		irq_initialize_vectors();
		cpu_irq_enable();
  402e02:	2201      	movs	r2, #1
  402e04:	4b0e      	ldr	r3, [pc, #56]	; (402e40 <main+0x48>)
  402e06:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402e08:	f3bf 8f5f 	dmb	sy
  402e0c:	b662      	cpsie	i
		
		//start
		usb_cdc_start();
  402e0e:	4b0d      	ldr	r3, [pc, #52]	; (402e44 <main+0x4c>)
  402e10:	4798      	blx	r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402e12:	4e0d      	ldr	r6, [pc, #52]	; (402e48 <main+0x50>)
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402e14:	4d0d      	ldr	r5, [pc, #52]	; (402e4c <main+0x54>)
	}
}

uint8_t usb_cdc_getc(void) {
	//halt until a character is received
	return udi_cdc_getc();
  402e16:	4c0e      	ldr	r4, [pc, #56]	; (402e50 <main+0x58>)
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402e18:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
		usb_cdc_start();
	#endif

	while (1) {
		/* Is button pressed? */
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  402e1a:	f013 0f04 	tst.w	r3, #4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402e1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  402e22:	bf0c      	ite	eq
  402e24:	636b      	streq	r3, [r5, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402e26:	632b      	strne	r3, [r5, #48]	; 0x30
	}
}

uint8_t usb_cdc_getc(void) {
	//halt until a character is received
	return udi_cdc_getc();
  402e28:	47a0      	blx	r4
			/* No, so turn LED off. */
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		}
		
		//echo function
		usb_cdc_putc(reverse_case(usb_cdc_getc()));
  402e2a:	b2c0      	uxtb	r0, r0
  402e2c:	4b09      	ldr	r3, [pc, #36]	; (402e54 <main+0x5c>)
  402e2e:	4798      	blx	r3
  402e30:	4b09      	ldr	r3, [pc, #36]	; (402e58 <main+0x60>)
  402e32:	4798      	blx	r3
	}
  402e34:	e7f0      	b.n	402e18 <main+0x20>
  402e36:	bf00      	nop
  402e38:	00400e81 	.word	0x00400e81
  402e3c:	00400e1d 	.word	0x00400e1d
  402e40:	200000a0 	.word	0x200000a0
  402e44:	00402da5 	.word	0x00402da5
  402e48:	400e0e00 	.word	0x400e0e00
  402e4c:	400e1200 	.word	0x400e1200
  402e50:	0040068d 	.word	0x0040068d
  402e54:	00402de9 	.word	0x00402de9
  402e58:	00402dd1 	.word	0x00402dd1

00402e5c <__libc_init_array>:
  402e5c:	b570      	push	{r4, r5, r6, lr}
  402e5e:	4e0f      	ldr	r6, [pc, #60]	; (402e9c <__libc_init_array+0x40>)
  402e60:	4d0f      	ldr	r5, [pc, #60]	; (402ea0 <__libc_init_array+0x44>)
  402e62:	1b76      	subs	r6, r6, r5
  402e64:	10b6      	asrs	r6, r6, #2
  402e66:	bf18      	it	ne
  402e68:	2400      	movne	r4, #0
  402e6a:	d005      	beq.n	402e78 <__libc_init_array+0x1c>
  402e6c:	3401      	adds	r4, #1
  402e6e:	f855 3b04 	ldr.w	r3, [r5], #4
  402e72:	4798      	blx	r3
  402e74:	42a6      	cmp	r6, r4
  402e76:	d1f9      	bne.n	402e6c <__libc_init_array+0x10>
  402e78:	4e0a      	ldr	r6, [pc, #40]	; (402ea4 <__libc_init_array+0x48>)
  402e7a:	4d0b      	ldr	r5, [pc, #44]	; (402ea8 <__libc_init_array+0x4c>)
  402e7c:	1b76      	subs	r6, r6, r5
  402e7e:	f000 f891 	bl	402fa4 <_init>
  402e82:	10b6      	asrs	r6, r6, #2
  402e84:	bf18      	it	ne
  402e86:	2400      	movne	r4, #0
  402e88:	d006      	beq.n	402e98 <__libc_init_array+0x3c>
  402e8a:	3401      	adds	r4, #1
  402e8c:	f855 3b04 	ldr.w	r3, [r5], #4
  402e90:	4798      	blx	r3
  402e92:	42a6      	cmp	r6, r4
  402e94:	d1f9      	bne.n	402e8a <__libc_init_array+0x2e>
  402e96:	bd70      	pop	{r4, r5, r6, pc}
  402e98:	bd70      	pop	{r4, r5, r6, pc}
  402e9a:	bf00      	nop
  402e9c:	00402fb0 	.word	0x00402fb0
  402ea0:	00402fb0 	.word	0x00402fb0
  402ea4:	00402fb8 	.word	0x00402fb8
  402ea8:	00402fb0 	.word	0x00402fb0

00402eac <register_fini>:
  402eac:	4b02      	ldr	r3, [pc, #8]	; (402eb8 <register_fini+0xc>)
  402eae:	b113      	cbz	r3, 402eb6 <register_fini+0xa>
  402eb0:	4802      	ldr	r0, [pc, #8]	; (402ebc <register_fini+0x10>)
  402eb2:	f000 b805 	b.w	402ec0 <atexit>
  402eb6:	4770      	bx	lr
  402eb8:	00000000 	.word	0x00000000
  402ebc:	00402ecd 	.word	0x00402ecd

00402ec0 <atexit>:
  402ec0:	4601      	mov	r1, r0
  402ec2:	2000      	movs	r0, #0
  402ec4:	4602      	mov	r2, r0
  402ec6:	4603      	mov	r3, r0
  402ec8:	f000 b816 	b.w	402ef8 <__register_exitproc>

00402ecc <__libc_fini_array>:
  402ecc:	b538      	push	{r3, r4, r5, lr}
  402ece:	4b08      	ldr	r3, [pc, #32]	; (402ef0 <__libc_fini_array+0x24>)
  402ed0:	4d08      	ldr	r5, [pc, #32]	; (402ef4 <__libc_fini_array+0x28>)
  402ed2:	1aed      	subs	r5, r5, r3
  402ed4:	10ac      	asrs	r4, r5, #2
  402ed6:	bf18      	it	ne
  402ed8:	18ed      	addne	r5, r5, r3
  402eda:	d005      	beq.n	402ee8 <__libc_fini_array+0x1c>
  402edc:	3c01      	subs	r4, #1
  402ede:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402ee2:	4798      	blx	r3
  402ee4:	2c00      	cmp	r4, #0
  402ee6:	d1f9      	bne.n	402edc <__libc_fini_array+0x10>
  402ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402eec:	f000 b864 	b.w	402fb8 <_fini>
  402ef0:	00402fc4 	.word	0x00402fc4
  402ef4:	00402fc8 	.word	0x00402fc8

00402ef8 <__register_exitproc>:
  402ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402efc:	4c25      	ldr	r4, [pc, #148]	; (402f94 <__register_exitproc+0x9c>)
  402efe:	6825      	ldr	r5, [r4, #0]
  402f00:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402f04:	4606      	mov	r6, r0
  402f06:	4688      	mov	r8, r1
  402f08:	4692      	mov	sl, r2
  402f0a:	4699      	mov	r9, r3
  402f0c:	b3cc      	cbz	r4, 402f82 <__register_exitproc+0x8a>
  402f0e:	6860      	ldr	r0, [r4, #4]
  402f10:	281f      	cmp	r0, #31
  402f12:	dc18      	bgt.n	402f46 <__register_exitproc+0x4e>
  402f14:	1c43      	adds	r3, r0, #1
  402f16:	b17e      	cbz	r6, 402f38 <__register_exitproc+0x40>
  402f18:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402f1c:	2101      	movs	r1, #1
  402f1e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402f22:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  402f26:	fa01 f200 	lsl.w	r2, r1, r0
  402f2a:	4317      	orrs	r7, r2
  402f2c:	2e02      	cmp	r6, #2
  402f2e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402f32:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402f36:	d01e      	beq.n	402f76 <__register_exitproc+0x7e>
  402f38:	3002      	adds	r0, #2
  402f3a:	6063      	str	r3, [r4, #4]
  402f3c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402f40:	2000      	movs	r0, #0
  402f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f46:	4b14      	ldr	r3, [pc, #80]	; (402f98 <__register_exitproc+0xa0>)
  402f48:	b303      	cbz	r3, 402f8c <__register_exitproc+0x94>
  402f4a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402f4e:	f3af 8000 	nop.w
  402f52:	4604      	mov	r4, r0
  402f54:	b1d0      	cbz	r0, 402f8c <__register_exitproc+0x94>
  402f56:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402f5a:	2700      	movs	r7, #0
  402f5c:	e880 0088 	stmia.w	r0, {r3, r7}
  402f60:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402f64:	4638      	mov	r0, r7
  402f66:	2301      	movs	r3, #1
  402f68:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402f6c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402f70:	2e00      	cmp	r6, #0
  402f72:	d0e1      	beq.n	402f38 <__register_exitproc+0x40>
  402f74:	e7d0      	b.n	402f18 <__register_exitproc+0x20>
  402f76:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402f7a:	430a      	orrs	r2, r1
  402f7c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402f80:	e7da      	b.n	402f38 <__register_exitproc+0x40>
  402f82:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402f86:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402f8a:	e7c0      	b.n	402f0e <__register_exitproc+0x16>
  402f8c:	f04f 30ff 	mov.w	r0, #4294967295
  402f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f94:	00402fa0 	.word	0x00402fa0
  402f98:	00000000 	.word	0x00000000
  402f9c:	00000043 	.word	0x00000043

00402fa0 <_global_impure_ptr>:
  402fa0:	200000a8                                ... 

00402fa4 <_init>:
  402fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fa6:	bf00      	nop
  402fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402faa:	bc08      	pop	{r3}
  402fac:	469e      	mov	lr, r3
  402fae:	4770      	bx	lr

00402fb0 <__init_array_start>:
  402fb0:	00402ead 	.word	0x00402ead

00402fb4 <__frame_dummy_init_array_entry>:
  402fb4:	004000f1                                ..@.

00402fb8 <_fini>:
  402fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fba:	bf00      	nop
  402fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402fbe:	bc08      	pop	{r3}
  402fc0:	469e      	mov	lr, r3
  402fc2:	4770      	bx	lr

00402fc4 <__fini_array_start>:
  402fc4:	004000cd 	.word	0x004000cd
